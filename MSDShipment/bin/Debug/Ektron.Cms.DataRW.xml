<?xml version="1.0"?>
<doc>
<assembly>
<name>
Ektron.Cms.DataRW
</name>
</assembly>
<members>
<member name="M:Ektron.Cms.DataIO.QuickLinkRW.BuildQuicklink(Ektron.Cms.Common.QuickLinkData)">
	<summary>
 This method sets the link property of the dataobject
 </summary>
	<param name="data"></param>
	<remarks></remarks>
</member><member name="F:Ektron.Cms.DataIO.LicenseManager.Feature.eSync">
	<summary>
 Enterprise + Professional Add-On
 </summary>
	<remarks></remarks>
</member><member name="F:Ektron.Cms.DataIO.LicenseManager.Feature.eCommerce">
	<summary>
 Enterprise + Professional Add-On
 </summary>
	<remarks></remarks>
</member><member name="F:Ektron.Cms.DataIO.LicenseManager.Feature.MultiSite">
	<summary>
 Enterprise + Professional Add-On
 </summary>
	<remarks></remarks>
</member><member name="F:Ektron.Cms.DataIO.LicenseManager.Feature.Xliff">
	<summary>
 Professional
 </summary>
	<remarks></remarks>
</member><member name="F:Ektron.Cms.DataIO.LicenseManager.Feature.DocumentManagement">
	<summary>
 Professional
 </summary>
	<remarks></remarks>
</member><member name="F:Ektron.Cms.DataIO.LicenseManager.Feature.SocialNetworking">
	<summary>
 Professional
 </summary>
	<remarks></remarks>
</member><member name="F:Ektron.Cms.DataIO.LicenseManager.Feature.UrlAliasing">
	<summary>
 Professional
 </summary>
	<remarks></remarks>
</member><member name="F:Ektron.Cms.DataIO.LicenseManager.Feature.WebSiteAnalytics">
	<summary>
 Professional
 </summary>
	<remarks></remarks>
</member><member name="F:Ektron.Cms.DataIO.LicenseManager.Feature.Personalization">
	<summary>
 Professional
 </summary>
	<remarks></remarks>
</member><member name="F:Ektron.Cms.DataIO.LicenseManager.Feature.Analytics">
	<summary>
 Professional
 </summary>
	<remarks></remarks>
</member><member name="F:Ektron.Cms.DataIO.LicenseManager.Feature.StandardFeature">
	<summary>
 All Others, Web Alerts, Polls &amp; Survey, Blogs, Forums, Metadata, Taxonomy, Search, Workflow, Permissions, etc...
 </summary>
	<remarks></remarks>
</member><member name="F:Ektron.Cms.DataIO.LicenseManager.Feature.MembershipUsers">
	<summary>
 Standard, Professional, Enterprise without eIntranet
 </summary>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.DataIO.LicenseManager.Feature">
	<summary>
 CMS Features.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.IsFeatureEnable(Ektron.Cms.Common.EkRequestInformation,Ektron.Cms.DataIO.LicenseManager.Feature,System.Boolean)">
	<summary>
 Determines if the feature is enable based on license key
 </summary>
	<param name="feature">DataIO.LicenseManager.Feature</param>
	<param name="LogFailure">Write to event viewer if feature is locked</param>
	<returns>bool</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.IsFeatureEnable(Ektron.Cms.Common.EkRequestInformation,Ektron.Cms.DataIO.LicenseManager.Feature)">
	<summary>
 Determines if the feature is enable based on license key
 </summary>
	<param name="feature">DataIO.LicenseManager.Feature</param>
	<returns>bool</returns>
	<remarks>The method will write a warning to the event viewer if a license key validation fails and not in workarea.</remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.Reset(Ektron.Cms.Common.EkRequestInformation)">
	<summary>
 Resets and re-initialize license manager. 
 </summary>
	<param name="reqInfo">Common.EkRequestInformation</param>
	<remarks>Mainly called after license key changes.</remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.ResetSiteCount(Ektron.Cms.Common.EkRequestInformation)">
	<summary>
 Resets and re-initialize multi site count
 </summary>
	<param name="reqInfo">Common.EkRequestInformation</param>
	<remarks>Mainly called after adding/removing a site.</remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.IsSiteLimitReached(Ektron.Cms.Common.EkRequestInformation)">
	<summary>
 Checks to see if maximum allowed sites are created.
 </summary>
	<param name="reqInfo">Common.EkRequestInformation</param>
	<returns>True if the limit is reached otherwise False.</returns>
	<remarks>Mainly called when creating the site.</remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.IsEIntranetSite(Ektron.Cms.Common.EkRequestInformation)">
	<summary>
	</summary>
	<param name="reqInfo">Common.EkRequestInformation</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.IsEIntranetKey(Ektron.Cms.Common.EkRequestInformation)">
	<summary>
	</summary>
	<param name="reqInfo">Common.EkRequestInformation</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.Instance(Ektron.Cms.Common.EkRequestInformation)">
	<summary>
 Ensure a class only has one instance, and provide a global point of access to it.
 </summary>
	<returns>DataIO.LicenseManager.LicenseManager</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.IsEnterpriseFeature(Ektron.Cms.DataIO.LicenseManager.Feature)">
	<summary>
 Determines if the feature is enterprise only
 </summary>
	<param name="feature">DataIO.LicenseManager.Feature</param>
	<returns>bool</returns>
	<remarks>The method does not check if the feature is enabled or not</remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.IsProfessionalFeature(Ektron.Cms.DataIO.LicenseManager.Feature)">
	<summary>
 Determines if specified feature is professional version only.
 </summary>
	<param name="feature">DataIO.LicenseManager.Feature</param>
	<returns>bool</returns>
	<remarks>The method does not check if the feature is enabled or not</remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.IsStandardFeature(Ektron.Cms.DataIO.LicenseManager.Feature)">
	<summary>
 Determines if this is a standard feature
 </summary>
	<param name="feature">DataIO.LicenseManager.Feature</param>
	<returns>bool</returns>
	<remarks>The method does not check if the feature is enabled or not</remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.IsValidMultiSite(Ektron.Cms.Common.EkRequestInformation)">
	<summary>
 Determines if Multisite is valid option from license key(s)
 </summary>
	<returns>True if key has valid modifier, otherwise false</returns>
	<remarks>Only checks if modifier exits. it does not check if max allowed sites have been created.</remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.#ctor">
	<summary>
 Prevent developers from creating new instance of this class
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.LicenseManager.LicenseManager.Init">
	<summary>
 Initialize License Key Handlers
 </summary>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.DataIO.LicenseManager.LicenseManager">
	<summary>
 License Manger
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkUserRW.GetUserGroupList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.UserGroupProperty})">
	<summary>
 Returns a list of groups based upon the supplied criteria.
 </summary>
	<param name="criteria">criteria used to restrict group retrieval.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkUserRW.GetUserGroupList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.UserGroupProperty},System.String,System.Collections.Generic.Dictionary{Ektron.Cms.Common.UserGroupProperty,System.String})">
	<summary>
 Returns a list of groups based upon the supplied criteria.
 </summary>
	<param name="criteria">criteria used to restrict group retrieval.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkUserRW.GetUserCustomProperties(System.Int64)">
	<summary>
 Returns an array of custom properties for a given user's ID.
 </summary>
	<param name="UserId">User's ID</param>
	<returns>Ektron.Cms.CustomAttribute()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.DataIO.EkSiteRW.GetAllSyncableRelationsForFolder(System.Int64)">
	<summary>
 Returns all the sync relations for a folder that are currently able to be synced.
 </summary>
	<param name="folderId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkSiteRW.GetAllSyncableRelationsForContent(System.Int64,System.Int32)">
	<summary>
 Returns all the sync relations for a content that are currently able to be synced.
 </summary>
	<param name="contentId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkModuleRW.SynchronizeHistogramTable(System.Int64,Ektron.Cms.FormFieldList)">
	<summary>
 Synchronizes the histogram table with the form design.
 The histogram table allows for quick responses to the
 users when entering poll data.  If a poll is changed,
 this needs to be updated.  
 </summary>
	<param name="ID">The ID of the form.</param>
	<param name="aryFormFieldLIst">The array list of the designed fields for the form.</param>
	<returns>False if there are no errors.</returns>
	<remarks>
 This is called internally by the Publish functionality.
 There is no need for a script or application to call
 this public method.
 </remarks>
</member><member name="M:Ektron.Cms.DataIO.EkLibraryRW.GetAllChildContentFoldersv2_0(System.Int64,System.String,System.Int32)">
	<summary>
 returns all the child folders or given parent id
 </summary>
	<param name="ParentFolderID">parentid</param>
	<param name="OrderBy">order by clause</param>
	<param name="Hidden">0-regular folders,1-community folder,-1=ignore this param</param>
	<returns>collection of subfolders</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkLibraryRW.CheckMultisiteDomain(System.Int64,System.String)">
	<summary>
 Checks whether requested folder is a Multisite
 Defect#48808:Relative Links needs to be inserted in the Editor when you add reference to a content that belongs to the same Multisite
 </summary>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetContentReportsInfo(System.String,System.String,System.String,System.Int64,Ektron.Cms.PagingInfo,Ektron.Cms.Common.EkEnumeration.CMSContentType,System.Boolean)">
	<summary>[02/26/2010]
 To improve performance, we have added new stored procedure 'usp_CMS_GetContentReportInfo' and old
 dynamic SQL needs to be removed in future release version 8.02 and as well as added overloaded method
 which takes PagingInfo. Using old method will execute dynamic SQL to return the results.
 </summary>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetAssetStorageLocation">
	<summary>
 Gets assetmanagement's storage location (assetlibrary)
 </summary>
	<returns>asset management storage location</returns>
	<remarks>Requires HttpContext, so don't use this from a thread!</remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.UpdateFolderApprovalMethod(System.Int64,System.Int32,System.Int64)">
	<summary>
 Update ApprovalMethod for child folders based on the parent folder 
 </summary>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.IsAssetMediaBlock(System.String)">
	<summary>
 This method determines the dms asset is a media type manage by CMS.
 </summary>
	<param name="MimeType">MIME/Type (Unformmated)</param>
	<returns>True | False</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.PurgeTemplate(System.Int64)">
	<summary>
 Be really careful calling this - it should only be called if there are no folders or content blocks referencing that template.
 </summary>
	<param name="template_id"></param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetPrivateMessageList(Ektron.Cms.Common.Criteria{Ektron.Cms.PrivateMessageProperty})">
	<summary>
 Returns a list of private messages based upon the supplied criteria.
 </summary>
	<param name="criteria">criteria used to restrict message retrieval.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetLinkCheckContentSince(System.String,System.Int32)">
	<summary>
 Gets content for bad link checking
 </summary>
	<param name="lastFTkey">return results after this FT key only (FTkey = contentID_languageID)</param>
	<param name="maxresults">max #results to return</param>
	<returns>array of content blocks</returns>
	<remarks>only the LanguageID, ID, FolderID, Title, and HTML fields are valid in results</remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetLinkCheckMenuItems">
	<summary>
 Gets a list of menuitems for bad link checking
 </summary>
	<returns>collection of menuitems (also a collection)</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.AddDistributionRelationship(System.Int64,System.Int64,System.Int32)">
	<summary>
 Adds a distribution relationship between a piece of source content and destination content.
 This is used for distributing community content to the cms as a whole.
 </summary>
	<param name="sourceContentId">Id of the source content</param>
	<param name="destinationContentId">Id of the content after it was distributed to new location.</param>
	<param name="languageId">language of the content that was distributed.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.AddDistributionRelationship(System.Guid,System.Int64,System.Int64,System.Int32)">
	<summary>
 Adds a distribution relationship between a piece of source content and destination content.
 This is used for distributing  a piece of sharepoint content to the CMS.
 </summary>
	<param name="sharepointListId">Id of the source sharepoint list</param>
	<param name="sharepointItemId">Id of the source sharepoint content</param>
	<param name="destinationContentId">Id of the content after it was distributed to CMS.</param>
	<param name="languageId">language of the content that was distributed.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.DeleteDistributionRelationship(System.Int64,System.Int32)">
	<summary>
 Deletes a distribution relationship between a piece of source community content and destination content.
 </summary>
	<param name="contentId">Id of either the source or destination content.</param>
	<param name="languageId">language of the content that was distributed.</param>
	<remarks>This will delete relationships where contentId is EITHER the source OR destination ID.  This 
 function is intended to be used to delete relationships when content is deleted.</remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.DeleteDistributionRelationship(System.Guid,System.Int64,System.Int32)">
	<summary>
 Deletes a distribution relationship between a piece of source sharepoint content and destination content.
 This is used for distributing a piece of sharepoint content to the CMS.
 </summary>
	<param name="sharepointListId">Id of the source sharepoint list</param>
	<param name="sharepointItemId">Id of the source sharepoint content</param>
	<param name="languageId">language of the content that was distributed.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetDestinationContentId(System.Int64)">
	<summary>
 Gets the Id of a piece of community content that was distributed to a CMS Folder.
 </summary>
	<param name="sourceContentId">Id of the source community content</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetDestinationContentId(System.Guid,System.Int64)">
	<summary>
 Gets the Id of a piece of sharepoint content that was distributed to a CMS Folder.
 </summary>
	<param name="sharepointListId">Id of the source sharepoint list</param>
	<param name="sharepointItemId">Id of the source sharepoint content</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetSourceContentId(System.Int64)">
	<summary>
 Gets the Id of a piece of source content that was distributed to a CMS Folder.
 </summary>
	<param name="destinationContentId">Id of the destination CMS content</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetSourceSharepointId(System.Int64)">
	<summary>
 Gets the Id of a piece of source sharepoint content that was distributed to a CMS Folder.
 </summary>
	<param name="destinationContentId">Id of the destination CMS content</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetFolderIdForContentId(System.Int64)">
	<summary>
 Gets folder id associated with given content Id.
 </summary>
	<param name="contentId">Id of the CMS content</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetUrlAlias(System.Int64,System.Int32)">
	<summary>
 This Function is used in GetQuickLink for taxonomy and cannot be added to the DB as the taxonomy view is indexed for speed and cannot
 have any functions or outer joins as a requirement for index views.
 </summary>
	<param name="ContentId"></param>
	<param name="ContentLanguage"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetContentList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.ContentProperty},System.Boolean,System.Boolean)">
	<summary>
 Returns a list of contnet based upon the supplied criteria.
 </summary>
	<param name="criteria">criteria used to restrict content retrieval.</param>
	<param name="filterNonReadableContent">if true, will restrict content list to only content readable by current user in workarea based upon user permisisons.
 Private content is always filtered based upon permissions.</param>
	<param name="folderRecursive">If true, retrieves all recursive folders based upon folderId in criteria filter.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetContentList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.ContentProperty},System.Boolean,System.Boolean,System.String,System.Collections.Generic.Dictionary{Ektron.Cms.Common.ContentProperty,System.String})">
	<summary>
 Returns a list of contnet based upon the supplied criteria.
 </summary>
	<param name="criteria">criteria used to restrict content retrieval.</param>
	<param name="filterNonReadableContent">if true, will restrict content list to only content readable by current user in workarea based upon user permisisons.
 Private content is always filtered based upon permissions.</param>
 ''' <param name="folderRecursive">If true, retrieves all recursive folders based upon folderId in criteria filter.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetReadableContentSql(System.String)">
	<summary>
 Returns a "criteria ready" sql statement for selecting content data from a content table or view.
 </summary>
	<param name="tableName">the name of table or view to select from.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.GetReadableContentSql(System.String,System.Boolean,System.Int64)">
	<summary>
 Returns a "criteria ready" sql statement for selecting content data from a content table or view.
 </summary>
	<param name="tableName">the name of table or view to select from.</param>
	<param name="folderRecursive">pass true to retrive content by folder recursively</param>
	<param name="folderId">Only required if folderRecursive = true.  If True, should be folder to retreive from recursively.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.DataIO.EkContentRW.PopulateExistingCollectionFromContentData(Microsoft.VisualBasic.Collection,Ektron.Cms.ContentData)">
	<summary>
 Populates an existing collection with values form contentdata.  Used by COntent Strategy events to copy over any modifications to the contentdata to the collection.
 NOTE:  Does not support all properties.  If more properties are needed, add them.
 </summary>
	<param name="cCol"></param>
	<param name="data"></param>
	<remarks></remarks>
</member>
</members>
</doc>