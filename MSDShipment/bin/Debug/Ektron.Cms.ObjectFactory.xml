<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ektron.Cms.ObjectFactory</name>
    </assembly>
    <members>
        <member name="T:Ektron.Cms.RequestInformationStrategy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderStrategy"/> which sets RequestInformation property on each object built.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Ektron.Cms.RequestInformationStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Override of <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/>. Calls methods on the object.
            </summary>
            <param name="context">The build context.</param>
            <param name="typeToBuild">The type being built.</param>
            <param name="existing">The object on which the methods will be called.</param>
            <param name="idToBuild">The ID of the object being built.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.ContainerXmlConfigElement">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.ContainerXmlConfigElement.Mappings">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.ContainerXmlConfigElement.BuildRules">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.ContainerXmlConfigElement.EnableReflection">
            <remarks/>
        </member>
        <member name="T:Ektron.Cms.MappingElement">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.MappingElement.FromType">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.MappingElement.ToType">
            <remarks/>
        </member>
        <member name="T:Ektron.Cms.MethodElement">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.MethodElement.Items">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.MethodElement.Name">
            <remarks/>
        </member>
        <member name="T:Ektron.Cms.RefElement">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.RefElement.Type">
            <remarks/>
        </member>
        <member name="T:Ektron.Cms.ValueElement">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.ValueElement.Type">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.ValueElement.Value">
            <remarks/>
        </member>
        <member name="T:Ektron.Cms.PropertyElement">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.PropertyElement.Item">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.PropertyElement.Name">
            <remarks/>
        </member>
        <member name="T:Ektron.Cms.ConstructorElement">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.ConstructorElement.Items">
            <remarks/>
        </member>
        <member name="T:Ektron.Cms.BuildRuleElement">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.BuildRuleElement.Constructor">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.BuildRuleElement.Property">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.BuildRuleElement.Method">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.BuildRuleElement.Type">
            <remarks/>
        </member>
        <member name="P:Ektron.Cms.BuildRuleElement.Mode">
            <remarks/>
        </member>
        <member name="T:Ektron.Cms.ModeElement">
            <remarks/>
        </member>
        <member name="F:Ektron.Cms.ModeElement.Singleton">
            <remarks/>
        </member>
        <member name="F:Ektron.Cms.ModeElement.Instance">
            <remarks/>
        </member>
        <member name="M:Ektron.Cms.DependencyContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.DependencyContainer"/> class
            that supports attribute-based reflection.
            </summary>
        </member>
        <member name="M:Ektron.Cms.DependencyContainer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.DependencyContainer"/> class.
            </summary>
            <param name="enableReflection">Set to <c>true</c> to enable support for
            attribute-based reflection</param>
        </member>
        <member name="M:Ektron.Cms.DependencyContainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.DependencyContainer"/> class.
            </summary>
            <param name="xml">The XML configuration for the container</param>
        </member>
        <member name="M:Ektron.Cms.DependencyContainer.#ctor(Microsoft.Practices.ObjectBuilder.IBuilderConfigurator{Microsoft.Practices.ObjectBuilder.BuilderStage})">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.DependencyContainer"/> class.
            </summary>
            <param name="configurator">The container configurator.</param>
        </member>
        <member name="M:Ektron.Cms.DependencyContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ektron.Cms.DependencyContainer.FindByType``1">
            <summary>
            Finds all the items in the container that implement the given type.
            </summary>
            <returns>An enumeration of the matching items</returns>
        </member>
        <member name="M:Ektron.Cms.DependencyContainer.Get``1">
            <summary>
            Gets an object of the given type from the container.
            </summary>
            <returns>The object</returns>
        </member>
        <member name="M:Ektron.Cms.DependencyContainer.RegisterInstance``1(``0)">
            <summary>
            Registers a singleton instance in the container.
            </summary>
            <typeparam name="TBuild">The type of the singleton</typeparam>
            <param name="item">The item instance to be registered as the singleton</param>
        </member>
        <member name="M:Ektron.Cms.DependencyContainer.RegisterSingleton``1">
            <summary>
            Registers the given type as a singleton in the container.
            </summary>
            <typeparam name="TBuild">The type to be made a singleton</typeparam>
        </member>
        <member name="M:Ektron.Cms.DependencyContainer.RegisterTypeMapping``2">
            <summary>
            Registers a type mapping in the container.
            </summary>
            <typeparam name="TRequested">The type that is requested by the user</typeparam>
            <typeparam name="TToBuild">The type to be built instead</typeparam>
        </member>
        <member name="T:Ektron.Cms.Activity.ActivityCommentProperty">
            <summary>
            Enumeration of ActivityComment columns available for sorting and filtering.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Activity.ActivityCommentData">
            <summary>
            Data class representing comments on an ActivityStream Activity
            </summary>
        </member>
        <member name="M:Ektron.Cms.ICmsBaseData`1.Validate">
            <summary>
            Validates that the data object is in a valid state for persisting.
            </summary>
            <returns>Collection of ValidationResult messages if the object is not valid.</returns>
        </member>
        <member name="M:Ektron.Cms.BaseData`1.Validate">
            <summary>
            Validates that the data object is in a valid state for persisting.
            </summary>
            <returns>Collection of ValidationResult messages if the object is not valid.</returns>
        </member>
        <member name="P:Ektron.Cms.CmsData`1.Id">
            <summary>
            Gets or sets the ID of this data object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityCommentData.Id">
            <summary>
            Gets or sets the Id of the comment.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityCommentData.ActivityId">
            <summary>
            Gets or sets the Id of the Activity the comment belongs to.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityCommentData.Comment">
            <summary>
            Gets or sets the comment text.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityCommentData.UserId">
            <summary>
            Gets or sets the ID of the user who made the comment.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityCommentData.UserAvatar">
            <summary>
            Gets or sets the avater of the user who made the comment.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityCommentData.UserDisplayName">
            <summary>
            Gets or sets the display name of the user who made the comment.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityCommentData.DateCreated">
            <summary>
            Gets or sets the date the comment was created.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityCommentData.TimeLapse">
            <summary>
            Gets or sets the time lapse for the comment.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Activity.ActivityCriteria">
            <summary>
            Criteria class for use specifically with ActivityStreams.  It can be used in place of Criteria&gt;ActivityProperty&lt; for 
            further customizing the activity result set.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Common.Criteria`1.AddFilter(`0,Ektron.Cms.Common.CriteriaFilterOperator,System.Object)">
            <summary>
            Adds a new CriteriaFilter to the filter list.
            </summary>
            <param name="field">field to filter on.</param>
            <param name="filterOperator">operator to use on field and value for filter.</param>
            <param name="value">value used for filter.</param>
            <returns>newly added filter.</returns>
        </member>
        <member name="M:Ektron.Cms.Common.Criteria`1.PopulateCommand(System.Data.Common.DbCommand,System.Collections.Generic.Dictionary{`0,System.String},System.String)">
            <summary>
            Populates the supplied command object with the Sql select statement and DBParameters based upon the current criteria object.
            The generated sql select statement generates the column list in the same order as supplied in the columnMap.  A second statement is also created
            That returns a single value which is the total number of records available matching the criteria filter.  Thsi would be used to populate the
            Criteria.PagingInfo.TotalRecords property.
            </summary>
            <param name="command">DBCommand to populate.</param>
            <param name="columnMap">Dictionary mapping T enum values to valid column names in db.</param>
            <param name="tableName">Name of table to create select statement for.</param>
        </member>
        <member name="M:Ektron.Cms.Common.Criteria`1.GenerateSql(System.Data.Common.DbCommand,System.Collections.Generic.Dictionary{`0,System.String},System.String@,System.String@,System.String@)">
            <summary>
            Generates the where clause and order by clause for the current criteria object.
            </summary>
            <param name="command">DBCommand to add DBParameters to.</param>
            <param name="columnMap">hashtable mapping T Field values to string column names.</param>
            <param name="whereClause">out value - resulting where clause</param>
            <param name="orderByClause">out value - resulting order by</param>
        </member>
        <member name="P:Ektron.Cms.Common.Criteria`1.Condition">
             <summary>
             The Logical operator to apply to the filters.
             </summary>
            <remarks>The Criteira Condition controlls the operator for the default filter group as well as the ANDing\Oring the filter groups together.</remarks>
        </member>
        <member name="P:Ektron.Cms.Common.Criteria`1.RequiredFilterGroup">
            <summary>
            Gets or sets a required filter group.  This group will be appended to the final filter using an AND operator regardless of the criteria's 
            defined Condition.  This would be used to enforce language restriction, etc.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ektron.Cms.Activity.ActivityCriteria.ReturnCommentCount" -->
        <member name="T:Ektron.Cms.Activity.ActivityProperty">
            <summary>
            Enumeration representing ActivityData properties that can be filtered and sorted on.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Activity.ActivityData">
            <summary>
            Data class representing an Activity that has occured within the CMS.
            </summary>
        </member>
        <member name="P:Ektron.Cms.CmsLocalizedData`1.LanguageId">
            <summary>
            Gets or sets the Language ID of this data object.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Activity.ActivityData.Validate">
            <summary>
            Validates the current ActivityData instance is in a valid state for saving.  Returns collection of validation errors if not valid.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityData.Id">
            <summary>
            Gets or set the Id of the activity.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityData.ActivityTypeId">
            <summary>
            Gets or sets the ActivityType for this Activity.  Built in CMS Activity are defined in EkEnumeration.ActivityType.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityData.ObjectId">
            <summary>
            Gets or sets the Id of the object associated with this activity.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityData.ActionUser">
            <summary>
            Gets or sets the user who caused this activity to occur. For example, the user who posted a blog post or uploaded a document.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityData.ScopeObjectId">
            <summary>
            Gets or sets the Id of the scope object associated with this activity.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityData.LanguageId">
            <summary>
            Gets or sets the Language associated with this activity's message.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityData.Message">
            <summary>
            Gets or sets the message for this activity.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityData.Date">
            <summary>
            Gets or sets the date the activity occured.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityData.SiteId">
            <summary>
            Gets or sets the Id of the site that the activity originated from.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityData.TimeLapse">
            <summary>
            Gets the time lapse for the activity.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityData.CommentCount">
            <summary>
            Gets or sets the Comment count for the activity.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityData.Comments">
            <summary>
            Gets or sets the Comments for the activity.  This property will not be popukated unless explicitly specified when calling API.
            To get the total comment count, see CommentCount property.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Activity.ActivityTypeProperty">
            <summary>
            Enumeration of ActivityType columns available for sorting and filtering.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Activity.ActivityTypeData">
            <summary>
            Data class representing activity types that inside and outside the CMS.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityTypeData.Name">
            <summary>
            gets or sets the name of the ActivityType.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityTypeData.ObjectType">
            <summary>
            gets or sets the Cms Object Type associated with activity.  This may be null for custom activities.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityTypeData.ActionType">
            <summary>
            gets or sets the Action associated with the activity.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityTypeData.Scope">
            <summary>
            gets or sets the Scope of the activity.  For example, it may originate from a community group.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Activity.ActivityTypeData.DisplayInPreferences">
            <summary>
            Gets or sets the Preference Display flag.  If true, users will be able to define notification preferences for the activity.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Activity.IActivityComment">
            <summary>
            Interface for ActivityComment business logic.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Interfaces.Analytics.Provider.AggregationTimePeriod">
            <summary>
            Time peroid over which values are totalled.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Interfaces.Analytics.Provider.AggregationTimePeriod.EntireDateRange">
            <summary>
            Values are totalled for the entire StartDate to EndDate range
            </summary>
        </member>
        <member name="F:Ektron.Cms.Interfaces.Analytics.Provider.AggregationTimePeriod.ByDay">
            <summary>
            Values are totalled for each day within the StartDate to EndDate range
            </summary>
        </member>
        <member name="M:Ektron.Cms.Interfaces.Analytics.Provider.MetricFilter.#ctor(Ektron.Cms.Analytics.Providers.Metric,Ektron.Cms.Interfaces.Analytics.Provider.MetricFilterOperator,System.Double)">
            <summary>
            Creates a new filter
            </summary>
            <param name="field">field to filter on.</param>
            <param name="filterOperator">operator to use on field and value for filter.</param>
            <param name="value">value used for filter.</param>
        </member>
        <member name="M:Ektron.Cms.Interfaces.Analytics.Provider.DimensionFilter.#ctor(Ektron.Cms.Analytics.Providers.Dimension,Ektron.Cms.Interfaces.Analytics.Provider.DimensionFilterOperator,System.String)">
            <summary>
            Creates a new filter
            </summary>
            <param name="field">field to filter on.</param>
            <param name="filterOperator">operator to use on field and value for filter.</param>
            <param name="value">value used for filter.</param>
        </member>
        <member name="M:Ektron.Cms.Interfaces.Analytics.Provider.MetricFilterGroup.AddFilter(Ektron.Cms.Analytics.Providers.Metric,Ektron.Cms.Interfaces.Analytics.Provider.MetricFilterOperator,System.Double)">
            <summary>
            Adds a new CriteriaFilter to the filter list.
            </summary>
            <param name="field">field to filter on.</param>
            <param name="filterOperator">operator to use on field and value for filter.</param>
            <param name="value">value used for filter.</param>
            <returns>newly added filter.</returns>
        </member>
        <member name="P:Ektron.Cms.Interfaces.Analytics.Provider.MetricFilterGroup.Condition">
            <summary>
            Gets or Sets the LogicalOperator for the FilterGroup.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Interfaces.Analytics.Provider.DimensionFilterGroup.AddFilter(Ektron.Cms.Analytics.Providers.Dimension,Ektron.Cms.Interfaces.Analytics.Provider.DimensionFilterOperator,System.String)">
            <summary>
            Adds a new filter to the filter list.
            </summary>
            <param name="field">field to filter on.</param>
            <param name="filterOperator">operator to use on field and value for filter.</param>
            <param name="value">value used for filter.</param>
            <returns>newly added filter.</returns>
        </member>
        <member name="P:Ektron.Cms.Interfaces.Analytics.Provider.DimensionFilterGroup.Condition">
            <summary>
            Gets or Sets the LogicalOperator for the FilterGroup.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Analytics.Reporting.AnalyticsReportData.MonthVisits(System.DateTime)">
            //////////////
        </member>
        <member name="M:Ektron.Cms.Analytics.Reporting.YearTotalData.MonthVisits(System.DateTime)">
            //////////////
        </member>
        <member name="T:Ektron.Cms.Commerce.CommerceAuditProperty">
            <summary>
            Enumeration of CommerceAudit columns available for sorting and filtering.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Commerce.AuditLogLevel.Error">
            <summary>
            Log errors only.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Commerce.AuditLogLevel.Warning">
            <summary>
            Log errors and warnings.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Commerce.AuditLogLevel.Information">
            <summary>
            Log errors, warnings and information.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Commerce.AuditLogLevel.Verbose">
            <summary>
            Log everything.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.EntryAttributeCriteriaProperty">
            <summary>
            Enumeration used for filtering entry lists using EntryAttributeCriteria.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.EntryAttributeCriteria">
            <summary>
            Specialized criteria class for filtering catalog entries by Product Attribute values.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.EntryAttributeCriteria.AddFilter(Ektron.Cms.Commerce.EntryAttributeCriteriaProperty,Ektron.Cms.Common.CriteriaFilterOperator,System.Object)">
            <summary>
            Adds a normal criteria filter to the criteria object.  To add a filter on the entry attribute, use the special AddAttributeFilter method.
            </summary>
            <param name="field"></param>
            <param name="filterOperator"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.EntryAttributeCriteria.AddAttributeFilter(System.String,Ektron.Cms.Common.CriteriaFilterOperator,System.Object)">
            <summary>
            Adds a attribute based filter to the critaria object.
            </summary>
            <param name="attributeName">Name of attribute to filter on.</param>
            <param name="filterOperator">Filter operator to use for this filter.</param>
            <param name="value">Value of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.EntryAttributeCriteria.AddAttributeFilter(System.Int64,Ektron.Cms.Common.CriteriaFilterOperator,System.Object)">
            <summary>
            Adds a attribute based filter to the critaria object.
            </summary>
            <param name="attributeName">Id of attribute to filter on.</param>
            <param name="filterOperator">Filter operator to use for this filter.</param>
            <param name="value">Value of the attribute.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Commerce.PasswordHistoryProperty">
            <summary>
            Enumeration of PasswordHistory columns available for sorting and filtering.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.GoogleCheckoutPayment">
            <summary>
            Data class representing a GoogleCheckout payment.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.PaymentMethod">
            <summary>
            Base class used for representing payment methods for use by payment provider.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.PaymentMethod.GetPayment(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a PaymentMethod based upon NameValueCollection.  This would be used by the checkout control to get the paymentMethod
            posted back from the page.
            </summary>
            <param name="postBackData"></param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentMethod.BillingFirstName">
            <summary>
            Gets or sets the first name of the billable party.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentMethod.BillingLastName">
            <summary>
            Gets or sets the last name of the billable party.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentMethod.BillingAddress">
            <summary>
            Gets or sets the Billing Address of the party being authorized.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.GoogleCheckoutPayment.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="number">number for this credit card</param>
            <param name="expirationDate">Expiration date for this credit card</param>
            <param name="ccid">CCID for this credit card</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.GoogleCheckoutPayment.GetPayment(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a PaymentMethod based upon NameValueCollection.  This would be used by the checkout control to get the paymentMethod
            posted back form the page.
            </summary>
            <param name="postBackData"></param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.GoogleCheckoutPayment.OrderNumber">
            <summary>
            Gets or sets the Token for this payment.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentMethods.PayPalResponse.Response">
            <summary>
            The raw response from the gateway.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.MaestroCardPayment.Validate">
            <summary>
            Validates the data entered into the cards properties.
            </summary>
            <returns>Returns true if the current data meets validation requirements, false otherwise.</returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.MaestroCardPayment.GetPayment(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a PaymentMethod based upon NameValueCollection.  This would be used by the checkout control to get the paymentMethod
            posted back from the page.
            </summary>
            <param name="postBackData"></param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.MaestroCardPayment.NameOnCard">
            <summary>
            The name of the cardholder, as found on the card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.MaestroCardPayment.CardNumber">
            <summary>
            The account number as printed on the card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.MaestroCardPayment.StartDate">
            <summary>
            The original cards issue date, as printed on the card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.MaestroCardPayment.ExpirationDate">
            <summary>
            The expiration date, as printed on the card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.MaestroCardPayment.IssueNumber">
            <summary>
            The issue number, as printed on the card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.MaestroCardPayment.CardSecurityNumber">
            <summary>
            The security number, as printed on the card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.MaestroCardPayment.BankName">
            <summary>
            Bank or Institution that issued the credit card.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.PayPalPayment">
            <summary>
            Data class representing a PayPal payment.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.PayPalPayment.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="number">number for this credit card</param>
            <param name="expirationDate">Expiration date for this credit card</param>
            <param name="ccid">CCID for this credit card</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.PayPalPayment.GetPayment(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a PaymentMethod based upon NameValueCollection.  This would be used by the checkout control to get the paymentMethod
            posted back form the page.
            </summary>
            <param name="postBackData"></param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.PayPalPayment.Token">
            <summary>
            Gets or sets the Token for this payment.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PayPalPayment.PayerId">
            <summary>
            Gets or sets the payerId for this payment.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.CreditCardPayment">
            <summary>
            Data class representing a credit card payment.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.CreditCardPayment.#ctor(System.String,Ektron.Cms.Commerce.CCExpirationDate,System.String)">
            <summary>
            
            </summary>
            <param name="number">number for this credit card</param>
            <param name="expirationDate">Expiration date for this credit card</param>
            <param name="ccid">CCID for this credit card</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.CreditCardPayment.GetPayment(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a PaymentMethod based upon NameValueCollection.  This would be used by the checkout control to get the paymentMethod
            posted back form the page.
            </summary>
            <param name="postBackData"></param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.CreditCardPayment.ExpirationDate">
            <summary>
            Gets or sets the Expiration date for this credit card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CreditCardPayment.Number">
            <summary>
            Gets or sets the number for this credit card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CreditCardPayment.CCID">
            <summary>
            Gets or sets the CCID for this credit card.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.CCExpirationDate">
            <summary>
            Data class used for representing a Credit Card Expiration Date.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.CCExpirationDate.#ctor(Ektron.Cms.Common.EkEnumeration.CCExpirationMonth,System.Int32)">
            <summary>
            
            </summary>
            <param name="month">the month of the credit card expiration date.</param>
            <param name="year">the year of the credit card expiration.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.CCExpirationDate.To4DigitFormat">
            <summary>
            Returns the credit card expiration date in a 4 digit format (MMyy).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.CCExpirationDate.To6DigitFormat">
            <summary>
            Returns the credit card expiration date in a 6 digit format (MMyyyy).
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.CCExpirationDate.IsExpired">
            <summary>
            Returns true if the Expiration date has been reached.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.CCExpirationDate.Month">
            <summary>
            Gets or sets the month of the credit card expiration date.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CCExpirationDate.Year">
            <summary>
            Gets or sets the year of the credit card expiration.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.CheckPayment.GetPayment(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a PaymentMethod based upon NameValueCollection.  This would be used by the checkout control to get the paymentMethod
            posted back form the page.
            </summary>
            <param name="postBackData"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.CalendarFunctions.GetRecurrenceDayOfWeek(System.DateTime)">
            <summary>
            Gets the recurrenceDayOfWeek for the supplied datetime. If the day is the last occurrance for the month, 
            then RecurrenceDayOfWeek.Last is returned.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.IWebEventManager.GetCalendarICalendarString(System.Int64)">
            <summary>
            gets the feed for the entire calendar, properly wrapped with ical standards.
            </summary>
            <param name="calendarid"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.IWebEventManager.GetEventICalendarString(System.Int64)">
            <summary>
            returns the event details in icalendar format, without the surrounding vcalendar information.
            if the specified event is a variance, returns details for the parent event with all variances.
            </summary>
            <param name="eventid"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.IWebEventManager.GetEventICalendarString(System.Int64,System.Boolean)">
            <summary>
            returns the event details, with optional wrapping of vcalendar information required by the ical format. 
            if the specified event is a variance, returns details for the parent event with all variances.
            </summary>
            <param name="eventid"></param>
            <param name="wrap"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.IWebEventManager.GetEventICalendarString(Ektron.Cms.Common.Calendar.WebEventData)">
            <summary>
            returns the event details in icalendar format, without the surrounding vcalendar information.
            </summary>
            <param name="eventid"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.IWebEventManager.GetEventICalendarString(Ektron.Cms.Common.Calendar.WebEventData,System.Boolean)">
            <summary>
            returns the event details, with optional wrapping of vcalendar information required by the ical format.
            </summary>
            <param name="eventid"></param>
            <param name="wrap"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.IWebEventManager.GetEventICalendarString(Ektron.Cms.Common.Calendar.WebEventData,System.Collections.Generic.List{Ektron.Cms.Common.Calendar.WebEventData})">
            <summary>
            returns the icalendar string with any variances specified by the second parameter. this will not wrap the resulting string with required icalendar fields.
            </summary>
            <param name="eventData"></param>
            <param name="variances"></param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Common.Calendar.TimeZoneInfo">
             <summary>
             Utility class for dealing with DateTime values and multiple time zones.
             </summary>
             <remarks>
             This code is based off of sample code provided by microsoft.  Details can be found in this MSDN blog entry: http://blogs.msdn.com/bclteam/archive/2006/04/03/567119.aspx.
             Code download: http://download.microsoft.com/download/4/5/5/4555538c-6002-4f04-8c58-2b304af92402/converttimezone.exe
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.TimeZoneInfo.GetSystemTimeZoneList">
            <summary>
            Returns a list of the timezones registered on the system.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.FolderData.Id">
            <summary> 
            Gets or sets the ID of the Folder for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The folder's long ID.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.TemplateId">
            <summary> 
            Gets or sets the folder template's ID for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The folder template's long ID.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.ParentId">
            <summary> 
            Gets or sets the folder's parent folder ID for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The folder's parent folder long ID.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.NameWithPath">
            <summary> 
            Gets or sets the folder's name with its path. This path is the tree structure 
            in the Workarea, not a folders file system path. For example: <para></para> 
            If you want the <b>Medication Management</b> folder in the Ektron Medical demo site Workarea, 
            it would appear as <c>\\~YourSite~\\Products\\Medication Management</c> 
            </summary> 
            <value></value> 
            <returns>The folder's name with its path. For example, <c>\\~YourSite~\\Products\\Medication Management</c></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.Name">
            <summary> 
            Gets or sets the folder's name for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The folder's name</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.Description">
            <summary> 
            Gets or sets a folder's description information for the FolderData object. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The folder's description.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.Inherited">
            <summary> 
            Gets or sets whether the folder's permission are inherited from the the parent folder. This is for the FolderData object. <para></para> 
            <b>True</b> = inherit the parent folder's permissions.<para></para> 
            <b>False</b> = do not inherit the parent folder's permissions. 
            </summary> 
            <value></value> 
            <returns>Returns true if the folder is inheriting from its parent. Otherwise, returns false.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.InheritedFrom">
            <summary> 
            Gets or sets the ID of the parent folder from which the folder is inheriting. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The long ID of the parent folder.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.PrivateContent">
            <summary> 
            Gets or sets whether the content in a folder is private. This is for the FolderData object.<para></para> 
            <b>True</b> = the folder's contents private.<para></para> 
            <b>False</b> = the folder's contents are public. 
            </summary> 
            <value></value> 
            <returns>Returns true if the folder's contents are private. Otherwise, returns false.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.XmlInherited">
            <summary> 
            Gets or sets whether the folder inherits the XML configuration from the parent folder. This is for the FolderData object.<para></para> 
            <b>True</b> = the folder inherits the XML configuration from the parent folder.<para></para> 
            <b>False</b> = the folder does not inherit the XML configuration from the parent folder. 
            </summary> 
            <value></value> 
            <returns>Returns true if the XML is inherited from the parent folder. Otherwise, returns false.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.XmlInheritedFrom">
            <summary> 
            Gets or sets the parent folder ID from which the XML is inherited. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The parent folder's integer ID.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.XmlConfiguration">
            <summary> 
            Gets or sets the XML configuration for a folder. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>An array of XmlConfigData.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.StyleSheet">
            <summary> 
            Gets or sets a style sheet that defines the styles of the content within the content folder. 
            This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The folder's style sheet.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.TemplateFileName">
            <summary> 
            Gets or sets a template name for the folder. Content in this folder appears on your Web site 
            within the template you choose. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The template name.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.StyleSheetInherited">
            <summary> 
            Gets or sets the whether the style sheet is inherited from the parent folder. This is for the FolderData object.<para></para> 
            <b>True</b> = the folder inherits style sheet information from the parent folder.<para></para> 
            <b>False</b> = the folder does not inherit style sheet information from the parent folder. 
            </summary> 
            <value></value> 
            <returns>Returns true if the style sheet information is inherited from the parent folder. Otherwise, returns false.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.TemplateInherited">
            <summary> 
            Gets or sets the whether the template is inherited from the parent folder. This is for the FolderData object.<para></para> 
            <b>True</b> = the folder inherits the template from the parent folder.<para></para> 
            <b>False</b> = the folder does not inherit the template from the parent folder. 
            </summary> 
            <value></value> 
            <returns>Returns true if the style sheet information is inherited from the parent folder. Otherwise, returns false.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.ApprovalMethod">
            <summary> 
            Gets or set whether or not to force all approvers to approve the content that is added to the folder. This is for the FolderData object.<para></para> 
            <b>0</b> = Do Not Force All Approvers - content checked-out during the approval process will continue through the approval chain.<para></para> 
            <b>1</b> = Force All Approvers - content checked-out during the approval process forces the approval chain to reset to the beginning. 
            </summary> 
            <value></value> 
            <returns> 
            Returns 0 (zero) if you are not forcing all approvers. <para></para> 
            Returns 1 (one) if you are forcing all approvers. 
            </returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.ChildFolders">
            <summary> 
            Gets or sets the child folders of a parent folder as an array of FolderData. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>Child folders as an array of FolderData.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.MetaInheritedFrom">
            <summary> 
            Gets or sets the parent folder ID from which to inherit metadata information. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The parent folder's integer ID.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.MetaInherited">
            <summary> 
            Get or set whether the metadata is inherited from the parent folder. This is for the FolderData object.<para></para> 
            <b>True</b> = the folder inherits metadata from the parent folder.<para></para> 
            <b>False</b> = the folder does not inherit metadata from the parent folder. 
            </summary> 
            <value></value> 
            <returns>Returns true if metadata is inherited from the parent folder. Otherwise, returns false.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.HasChildren">
            <summary> 
            Gets or sets whether the folder has child folders. This is for the FolderData object.<para></para> 
            <b>True</b> = the folder has child folders.<para></para> 
            <b>False</b> = the folder does not child folders. 
            </summary> 
            <value></value> 
            <returns>Returns true if folder has child folders. Otherwise, returns false.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.PublishPdfEnabled">
            <summary> 
            Get or set whether the folder allows assets to be published in another format. 
            For example, as PDF or HTML. This is for the FolderData object.<para></para> 
            <b>True</b> = assets in the folder can be published in another format.<para></para> 
            <b>False</b> = assets are not published in another format. 
            </summary> 
            <value></value> 
            <returns>Returns true if assets in the folder can be published in another format. Otherwise, returns false.</returns> 
            <remarks> 
            If set to true, either the PublishPdfActive property or the PublishHtmlActive property 
            must be set to true. 
            </remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.PublishPdfActive">
            <summary> 
            Get or set whether assets in the folder are published as a PDF. This is for the FolderData object.<para></para> 
            <b>True</b> = assets in the folder are published as a PDF.<para></para> 
            <b>False</b> = assets are not published as a PDF. 
            </summary> 
            <value></value> 
            <returns>Returns true if assets in the folder are published as a PDF. Otherwise, returns false.</returns> 
            <remarks>The PublishPdfEnable property must be set to true.</remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.PublishHtmlActive">
            <summary> 
            Get or set whether assets in the folder are published as HTML. This is for the FolderData object.<para></para> 
            <b>True</b> = assets in the folder are published as HTML.<para></para> 
            <b>False</b> = assets are not published as HTML. 
            </summary> 
            <value></value> 
            <returns>Returns true if assets in the folder are published as HTML. Otherwise, returns false.</returns> 
            <remarks>The PublishPdfEnable property must be set to true.</remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.Permissions">
            <summary> 
            Gets or sets a list of folder permissions for the logged in user. This is for the FolderData object. If you 
            use Ektron.Cms.API to access this information, there is an internal Admin user and all permissions are returned. 
            As an alternative, use Ektron.Cms.ContentAPI. 
            </summary> 
            <value></value> 
            <returns>A list of folder permissions for the logged in user.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.UpdatedContent">
            <summary> 
            Gets or sets the total number of content items that have been updated. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The total number of content items that have been updated.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.TotalContent">
            <summary> 
            Gets or sets the total number of content items in the folder. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The total number of content items in the folder.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.IsDomainFolder">
            <summary> 
            Gets or sets whether or not the folder is a domain folder. This is for the FolderData object.<para></para> 
            <b>True</b> = folder is a domain folder.<para></para> 
            <b>False</b> = folder is not a domain folder. 
            </summary> 
            <value></value> 
            <returns>Returns true if the folder is a domain folder. Otherwise, returns false.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.DomainStaging">
            <summary> 
            Gets or sets the domain of the staging server when using the site replication feature. For example:<para></para> 
            <c>staging.yourektroncmssite.com</c><para></para> 
            This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The staging server domain.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.DomainProduction">
            <summary> 
            Gets or sets the domain of the production server when using the site replication feature. For example:<para></para> 
            <c>www.yourektroncmssite.com</c><para></para> 
            This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The production server domain.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.FolderType">
            <summary> 
            Gets or sets the type of folder in the Workarea. The <c>FolderType</c> property can be used to verify if a given folder accepts the type of content being submitted. 
            This is for the FolderData object. <para></para> 
            Available Types:<para></para> 
            * <b>0</b> = Content - a content folder that contains assets, documents and HTML content. 
            * <b>1</b> = Blog - designates the folder for use with the Blogging feature. 
            * <b>2</b> = Domain - designates the folder as a domain folder when using the Multi-site feature. 
            * <b>3</b> = Discussion Board - designates the folder for use as a Threaded Discussion folder. 
            * <b>4</b> = Discussion Forum - a subfolder of the Threaded Discussion folder. 
            * <b>5</b> = Root - Specifies a folder as root folder. This option is not available. 
            * <b>6</b> = Community - Membership users can add and edit content contained in these folders. 
            </summary> 
            <value></value> 
            <returns>An integer value that equals a type of folder. Folder types are listed above.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.SitemapInherited">
            <summary> 
            Gets or sets whether or not the Sitemap information for this folder is inherited. This is for the FolderData object. 
            * <b>0</b> (Zero) = False 
            * <b>1</b> = True 
            </summary> 
            <value></value> 
            <returns> 
            Returns an integer representing whether the Sitemap is inherited. 
            * <b>0</b> (Zero) = False 
            * <b>1</b> = True 
            </returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.SitemapInheritedFrom">
            <summary> 
            Gets or sets the integer ID of the folder from which the Sitemap information is inherited. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The integer ID of the folder from which the Sitemap information is inherited.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.SitemapPath">
            <summary> 
            Gets or sets the SitemapPath as an array of Common.SitemapPath. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>An array of Common.SitemapPath.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.ReplicationMethod">
            <summary> 
            Gets or sets whether or not the content in the folder is replicated via quick deploy. The default is 0 (zero). 
            This is for the FolderData object. 
            * <b>0</b> = do not replicate content. This is the default.<para></para> 
            * <b>1</b> = replicate content via the Quick Deploy feature. 
            </summary> 
            <value></value> 
            <returns> 
            An integer representing whether content in the folder is replicated via quick deploy. 
            * <b>0</b> = do not replicate content. This is the default. <para></para> 
            * <b>1</b> = replicate content via the Quick Deploy feature. 
            </returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.IsCommunityFolder">
            <summary> 
            Marks a folder as being a community folder. A community folder allows the editing of content by membership users. This is for the FolderData object. <para></para> 
            <b>True</b> = folder is a community folder.<para></para> 
            <b>False</b> = folder is not community folder. 
            </summary> 
            <value></value> 
            <returns>Returns true if the folder is a community folder. Otherwise, returns false.</returns> 
        </member>
        <member name="P:Ektron.Cms.FolderData.TaxonomyInheritedFrom">
            <summary> 
            Gets or sets the ID of the parent folder from which the taxonomy is inherited. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The integer ID of the parent folder.</returns> 
            <remarks>The TaxonomyInherited property must be set to True, otherwise it will be ignored.</remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.TaxonomyInherited">
            <summary> 
            Gets or sets whether taxonomy is inherited from the parent folder. This is for the FolderData object.<para></para> 
            <b>True</b> = taxonomy is inherited from the parent folder.<para></para> 
            <b>False</b> = taxonomy is not inherited from the parent folder. 
            </summary> 
            <value></value> 
            <returns>Returns true if taxonomy is inherited from the parent folder.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.FlagInheritedFrom">
            <summary> 
            Gets or sets the ID of the parent folder from which the flag is inherited. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>The integer ID of the parent folder.</returns> 
            <remarks>The flagInherited property must be set to True, otherwise it will be ignored.</remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.FlagInherited">
            <summary> 
            Gets or sets whether flag is inherited from the parent folder. This is for the FolderData object.<para></para> 
            <b>True</b> = flag is inherited from the parent folder.<para></para> 
            <b>False</b> = flag is not inherited from the parent folder. 
            </summary> 
            <value></value> 
            <returns>Returns true if falg is inherited from the parent folder.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.CategoryRequired">
            <summary> 
            Gets or sets whether at least one taxonomy category selection is required when creating or editing content. This is for the FolderData object.<para></para> 
            <b>True</b> = one taxonomy category is required when creating or editing content.<para></para> 
            <b>False</b> = a taxonomy category is not required when creating or editing content. 
            </summary> 
            <value></value> 
            <returns>Returns true if a taxonomy category is required when creating of publishing content.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.FolderTaxonomy">
            <summary> 
            Gets or sets the taxonomy for a folder as an array of TaxonomyBaseData. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>An array of TaxononmyBaseData.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.FolderData.FolderFlags">
            <summary> 
            Gets or sets the flag for a folder as an array of FlagDefData. This is for the FolderData object. 
            </summary> 
            <value></value> 
            <returns>An array of FlagDefData.</returns> 
            <remarks></remarks> 
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.WebCalendarData.IsValid(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates the Calendar object and returns a list of errors.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.ContentData">
            <summary>
            A data object that contains the properties that make up a content item.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentBaseData.Id">
            <summary>
            Gets or sets the ID of the content item for the ContentData object.
            </summary>
            <value></value>
            <returns>A numeric ID of the content item. (Long)</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentBaseData.LanguageId">
            <summary>
            Get or sets the language ID of the content item for the ContentData object.
            </summary>
            <value></value>
            <returns>Language ID as an integer. For example, 1033 (English).</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentBaseData.Title">
            <summary>
            Gets or sets the content item's title for the ContentData object.
            </summary>
            <value></value>
            <returns>Title of the content item.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentBaseData.Teaser">
            <summary>
            Gets or sets a content's summary information for the ContentData object.
            </summary>
            <value></value>
            <returns>Summary information for the content.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentBaseData.Html">
            <summary>
            Gets or sets the content item's HTML for the ContentData object.
            </summary>
            <value></value>
            <returns>A string value that represents the HTML that makes up a content item.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentBaseData.Quicklink">
            <summary>
            Gets or sets the content item's Quicklink in the CMS400.NET for the ContentData object.
            </summary>
            <value></value>
            <returns>A content item's Quicklink information.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentBaseData.Image">
            <summary>
            Gets or sets the path to an image in the library that you want to associate with 
            the content for the ContentData object.
            </summary>
            <value></value>
            <returns>Path to the image in the library.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentBaseData.ImageThumbnail">
            <summary>
            Gets or sets the path to a thumbnail image in the library that you want to associate with
            the content for the ContentData object.
            </summary>
            <value></value>
            <returns>Path to the thumbnail image in the library.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentBaseData.IsPrivate">
            <summary>
            Gets or sets whether a content item is private and not viewable on the public Web site. Set to True
            to make a content item private for the ContentData object. 
            </summary>
            <value></value>
            <returns>Returns true if the content item is set to private.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentBaseData.SubType">
            <summary>
            Gets or sets the content subtype.
            </summary>
            <value></value>
            <returns>Returns the subtype of the content.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentBaseData.AssetData">
            <summary>
            Gets or sets a content item's asset data information when the content item is a managed 
            file, Office Document, Multimedia file or Open Office document. This is for the ContentData object.
            </summary>
            <value></value>
            <returns>Returns content item's asset data information as Ektron.Cms.Common.AssetData.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.Permissions">
            <summary>
            Gets or sets permission data for the ContentData object.  
            </summary>
            <value></value>
            <returns>Permissions as a PermissionData object.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.EditorFirstName">
            <summary>
            Gets or sets the content editor's first name for the ContentData object.
            </summary>
            <value></value>
            <returns>The editor's first name as a string.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.EditorLastName">
            <summary>
            Gets or sets the content editor's last name for the ContentData object.
            </summary>
            <value></value>
            <returns>The editor's last name as a string.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.Comment">
            <summary>
            Gets or sets comment information associated with a content item for the ContentData object.
            </summary>
            <value></value>
            <returns>Comment information associated with a content item.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.LastEditDate">
            <summary>
            Gets or sets the content's last edit date for the ContentData object.
            </summary>
            <value></value>
            <returns>Content's last edit date as a string.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.DisplayLastEditDate">
            <summary>
            Gets or sets the content's last edit date formatted for display for the ContentData 
            object. For example, <c>June 11, 2007</c>.
            </summary>
            <value></value>
            <returns>Content's last edit date formatted for display.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.DateCreated">
            <summary>
            Gets or sets the creation date of a content item for the ContentData object.
            </summary>
            <value></value>
            <returns>The creation date of a content item as DateTime.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.DisplayDateCreated">
            <summary>
            Gets or sets the creation date of a content item formatted for display for the 
            ContentData object. For example, <c>June 11, 2007</c>.
            </summary>
            <value></value>
            <returns>Creation date of a content item formatted for display.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.UserId">
            <summary>
            Gets or sets the ID of the user for the ContentData object.
            </summary>
            <value></value>
            <returns>User ID as a Long.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.UserName">
            <summary>
            Important: This property is obsolete. To retrieve the user name, call EkUser GetActiveUserbyID with the correct User ID.<para></para>
            Gets or sets the content's username for the ContentData object.
            </summary>
            <value></value>
            <returns>The content's username.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.FolderId">
            <summary>
            Gets or Sets the content item's folder ID for the ContentData object.  
            </summary>
            <value></value>
            <returns>Folder ID as an Long.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.IsInherited">
            <summary>
            Gets or sets whether the content item inherits permissions from the folder settings for the ContentData object.
            </summary>
            <value></value>
            <returns>A boolean that returns true when the content item inherits permissions from the folder settings.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.InheritedFrom">
            <summary>
            Gets or sets the folder ID from which to inherit permissions for the ContentData object.
            </summary>
            <value></value>
            <returns>An numeric ID representing the folder from which permissions are inherited.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.Status">
            <summary>
            Gets or sets the letter value representing the status of a content item for the ContentData object.
              * <b>A</b> = Approved
              * <b>O</b> = Checked Out
              * <b>I</b> = Checked In
              * <b>S</b> = Submitted for Approval
              * <b>M</b> = Marked for Deletion
              * <b>P</b> = Pending Go Live Date
              * <b>T</b> = Awaiting Completion of Associated Tasks
              * <b>D</b> = Pending Deletion
            </summary>
            <value></value>
            <returns>A letter value representing the status of a content item.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.GoLive">
            <summary>
            Gets or sets the start date a content item goes live on the site. This is for the ContentData object.
            </summary>
            <value></value>
            <returns>A string value that represents the date a content item goes live.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.DisplayGoLive">
            <summary>
            Gets or sets the start date a content item goes live on the site formatted for 
            display. This is for the ContentData object. For example, <c>June 11, 2007</c>.
            </summary>
            <value></value>
            <returns>Start date a content item goes live on the site formatted for display.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.ManualAliasId">
            <summary>
            Gets or sets the ID of the of a manual alias for the ContentData object.
            </summary>
            <value></value>
            <returns>A numeric value (Long) representing a manual alias ID.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.ManualAlias">
            <summary>
            Gets or sets the manual alias by its name for the ContentData object. For example, <c>/~YourSite~/text.aspx</c>.
            </summary>
            <value></value>
            <returns>A string value representing the name of a manual alias.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.ApprovalMethod">
            <summary>
            Gets or sets the approval method of a content item for the ContentData object. Choices are:
              * <b>1</b> = Force All Approvers - content checked-out during the approval process will force the approval chain to reset to the beginning.
              * <b>0</b> = Do Not Force All Approvers - content checked-out during the approval process will continue through the approval chain.
            </summary>
            <value></value>
            <returns>An integer value representing the type of approval method.</returns>
            <remarks>
            If the content is inheriting the approval method from the folder, the IsInherited property must be false 
            to change this property.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.IsPublished">
            <summary>
            Gets or sets whether the content is published before for the ContentData object.
            </summary>
            <value></value>
            <returns>Returns a boolean based on whether the content is published before. 
            True = Published</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.IsSearchable">
            <summary>
            Gets or sets whether the content is searchable for the ContentData object. True = the content searchable.
            </summary>
            <value></value>
            <returns>A boolean based on whether the content is searchable.
              * <b>True</b> = content is searchable.
              * <b>False</b> = content is not searchable.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.IsXmlInherited">
            <summary>
            Gets or sets whether the XML Smart Form configuration is inherited from the folder. True = XML Smart Form configuration is 
            inherited from the folder. This is for the ContentData object.
            </summary>
            <value></value>
            <returns>A boolean based on whether the XML Smart Form configuration is inherited from the folder.
              * <b>True</b> = content XML Smart Form configuration is inherited from the folder.
              * <b>False</b> = content XML Smart Form configuration is not inherited from the folder.
            </returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.XmlInheritedFrom">
            <summary>
            Gets or sets the ID of the folder from which the XML Smart Form configuration is inherited. This 
            is for the ContentData object.
            </summary>
            <value></value>
            <returns>A numeric ID (Long) of the folder from which the XML Smart Form configuration is inherited.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.MetaData">
            <summary>
            Gets or sets the Metadata of a content item as an array of ContentMetadata. This is for the 
            ContentData object.
            </summary>
            <value></value>
            <returns>Metadata as an array of ContentMetaData.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.DisplayEndDate">
            <summary>
            Gets or sets the end date of a content item formatted for display. This is for 
            the ContentData object. For example, <c>June 11, 2007</c>.
            </summary>
            <value></value>
            <returns>End date of a content item formatted for display.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.EndDate">
            <summary>
            Gets or sets the end date of a content item. This is for the ContentData object.
            </summary>
            <value></value>
            <returns>A string value that represents the end date of a content item.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.EndDateAction">
            <summary>
            Gets or sets the action to perform on a content item once the End Date has been reached. 
            This is for the ContentData object. Choices are:
              * <b>1</b> = Archive and remove from site (expire)
              * <b>2</b> = Archive and remain on site
              * <b>3</b> = Add to the CMS Refresh Report
            </summary>
            <value></value>
            <returns>An integer value representing one of the above end date action choices.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.XmlConfiguration">
            <summary>
            Gets or sets the content item's XML configuration for the ContentData object.
            </summary>
            <value></value>
            <returns>A content item's XML configuration as XmlConfigData.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.StyleSheet">
            <summary>
            Gets or sets the style sheet to use with a content item for the ContentData object.
            </summary>
            <value></value>
            <returns>A string value representing the style sheet to use with a content item.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.Approver">
            <summary>
            Gets or sets the approvers of a content item for the ContentData object.
            </summary>
            <value></value>
            <returns>A string value representing the approver(s) of a content item.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.Path">
            <summary>
            Gets or sets the CMS400.NET path to content item for the ContentData object.
            </summary>
            <value></value>
            <returns>A string value representing the CMS400.NET path to the content item.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.ContType">
            <summary>
            Gets or sets the content type as an integer for the ContentData object. Choices are:
              * <b>-1</b> = AllTypes
              * <b>1</b> = Content
              * <b>2</b> = Forms
              * <b>3</b> = Archive_Content
              * <b>4</b> = Archive_Forms
              * <b>7</b> = LibraryItem
              * <b>8</b> = Assets
              * <b>9</b> = Archive_Assets
              * <b>12</b> = Archive_Media
              * <b>99</b> = NonLibraryContent
              * <b>104</b> = Multimedia
              * <b>106</b> = ImageContent
              * <b>1111</b> = DiscussionTopic
              * <b>3333</b> = CatalogEntry
            </summary>
            <value></value>
            <returns>An integer representing the content type.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.EditorUserNames">
            <summary>
            Gets or sets the username of the last editor of the content item for the ContentData object.
            </summary>
            <value></value>
            <returns>Username of the last editor of the content item.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.FolderName">
            <summary>
            Gets or sets the content item's folder name for the ContentData object.
            </summary>
            <value></value>
            <returns>The content item's folder name.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.HistoryId">
            <summary>
            Gets or sets the content item's history ID for the ContentData object. 
            </summary>
            <value></value>
            <returns>The numeric ID (Long) of the content item's history.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.HyperLink">
            <summary>
            Gets or sets the content item's Hyperlink in the CMS400.NET for the ContentData object.
            </summary>
            <value></value>
            <returns>A content item's Hyperlink information.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.ContentData.TemplateConfiguration">
            <summary>
            Gets or sets the content item's template configuration for the ContentData object.
            </summary>
            <value></value>
            <returns>A content item's template configuration as TemplateData.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.WebEventData.CreateVariance(System.DateTime)">
            <summary>
            Creates a variance event for the current recurring event.
            </summary>
            <param name="occurrenceStartUtc">The event occurance date for which to create a variance.</param>
            <returns>An unsaved WebEvent representing the event variance/</returns>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.WebEventData.CreateVariance(System.DateTime,System.DateTime)">
            <summary>
            Creates a variance event for the current recurring event.
            </summary>
            <param name="occurrenceStartUtc">The event occurance date for which to create a variance.</param>
            <param name="newStartUtc">The new occureance start date (UTC).</param>
            <returns>An unsaved WebEvent representing the event variance/</returns>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.WebEventData.GetOriginalTimeZoneEventStart">
            <summary>
            Returns the recurring EventStart in the originating timezone.  This time should remain consistent for all occurrences.  This method is only applicable
            to reccurring events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.WebEventData.GetEventStartUtcForOccurrence(System.DateTime)">
            <summary>
            Returns the EventStartUtc for a specific event occurrence.   This method is only applicable
            to reccurring events.
            </summary>
            <param name="occurrenceDate"></param>
            <returns></returns>
            <remarks>
            The EventStartUtc time is based upon the EventStart for originating timezone and may fluctuate.  The
            local EventStart for the originating timezone will always remain consistent.  For example, an 8:00 AM ET is consistent in both standard and 
            daylight time and therefore, the UTC value may change based upon the occurrence date.
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.WebEventData.GetEventStartUtcForOccurrence(Ektron.Cms.Common.Calendar.WebEventData,System.DateTime)">
            <summary>
            Returns the EventStartUtc for event occurrence on the supplied date.   This method is only applicable
            to reccurring events.
            </summary>
            <param name="occurrenceDate"></param>
            <returns></returns>
            <remarks>
            The EventStartUtc time is based upon the EventStart for originating timezone and may fluctuate.  The
            local EventStart for the originating timezone will always remain consistent.  For example, an 8:00 AM ET is consistent in both standard and 
            daylight time and therefore, the UTC value may change based upon the occurrence date.
            
            Exposing this statically so the logic can be used by Recurrencemanagers without creating instance of WebEvent as they only require WebEventData classes.
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.WebEventData.Validate">
            <summary>
            Validates the event object and returns a list of errors.
            </summary>
            <returns>List of errors.</returns>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.WebEventData.GetOriginalTimeZoneEventStart(Ektron.Cms.Common.Calendar.WebEventData)">
            <summary>
            Returns the recurring EventStart in the originating timezone.  This time should remain consistent for all occurrences.  This method is only applicable
            to reccurring events.
            </summary>
            <returns></returns>
            <remarks>Exposing this statically so the logic can be used by Recurrencemanagers without creating instance of WebEvent as they only require WebEventData classes.</remarks>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.WebEventData.Clone">
            <summary>
            Returns  aclone of the current WebEventData object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.Calendar.WebEventData.CopyEventData(Ektron.Cms.Common.Calendar.WebEventData,Ektron.Cms.Common.Calendar.WebEventData)">
            <summary>
            Copies EventData from one instance to another.
            </summary>
            <param name="sourceEvent">Source event to copy data from.</param>
            <param name="destinationEvent">Destination event to copy data to.</param>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.OriginalTimeZone">
            <summary>
            gets or sets the original timezone for this event
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.CurrentTimeZone">
            <summary>
            Gets or sets the current timezone for the event.  
            </summary>
            <remarks>
            Setting the timezone will alter the value of the EventStart property based upon the new timezone's UTC Bias.  
            The underlying UTC value of this event's eventstart property will not change.  
            However, any new values appplied to eventstart will use the new TimeZone when setting the underlying EventStartUtc value.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.DisplayTitle">
            <summary>
            Gets or sets the Display Title of Event.  This could be different than the base Content.Title if this is  avariant of a recurring event.
            In thatcase the Contnet.Title may be "Event Name (2)" and the DisplayTitle would still be "Event Name".
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.Description">
            <summary>
            Gets or sets the description of the event.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.Location">
            <summary>
            Gets or sets the location of the event.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.EventStartUtc">
            <summary>
            Gets or sets the the Event Start time of the event in UTC time.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.EventStart">
            <summary>
            Gets and sets the event's start time based upon the current timezone.
            </summary>
            <remarks>
            Setting this value will alter EventStartUTC based upon the current timezone's UTC bias.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.EventEndUtc">
            <summary>
            Gets or sets the the Event End time of the event in UTC time.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.EventEnd">
            <summary>
            Gets and sets the event's end time based upon the current timezone.
            </summary>
            <remarks>
            Setting this value will alter EventEndUTC based upon the current timezone's UTC bias.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.UtcOffset">
            <summary>
            Gets the UtcOffset of the current timezone.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.Duration">
            <summary>
            Gets or sets the current duration of the event.  Changing this will affect the EventEnd time.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.Recurrence">
            <summary>
            Gets or sets the current recurrence pattern for the event.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.IsAllDay">
            <summary>
            Gets or sets the IsAllDay flag of the event.  A true value means the event is  an all day event with no actual start\end.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.IsVariance">
            <summary>
            Gets or sets the IsVariance flag for the event.  A true value means this event is a variance of an occurrence of a recurring event.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.IsCancelled">
            <summary>
            Gets or sets the IsVariance flag for the event.  A true value means that this event is a cancelled occurrence of  a recurring event.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.OriginalStartUtc">
            <summary>
            Gets or sets the OriginalStartUtc time.  The orginal OriginalStartUtc is the UTC time of the orginal occurence of  a recurring event.  
            </summary>
            <remarks>
            It is used to calculate TimeZone adjusted times of event occurences.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.ParentEventId">
            <summary>
            Gets or sets the recurrenceId of the the Event.  The RecurrenceId is the EventId of the original recurring event.  
            </summary>
            <remarks>
            This value is needed to tie event variances back to the original recurring event.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.Common.Calendar.WebEventData.IsRecurring">
            <summary>
            Gets a boolean value indicationg if the current event is a recurring event.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Common.Calendar.WebEventVarianceDictionary">
            <summary>
            Specialized Dictionary class for organizing event variances.  Key is the recurring event Id.
            Value is  collection of WebEvents that are variances associated with the original recurring event.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketData.Id">
            <summary>
            Gets or sets the Id of the Basket.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketData.ShopperId">
            <summary>
            Gets or sets the Shopper\visitor Id using the basket.  This Id is used when customer is not logged in.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketData.UserId">
            <summary>
            Gets or sets the Id of the user asscoiated with the basket.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketData.Name">
            <summary>
            Gets or sets the name of the basket.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketData.IsDefault">
            <summary>
            Gets or sets value indicating whether or not this basket is the default basket for customers.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketData.Items">
            <summary>
            Gets the collection items in the basket.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketData.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketData.DateModified">
            <summary>
            Gets or sets the date modified.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketData.Subtotal">
            <summary>
            Gets the basket subtotal.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketData.ShippingAddressId">
            <summary>
            Gets or sets the Id of the address this basket will be shipping to.  This is used for calculating taxes, shipping, etc.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketData.ShippingMethodId">
            <summary>
            Gets or sets the id of the shipping method to be used for the basket.  This is used for calculating shipping costs.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.Basket.AddProduct(System.Int64,System.Int32)">
            <summary>
            Adds product to cart.
            </summary>
            <param name="productId">Id of product to add to basket.</param>
            <param name="quantity">quantity of product to add to cart.</param>
            <returns>returns basket item Id.</returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryStatusData.Status">
            <summary>
            The status of the entry information.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryStatusData.StatusLanguage">
            <summary>
            The language that the entry is checked out to, if any.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.SubscriptionProductData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.EntryData">
            <summary>
            Base class for catalog entry data classes.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.Id">
            <summary> 
            Gets or sets the ID of the EntryData object. 
            </summary> 
            <value></value> 
            <returns>ID of the entry title.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.FolderId">
            <summary> 
            Gets or sets the folder ID of the EntryData object. 
            </summary> 
            <value></value> 
            <returns>ID of the entry folder.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.Status">
            <summary>
            The status of the entry information.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.StatusLanguage">
            <summary>
            The language that the entry is checked out to, if any.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.ContentStatus">
            <summary>
            The status of the content information.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.LanguageId">
            <summary> 
            Gets or sets the language of the EntryData object. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.Title">
            <summary> 
            Get or sets the title of the EntryData object. 
            </summary> 
            <value></value> 
            <returns>String of the entry title.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.Html">
            <summary> 
            Get or sets the html/xml of the EntryData object. 
            </summary> 
            <value></value> 
            <returns>String of the entry html.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.Summary">
            <summary> 
            Get or sets the summary of the EntryData object. 
            </summary> 
            <value></value> 
            <returns>String of the entry summary.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.GoLive">
            <summary> 
            Get or sets the golive of the EntryData object. 
            </summary> 
            <value></value> 
            <returns>Datetime of the entry golive.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.EndDate">
            <summary> 
            Get or sets the enddate of the EntryData object. 
            </summary> 
            <value></value> 
            <returns>Datetime of the entry enddate.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.IsArchived">
            <summary> 
            Get or sets the Archive flag of the EntryData object. 
            </summary> 
            <value></value> 
            <returns>Boolean.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.IsMarkedForDeletion">
            <summary> 
            Get or sets the MarkForDeletion flag on the EntryData object. 
            </summary> 
            <value></value> 
            <returns>Boolean of the entry flag MarkForDeletion.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.Sku">
            <summary> 
            Get or sets the sku of the EntryData object. 
            </summary> 
            <value></value> 
            <returns>String of the entry sku.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.Url">
            <summary> 
            Get or sets the url of the EntryData object. 
            </summary> 
            <value></value> 
            <returns>String of the entry url.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.IsBuyable">
            <summary> 
            Get or sets whether the entry is buyable. 
            </summary> 
            <value></value> 
            <returns>Boolean of the entry flag Buyable.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.IsTangible">
            <summary> 
            Indicates if this product is  a tangible good.
            </summary> 
            <value></value> 
            <returns>Boolean value indicating if this product is  a tangible good.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.QuantityMultiple">
            <summary> 
            The has these number of items in it. 
            </summary> 
            <value></value> 
            <returns>Integer of the entry quantity multiple.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.EntryType">
            <summary> 
            The type of entry. 
            </summary> 
            <value></value> 
            <returns>Integer of the entry quantity multiple.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.Quicklink">
            <summary>
            Gets or sets the entry's Quicklink.
            </summary>
            <value></value>
            <returns>A content item's Quicklink information.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.NumberSold">
            <summary>
            Gets or sets the Number Sold for this entry.
            </summary>
            <value></value>
            <returns>A content item's Quicklink information.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.VersionId">
            <summary>
            The version Id of the catalog entry.
            0 is the current version.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.Dimensions">
            <summary> 
            Gets or sets the dimensions of the product.  Used for shipping.
            </summary> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.Weight">
            <summary> 
             Gets or sets the weight of the product. Used for shipping.
            </summary> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.Pricing">
            <summary> 
            The entry pricing, including currencies and quantity.
            </summary> 
            <value></value> 
            <returns>PricingData of the catalog entry.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.SalePrice">
            <summary>
            Gets the current Sale price from the Pricing object.
            To set an item's sale price, Use the Pricing property. Create a TierPrice with a quantity of 1.
            Use the PricingData(CurrencyId, SalePrice, ListPrice) constructor.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.ListPrice">
            <summary>
            Gets the current List price from the Pricing object.
            To set an item's price, Use the Pricing property. Create a TierPrice with a quantity of 1.
            Use the PricingData(CurrencyId, SalePrice, ListPrice) constructor.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.CurrencyId">
            <summary>
            Gets or sets the Id of the currency used for the current Sale and List prices.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.DisableInventoryManagement">
            <summary>
            Gets or sets the disable inventory management flag.  If true, this product does not track inventory and 
            no inventory management is performed.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryData.Attributes">
            <summary>
            Gets or sets the attributes of the Catalog Entry.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.Subscriptions.SubscriptionTypeProvider">
            <summary>
            Base Provider for creating SubscriptionTypes in Cms400.Net eCommerce.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.Subscriptions.SubscriptionTypeProvider.ProcessSubscription(System.Int64,System.String,System.String)">
            <summary>
            Processes a new subscription.  This is called when new subscriptions are purchased.
            </summary>
            <param name="orderId">Id of order associated with transaction.</param>
            <param name="recurringTransactionId">id of entire recurring Transaction.</param>
            <param name="transactionId">Id of transaction for this specific payment.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.Subscriptions.SubscriptionTypeProvider.ProcessSubscriptionPayment(System.Int64,System.String,System.String)">
            <summary>
            Processes a subscription Payment.  This is called when a new payment is processed
            for an existing subscription.  If no changes need to be made on a subscription payment, the method does not need to be implemented.
            </summary>
            <param name="orderId">Id of order associated with transaction.</param>
            <param name="recurringTransactionId">id of entire recurring Transaction.</param>
            <param name="transactionId">Id of transaction for this specific payment.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.Subscriptions.SubscriptionTypeProvider.CancelSubscription(System.Int64,System.String)">
            <summary>
            Processes a cancelled subscription.  This is called when a subscription is cancelled for any reason.
            </summary>
            <param name="orderId">Id of order associated with transaction.</param>
            <param name="recurringTransactionId">id of entire recurring Transaction.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.Subscriptions.SubscriptionTypeProvider.ProcessPaymentError(System.Int64,System.String)">
            <summary>
            Process a payment error for a subscription.  This is called when an error occurs for  any payment associated with subscription.
            </summary>
            <param name="orderId">Id of order associated with transaction.</param>
            <param name="recurringTransactionId">id of entire recurring Transaction.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.Subscriptions.SubscriptionTypeProvider.GetItemSubscriptionInfo(System.Int64,System.Int64)">
            <summary>
            Returns an object representing the subscription product's information.
            </summary>
            <param name="entryId">Long value for the entry id.</param>
            <param name="entryLanguage">Long value for the entry language id.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.Subscriptions.SubscriptionTypeProvider.SaveSubscriptionInfo(System.Int64,System.Int64,System.Object,System.Data.IDbTransaction)">
            <summary>
            Persists the subscription information when a product is saved.
            </summary>
            <param name="entryId">Long value for the entry id.</param>
            <param name="entryLanguage">Long value for the entry language id.</param>
            <param name="subscriptionInfo">Object representing the subscription information</param>
            <param name="transaction">transaction to use.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.Subscriptions.SubscriptionTypeProvider.DeleteSubscriptionInfo(System.Int64,System.Int64,System.Data.IDbTransaction)">
            <summary>
            Deletes the subscription information when a product is deleted.
            </summary>
            <param name="entryId">Long value for the entry id.</param>
            <param name="entryLanguage">Long value for the entry language id.</param>
            <param name="transaction">transaction to use.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.Subscriptions.SubscriptionTypeProvider.ValidateSubscriptionInfo(System.Int64,System.Int64,System.Object,System.Data.IDbTransaction)">
            <summary>
            Validates the subscription information for a product. If false, the system will throw an exception when attempting to save.
            </summary>
            <param name="entryId">Long value for the entry id.</param>
            <param name="entryLanguage">Long value for the entry language id.</param>
            <param name="subscriptionInfo">Object representing the subscription information</param>
            <param name="transaction">transaction to use.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.Subscriptions.SubscriptionTypeProvider.IsSubscribed(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns whether the user is already subscribed.
            </summary>
            <param name="entryId">Long value for the entry id.</param>
            <param name="entryLanguage">Long value for the entry language id.</param>
            <param name="userId">Long value for the user id.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.Subscriptions.SubscriptionTypeProvider.CanReSubscribe(System.Int64,System.Int64)">
            <summary>
            Returns whether users can resubscribe to the entry.
            </summary>
            <param name="entryId">Long value for the entry id.</param>
            <param name="entryLanguage">Long value for the entry language id.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.Subscriptions.SubscriptionTypeProvider.RequestInformation">
            <summary>
            Gets requestInformation.  By default, gets current RequestInformation.  Can also be set with overriden RequestInformation
            if needed.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.OrderPaymentProperty">
            <summary>
            Enumeration of order properties used for sorting and filtering OrderData objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.OrderPaymentData">
            <summary>
            Represents an order payment
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.Reporting.OrderReportData">
            <summary>
            Class representing order reporting.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.Reporting.OrderReportData.TotalOrders">
            <summary>
            Total number of orders for this query.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.OrderKitConfigData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Errors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.CannotCreateVarianceFromNonRecurrence">
            <summary>
              Looks up a localized string similar to Cannot create a variance from a non-recurring event..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.CannotCreateVarianceFromVariance">
            <summary>
              Looks up a localized string similar to Cannot create a variance from a variance.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.Country_IdRequired">
            <summary>
              Looks up a localized string similar to A valid non negative value is required for Country Id..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.Country_LongIso3Chars">
            <summary>
              Looks up a localized string similar to The Long Iso Code property must be 3 characters..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.Country_NameRequired">
            <summary>
              Looks up a localized string similar to The Name property is required..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.Country_ShortIso2Chars">
            <summary>
              Looks up a localized string similar to The Short Iso Code property must be 2 characters..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.CountryDelete_AddressesExist">
            <summary>
              Looks up a localized string similar to Addresses exist using this country..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.CountryDelete_RegionExist">
            <summary>
              Looks up a localized string similar to Regions exist using this country..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.Coupon_CodeRequired">
            <summary>
              Looks up a localized string similar to A Coupon code is required for saving..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.Coupon_DiscountRequired">
            <summary>
              Looks up a localized string similar to A Discount greater than 0 is required for  a coupon..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.CurrencyPricing_CurrencyIdRequired">
            <summary>
              Looks up a localized string similar to CurrencyId is required..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.CurrencyPricing_ListPriceRequired">
            <summary>
              Looks up a localized string similar to ListPrice is required..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.CurrencyPricing_SingleTierRequired">
            <summary>
              Looks up a localized string similar to The TierPrice for the quantity of 1 is required for CurrencyPricing..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.EventRecurrence_InvalidDate">
            <summary>
              Looks up a localized string similar to Invalid value supplied for date.  Must be between 1 and 31 or be = -1..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.EventRecurrence_InvalidDayOfMonth">
            <summary>
              Looks up a localized string similar to Invalid value supplied for dayOfMonth.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.EventRecurrence_InvalidMonthOfYear">
            <summary>
              Looks up a localized string similar to monthOfYear must be between 1 and 12..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.EventRecurrence_MultipleLessThanZero">
            <summary>
              Looks up a localized string similar to recurrenceMultiple cannot be less than 0..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.ExchangeRate_BaseCurrencyRequired">
            <summary>
              Looks up a localized string similar to The Base Currency is required for an Exchange rate..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.ExchangeRate_EffectiveDateRequired">
            <summary>
              Looks up a localized string similar to The Effective date is required for an Exchange rate..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.ExchangeRate_ExchangeCurrencyRequired">
            <summary>
              Looks up a localized string similar to The Exchange Currency is required for an Exchange rate..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.ExchangeRate_RateRequired">
            <summary>
              Looks up a localized string similar to The Rate is required for an Exchange rate..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.InvalidOccurrenceStartUtc">
            <summary>
              Looks up a localized string similar to The supplied OccurrenceStartUtc is not a valid start time for this event..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.PasswordHistory_HashRequired">
            <summary>
              Looks up a localized string similar to A password hash is required for saving...
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.PasswordHistory_UserIdRequired">
            <summary>
              Looks up a localized string similar to A user id is required for saving...
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.Region_CodeRequired">
            <summary>
              Looks up a localized string similar to The Region code is required and must be two characters..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.Region_CountryId">
            <summary>
              Looks up a localized string similar to The Region&apos;s Country Id is required..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.Region_NameRequired">
            <summary>
              Looks up a localized string similar to The Region Name is required..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.RegionDelete_AddressesExist">
            <summary>
              Looks up a localized string similar to Addresses exist using this Region.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.TierPricing_PriceCannotBenegative">
            <summary>
              Looks up a localized string similar to The SalePrice cannot be negative..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.TierPricing_QuantityNegative">
            <summary>
              Looks up a localized string similar to The Quantity cannot be negative..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.WebCalendar_InvalidFolderType">
            <summary>
              Looks up a localized string similar to The WebCalendar must have a FolderType of EkEnumeration.FolderType.Calendar..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.WebCalendar_NameRequired">
            <summary>
              Looks up a localized string similar to The WebCalendar requires a name..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.WebEvent_InvalidOccurrenceDate">
            <summary>
              Looks up a localized string similar to The OccurrenceStart supplied is invalid for the event..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.WebEvent_ReccurrenceEndLessThanStart">
            <summary>
              Looks up a localized string similar to The Event Recurrence End date must be greater than the EventStart date..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.WebEvent_RecurringMethodException">
            <summary>
              Looks up a localized string similar to This method is only applicable to recurring events..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.WebEvent_StartGreaterThanEnd">
            <summary>
              Looks up a localized string similar to start date is greater than end date..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Errors.WebEvent_StartLessThanEnd">
            <summary>
              Looks up a localized string similar to The EventEnd date must be greater than the EventStart date..
            </summary>
        </member>
        <member name="T:Ektron.Cms.ThumbnailDefaultProperty">
            <summary>
            Enumeration of ThumbnailDefaultData properties used for sorting and filtering ThumbnailDefaultData objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.AdjustedBasketItem">
            TODO: [derek] Do we need this or should we modify the BasketItem directly?
                  Should probably keep it seperate so that we can extend it as new price adjustments are introduced without bastardizing the Basket class.
             <summary>
             Class used to represent basket item price adjustments.
             </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.BasketItem">
            <summary>
            Data class representing a basket line item.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.BasketItem.#ctor(Ektron.Cms.Commerce.BasketItem)">
            <summary>
            constructor used for cloning Existing BasketItem.
            </summary>
            <param name="basketItem"></param>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.ProductSku">
            <summary>
            Gets or sets the Sku for the product in the basket for this line item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.ProductTitle">
            <summary>
            Gets or sets the Product Title for the product in the basket for this line item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.Quicklink">
            <summary>
            Gets or sets the product's Quicklink.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.Quantity">
            <summary>
            Gets or sets the quantity of the product in the basket for this line item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.SalePrice">
            <summary>
            Sets the base sale price for the line item.  The returned sale price will reflect any adjustments 
            based upon kit options or product variants selected.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.ListPrice">
            <summary>
            Gets or sets the list price for the line item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.AdjustedTotal">
            <summary>
            Gets or sets the Total Adjusted price for the line item.  
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.ProductId">
            <summary>
            Gets or sets the Product Id associated with this this line item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.Id">
            <summary>
            Gets or sets the Id of this line item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.ProductLanguage">
            <summary>
            Gets or sets the language for the product in the basket for this line item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.ProductType">
            <summary>
            Gets or sets the type of the product in the basket for this line item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.Configuration">
            <summary>
            Gets or sets any applicable Kit configuarations for the product in the basket for this line item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.Variant">
            <summary>
            Gets or sets and applicable varioant information for the product in the basket for this line item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.TaxClassId">
            <summary>
            Gets or sets the tax class Id for the product in the basket for this line item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.IsInventoryManagementDisabled">
            <summary>
            Gets or sets the disable inventory management flag.  If true, this cart item does not track inventory and 
            no inventory management is performed.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.IsTangible">
            <summary> 
            Indicates if this product is  a tangible good.
            </summary> 
            <value></value> 
            <returns>Boolean value indicating if this product is  a tangible good.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.Dimensions">
            <summary> 
            Gets or sets the dimensions of the product.  Used for shipping.
            </summary> 
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.Weight">
            <summary> 
             Gets or sets the weight of the product. Used for shipping.
            </summary> 
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketItem.Pricing">
            <summary> 
            The item pricing, including currencies and quantity.
            </summary> 
            <value></value> 
            <returns>PricingData of the basket item.</returns> 
            <remarks></remarks> 
        </member>
        <member name="M:Ektron.Cms.Commerce.AdjustedBasketItem.#ctor(Ektron.Cms.Commerce.BasketItem)">
            <summary>
            Creates a new AdjustedBasketItem based upon base basketitem.
            </summary>
            <param name="basketItem"></param>
        </member>
        <member name="P:Ektron.Cms.Commerce.AdjustedBasketItem.AdjustedTotal">
            <summary>
            Gets or sets the Total Adjusted price for the line item.  
            This could reflect any coupon discounts, surcharges, etc applied to the item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AdjustedBasketItem.ApplicableTaxRate">
            <summary>
            Gets or sets the TaxRate class applicable to this item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AdjustedBasketItem.TaxesApplied">
            <summary>
            Gets or sets the amount of tax applicable to this item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AdjustedBasketItem.AppliedCoupons">
            <summary>
            Gets the list coupons applied to this basket item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AdjustedBasketItem.TotalCouponDiscount">
            <summary>
            Gets or sets the total coupon discount for this basket item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AdjustedBasketItem.HasFreeShipping">
            <summary>
            Gets or sets whether or not this item has a free shipping coupon applied.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.BasketCalculatorData.Initialize">
            <summary>
            Initializes the BasketCalculatorData and resets all calculated values.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.Basket">
            <summary>
            Gets or sets the Basket being calculated by the BasketCalculator.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.BasketCoupons">
            <summary>
            Gets or sets BasketCoupons.  These are all coupons that have been applied to the basket and their cumulative discount.
            If a coupon applies to more than one item, the discount amount for the coupon would be the total amount.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.AllBasketCoupons">
            <summary>
            Gets or sets AllBasketCoupons.  These are all coupons that have been applied to the basket regardless of the effect they have on the basket subtotal.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.AdjustedItems">
            <summary>
            Gets the list of adjusted basket items in the current basket.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.HasFreeShipping">
            <summary>
            Gets or sets whether or not this basket has  afree shipping coupon applied.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.ShipFrom">
            <summary>
            Gets or sets the address from which the order would ship.  This could be used for shipping, tax calculations, etc.
            If it's ommited, the shipping and tax information will not be calculated.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.ShipTo">
            <summary>
            Gets or sets the address that the order is shipping to.  This could be used for shipping, tax calculations, etc.
            If it's ommited, the shipping and tax information will not be calculated.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.TaxClassSubtotals">
            <summary>
            Gets a dictionary representing the tax classes applicable to the basket with the amount of taxes applied to the basket for that tax class.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.ShippingRates">
            <summary>
            Gets a list of shipping rates for the basket.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.TotalTaxes">
            <summary>
            Gets the total amount of taxes calculated for the current basket.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.TotalShippingCost">
            <summary>
            Gets the total amount of shipping costs calculated for the current basket.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.TotalCouponDiscount">
            <summary>
            Gets the total amount of coupons calculated for the current basket
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.BasketTotal">
            <summary>
            Gets the basket total based upon item prices, coupons, taxes, shipping and any other adjustments.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketCalculatorData.ValidationResults">
            <summary>
            Gets any ValidationResults encountered during calculation.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.BasketItemCollection">
            <summary>
            Collection class for BasketItems.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.AppliedCouponData.#ctor(Ektron.Cms.Commerce.CouponData,System.Decimal)">
            <summary>
            
            </summary>
            <param name="coupon">sets the coupon being applied to the basketItem.</param>
            <param name="discount">sets the amount the coupon deducts from the price.</param>
        </member>
        <member name="P:Ektron.Cms.Commerce.AppliedCouponData.Coupon">
            <summary>
            Gets or sets the coupon being applied to the basketItem.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AppliedCouponData.CouponDiscount">
            <summary>
            Gets or sets the amount the coupon deducts from the price.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.KitConfigData">
            <summary>
            Invitation class used for sending friend requests.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.BasketVariantData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketVariantData.Pricing">
            <summary> 
            The variant pricing, including currencies and quantity.
            </summary> 
            <value></value> 
            <returns>PricingData of the variant.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketVariantData.TaxClassId">
            <summary>
            Gets or set the TaxClassId of the Variant.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketVariantData.Dimensions">
            <summary> 
            Gets or sets the dimensions of the product.  Used for shipping.
            </summary> 
        </member>
        <member name="P:Ektron.Cms.Commerce.BasketVariantData.Weight">
            <summary> 
             Gets or sets the weight of the product. Used for shipping.
            </summary> 
        </member>
        <member name="T:Ektron.Cms.Commerce.CatalogData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.BundleData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.EntryProperty">
            <summary>
            Enumeration of EntryData columns available for sorting and filtering.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.EntryGroupProperty">
            <summary>
            Enumeration of EntryGroup properties used for sorting and filtering EntryGroupData objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.EntryGroupData">
            <summary>
            Data class representing Catalog Entry Groups in system.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.EntryGroupData.#ctor(System.Int64,System.String,System.String,System.Int64,Ektron.Cms.Common.EkEnumeration.EntryGroupType)">
            <summary>
            
            </summary>
            <param name="id">id of entry group.</param>
            <param name="groupname">name of entry group.</param>
            <param name="description">description of entry group.</param>
            <param name="entryId">Id of entry owning group</param>
            <param name="grouptype">type of entry group.</param>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryGroupData.Id">
            <summary>
            Gets or sets the Id of Entry Group.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryGroupData.Name">
            <summary>
            Gets or sets the Name of Entry Group.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryGroupData.Description">
            <summary>
            Gets or sets the description of Entry Group.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryGroupData.EntryId">
            <summary>
            Gets or sets the Id of Catalog Entry that owns the Entry Group.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryGroupData.GroupType">
            <summary>
            Gets or sets the type of Entry Group.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.EntryGroupData.DisplayOrder">
            <summary>
            Gets or sets the display order of the entry group.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.EntryGroupItemProperty">
            <summary>
            Enumeration of Entry Group Item properties used for sorting and filtering EntryGroupItemData objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.KitData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.OptionGroupData">
            <summary>
            Data class representing Option groups for Entry Kits.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.OptionGroupData.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="groupName">Name of the option group.</param>
            <param name="description">Description of the OptionGroup</param>
            <param name="image">path to image associated with option group.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.OptionGroupData.#ctor(System.Int64,System.String,System.String,System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="id">Id of option group.</param>
            <param name="groupName">Name of the option group.</param>
            <param name="description">Description of the OptionGroup</param>
            <param name="image">path to image associated with option group.</param>
            <param name="entryId">Id of entry owning this option group.</param>
        </member>
        <member name="P:Ektron.Cms.Commerce.OptionGroupData.Image">
            <summary>
            Gets or sets the path to the image associated with option group.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OptionGroupData.Options">
            <summary>
            gets the list of options in this option groups.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.OptionGroupItemData">
            <summary>
            Data class representing option group items in the CMS.  Option Group Items are option items for a particular Kit Grouping.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.OptionGroupItemData.#ctor(System.String,System.Decimal)">
            <summary>
            
            </summary>
            <param name="optionName">Name of the option.</param>
            <param name="priceModification">Price modifier for this option.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.OptionGroupItemData.#ctor(System.Int64,System.Int64,System.String,System.Decimal)">
            <summary>
            
            </summary>
            <param name="id">Id of option group item.</param>
            <param name="groupId">Id of option group this item belongs to.</param>
            <param name="optionName">Name of the option.</param>
            <param name="priceModification">Price modifier for this option.</param>
        </member>
        <member name="P:Ektron.Cms.Commerce.OptionGroupItemData.Name">
            <summary>
            Gets or sets the name of the option item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OptionGroupItemData.PriceModificationType">
            <summary>
            Gets or sets the proce modification type for this option.  i.e. is the price modification a percentage or fixed amount.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OptionGroupItemData.PriceModification">
            <summary>
            Gets or sets the price modification value for this option.  i.e. this option increases the price $10.00.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OptionGroupItemData.ExtraText">
            <summary>
            Gets or sets any extra test associated with this option item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OptionGroupItemData.CurrencyId">
            <summary>
            Gets or sets the currency Id.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.OptionGroupItemCollection">
            <summary>
            Collection class for OptionGroupItemData.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.ProductData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.ProductVariantData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.ICatalogEntry.AddList(System.Collections.Generic.List{Ektron.Cms.Commerce.EntryData})">
            <summary>
            When Implemented by class, will add and publish new EntryData object.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Ektron.Cms.Commerce.ICatalogEntry.Update(Ektron.Cms.Commerce.EntryData)">
            <summary>
            Whewn implemented, will save a checked out entrydata object.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Ektron.Cms.Commerce.ICatalogEntry.GetAttributeEntryList(Ektron.Cms.Commerce.EntryAttributeCriteria)">
            <summary>
            Retrieves  alist of entrydata objects based upon EntryAttributeCriteria.
            </summary>
            <param name="criteria">EntryAttributeCriteria by which to retrieve entry list.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Commerce.ProductTypeAttributeProperty">
            <summary>
            Enumeration of ProductTypeAttributeData properties available for sorting and filtering.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.EntryAttributeProperty">
            <summary>
            Enumeration of EntryAttributeProperty properties available for sorting and filtering.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.ProductTypeProperty">
            <summary>
            Enumeration of ProductType properties used for sorting and filtering CustomerData objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.ProductTypeData">
            <summary>
            Data class representing ecommerce product types.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ContractData.Id">
            <summary>
            Gets or sets the Id of the contract.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ContractData.Name">
            <summary>
            Gets or sets the contract name.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.CouponProperty">
            <summary>
            Enumeration of Coupon properties used for sorting and filtering CouponData objects.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.CouponData.Validate">
            <summary>
            Validates the CouponData object is valid for saving.
            </summary>
            <returns>Returns a ValidationResult object with any validation errors.</returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.Id">
            <summary>
            Gets or sets the Id of the coupon.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.Code">
            <summary>
            Gets or sets the coupon code.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.CurrencyId">
            <summary>
            Gets or sets the Id of the currency this coupon applies to.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.Description">
            <summary>
            Gets or sets the description of the coupon.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.StartDate">
            <summary>
            Gets or sets the date the coupon becomes valid.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.ExpirationDate">
            <summary>
            Gets or sets the date the coupon expires.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.DiscountType">
            <summary>
            Gets or sets the Coupon Discount Type.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.DiscountValue">
            <summary>
             Gets or sets the value of the discount.  
            For a fixed amount, this would be the amount (i.e. 5.00). 
            For percentage, it would be the discount percent value in whole numbers (i.e. 15% = 15.00).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.MinimumAmount">
            <summary>
             Gets or sets the minimum order amount required before the coupon is applicable.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.MaximumAmount">
            <summary>
            Gets or sets the maximum order amount that this coupon can be applied to.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.CouponType">
            <summary>
            Gets or sets the coupon type.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.OnePerCustomer">
            <summary>
            Gets or sets the OnePerCuster value.  If true, this coupon can only be used once by each customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.MaximumUses">
            <summary>
            Gets or sets the maximim number of times this coupon can be used before it expires.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.IsActive">
            <summary>
            Determines whether or not this coupon is currently active. Deleted coupons remain in the system and are marked inactive.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.IsRedeemable">
            <summary>
            Determines whether or not this coupon is currently redeemable. A coupon may not be reddemable if the it is inactive, not within its valid period, or has been redeemed the maximum number of times.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.IsCombinable">
            <summary>
            Determins whether or not this coupon can be combined with other coupons.  If true, this coupon can be combined with other "Combinable" coupons.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponData.UseCount">
            <summary>
            Returns the count representing the number of orders that this coupon has been applied to.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponEntryData.ObjectId">
            <summary>
            Gets or sets the Id of object the coupon is applied to.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponEntryData.ObjectType">
            <summary>
            Gets or sets the type of object this coupon is applied to.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponEntryData.CouponId">
            <summary>
            Gets or sets the Id of the coupon
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponEntryData.Title">
            <summary>
            Gets or sets the Title of the object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponEntryData.Path">
            <summary>
            Gets or sets the Path of the object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponEntryData.IsIncluded">
            <summary>
            Gets or sets whether or not the Object is included in the coupon.  If true, the object is included in the coupon.
            If false, the coupon is NOT included in the coupon.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CouponEntryData.DataState">
            <summary>
            Gets or sets the current saved state for the CouponEntry.  Used by the Cms internally.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ProductCouponEntryData.EntryType">
            <summary>
            Gets or sets the type of catalog entry.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.ICoupon.SaveCouponApplications(System.Int64,System.Collections.Generic.List{Ektron.Cms.Commerce.CouponEntryData})">
            <summary>
            Saves all the applications (taxonomy, catalog, product) for a given coupon.  Thisis assumed to be an all inclusive lists.  
            Any existing coupon applications that are not included will be deleted.
            </summary>
            <param name="couponId">Id of coupon to update.</param>
            <param name="couponEntryList">List of all CouponEntry applications for the given coupon.</param>
        </member>
        <member name="T:Ektron.Cms.Commerce.AddressProperty">
            <summary>
            Enumeration of Address properties used for sorting and filtering AddressData objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.AddressData">
            <summary>
            Gets or sets information about a specified address. For example, if you were creating an
            address data object for a fictional user, Ivan Tory, at Ektron's address, the code might 
            look like this:
            <code>
            Ektron.Cms.Commerce.AddressData address = new Ektron.Cms.Commerce.AddressData();
            address.Name = "Ivan Tory";
            address.Company = "Ektron, Inc.";
            address.AddressLine1 = "542 Amherst Street (Route 101A)";
            address.City = "Nashua";
            address.Region = new Ektron.Cms.Commerce.RegionData();
            address.Region.Id = 31;   // 31 is the region ID for New Hampshire.
            address.PostalCode = "03063";
            address.Country = new Ektron.Cms.Commerce.CountryData();
            address.Country.Id = 840;   // 840 is the country ID for the United States
            address.Phone = "603-594-0249";
            AddressAPI.Add(address);
            </code>
            To update an existing address's information, use the <c>Id</c> property to specify the address.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AddressData.Id">
            <summary>
            Gets or sets the ID of an address.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AddressData.Name">
            <summary>
            Gets or sets the name associated with the address. For example, if you are entering an address 
            for Ivan Tory, enter the name "Ivan Tory" in this property. This property is required when
            creating an address data object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AddressData.Company">
            <summary>
            Gets or sets the name of the company associated with this address. For example, if the address is 
            for Ektron, enter "Ektron, Inc." in the property.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AddressData.AddressLine1">
            <summary>
            Gets or sets the first line of the address. This property is required when
            creating an address data object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AddressData.AddressLine2">
            <summary>
            Gets or sets line 2 of address.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AddressData.City">
            <summary>
            Gets or sets the city associated with this address. This property is required when
            creating an address data object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AddressData.Region">
            <summary>
            Gets or sets the region associated with this address.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AddressData.PostalCode">
            <summary>
            Gets or sets the postal code associated with this address. This property is required when
            creating an address data object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AddressData.Country">
            <summary>
            Gets or sets the country associated with this address.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AddressData.Phone">
            <summary>
            Gets or sets the phone number associated with this address.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.AddressData.IsValidated">
            <summary>
            Gets or sets whether this address is validated.
            Validation can come from 3rd party services.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.CustomerProperty">
            <summary>
            Enumeration of Customer properties used for sorting and filtering CustomerData objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.CustomerData">
            <summary>
            Data class representing Customers in system.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.Id">
            <summary>
            Gets or sets the Id of the customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.UserId">
            <summary>
            Gets or sets the Id of the Cms User object associated with this customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.UserName">
            <summary>
            Gets or sets the username for the customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.FirstName">
            <summary>
            Gets or sets the first name of the customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.LastName">
            <summary>
            Gets or sets the last of the customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.DisplayName">
            <summary>
            Gets or sets the display name of the customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.IsMembershipUser">
            <summary>
            Gets or sets the IsMembershipUser status of the customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.LanguageId">
            <summary>
            Gets or sets the integer ID of the language for the UserData object.
            </summary>
            <value></value>
            <returns>The integer ID of the language.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.IsDeleted">
            <summary>
            Gets the IsDeleted status of the customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.TotalOrders">
            <summary>
            Gets or sets the toal number of orders placed by the customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.TotalOrderValue">
            <summary>
            Gets or sets the total value of orders placed by this customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.AverageOrderValue">
            <summary>
            Gets the average order placed by this customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.BillingAddressId">
            <summary>
            Gets or sets the Address Id of the billing address for the customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.ShippingAddressId">
            <summary>
            Gets or sets Address Id of the shipping address for this customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.Password">
            <summary>
            Gets or sets the password for the customer.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CustomerData.EmailAddress">
            <summary>
            Gets or sets the email address of the customer.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.IAddress.UpdateOrderAddress(Ektron.Cms.Commerce.AddressData,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Updates an address associated with an order.  This update only affects this specific address and 
            does not affect the customer's actual saved address.
            </summary>
            <param name="addressData"></param>
            <param name="orderId">Id of order to update address for.</param>
            <param name="isBilling">If true, updates the billing address for an order.</param>
            <param name="isShipping">If true, updates the shipping address for an order.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.IOrderManager.GetItemByTransactionId(System.String,System.String)">
            <summary>
            Retrieves an order by transactionId
            </summary>
            <param name="recurringTransactionId">Id of the transaction</param>
            <param name="paymentGateway">Gateway the transaction Id is associated with</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.IOrderManager.GetItemByRecurringTransactionId(System.String,System.String)">
            <summary>
            Retrieves an order by recurring transactionId
            </summary>
            <param name="recurringTransactionId">Id of the recurring transaction</param>
            <param name="paymentGateway">Gateway the recurring transaction Id is associated with</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.IOrderManager.ProcessRecurringPayment(System.String,System.String,System.String)">
            <summary>
            Processes a recurring payment that has occurred.  Records the payment to the order.
            </summary>
            <param name="recurringTransactionId">Id of recurring transaction.</param>
            <param name="transactionId">Transaction Id of this particular payment</param>
            <param name="paymentGateway">Name of gateway processing payment.</param>
        </member>
        <member name="T:Ektron.Cms.Commerce.OrderProperty">
            <summary>
            Enumeration of order properties used for sorting and filtering OrderData objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.OrderData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.OrderData.CopyData(Ektron.Cms.Commerce.OrderData,Ektron.Cms.Commerce.OrderData)">
            <summary>
            Copied data from one OrderData class to another.
            </summary>
            <param name="origin">source object to copy data from.</param>
            <param name="destination">object to copy data to.</param>
        </member>
        <member name="P:Ektron.Cms.Commerce.OrderData.Subtotal">
            <summary>
            Gets or sets the Order SubTotal.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OrderData.TaxTotal">
            <summary>
            Gets or sets the total tax amount for the order.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OrderData.ShippingTotal">
            <summary>
            Gets or sets the total shipping charged for order.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OrderData.HandlingTotal">
            <summary>
            Gets or sets the total handling charges for the order.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OrderData.CouponTotal">
            <summary>
            Gets or sets the total coupon discount for the order.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OrderData.OrderTotal">
            <summary>
            Gets or sets the Order Total.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.OrderLineData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OrderLineData.PriceEach">
            <summary>
            Gets or sets the unit sale price for each line item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OrderLineData.PriceSubTotal">
            <summary>
            Gets or sets the line item subtotal.  This does not reflect and discounts or adjustments.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.OrderLineData.PriceTotal">
            <summary>
            Gets or sets the total line item price.  This reflects quantity and any applicable discounts.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.OrderPartData">
            <summary>
            data class representing order part sin the cms.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.PipelineStageData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.InventoryData">
            <summary>
            The InventoryData class allows you to get and set various inventory 
            information for a catalog entry (product).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.InventoryData.EntryId">
            <summary>
            Gets or sets the ID of the catalog entry (product) that this inventory data represents.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.InventoryData.UnitsInStock">
            <summary>
            Gets or sets the the number of units currently in stock for the product.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.InventoryData.UnitsOnOrder">
            <summary>
            Gets or sets The number of units currently on order for this product. 
            This is the number of units that the store has ordered to replenish 
            inventory and NOT the number of units that are currently on order by customers.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.InventoryData.ReorderLevel">
            <summary>
            Gets or sets the inventory level at which stock should be reordered.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.CountryProperty">
            <summary>
            Enumeration of CountryData properties used for sorting and filtering CountryData objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.CountryData">
            <summary>
            Gets or sets information about a specified country.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.CountryData.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="id">The ID of the country. The ID is the ISO numeric code of the country.</param>
            <param name="name">The name of the country.</param>
            <param name="shortIsoCode">The 2 letter ISO code of the country.</param>
            <param name="longIsoCode">The 3 letter ISO code of the country.</param>
            <param name="enabled">Indicates whether or not the country is enabled for use.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.CountryData.Validate">
            <summary>
            Validates the CountryData object is valid for saving.
            </summary>
            <returns>Returns a ValidationResult object with any validation errors.</returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.CountryData.ToString">
            <summary>
            Returns Name of Country.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.CountryData.Id">
            <summary>
            Gets or sets the ID of the country.  The ID is the ISO numeric code of the country.
            This property is required when creating an country data object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CountryData.Name">
            <summary>
            Gets or sets the name of the country. This property is required when
            creating an country data object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CountryData.ShortIsoCode">
            <summary>
            Gets or sets the 2 letter ISO code of the country. This property is required when
            creating an country data object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CountryData.LongIsoCode">
            <summary>
            Gets or sets the 3 letter ISO code of the country. This property is required when
            creating an country data object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CountryData.Enabled">
            <summary>
            Gets or sets whether or not the country is enabled for use. 
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.CurrencyProperty">
            <summary>
            Enumeration of CurrencyData properties used for sorting and filtering CurrencyData objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.CurrencyData">
            <summary>
            Data class representing currencies in system.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyData.Id">
            <summary>
            Gets or sets the Id of the currency.  The Id is the ISO numeric code of the currency.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyData.Name">
            <summary>
            Gets or sets the name of the currency.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyData.AlphaIsoCode">
            <summary>
            Gets or sets the 3 letter ISO  code of the currency.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyData.Enabled">
            <summary>
            Gets or sets whether or not the currency is enabled for use.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyData.CultureCode">
            <summary>
            Gets or sets the culture code associated with this currency.  This is used for formatting
            currency values for this currency.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyData.CurrencySymbol">
            <summary>
            Read only function that gets the symbol for this currency.
            Example: $
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyData.ISOCurrencySymbol">
            <summary>
            Read only function that gets the ISO symbol for this currency.
            Example: USD
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.RegionProperty">
            <summary>
            Enumeration of Region properties used for sorting and filtering RegionData objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.RegionData">
            <summary>
            Gets or sets information about specified geographic regions within countries that your 
            eCommerce site services. For example, in the United States of America, each state is a region.
            So, if you were adding New Hampshire as a region, the code might look like this.
            <code>
            RegionData region = new RegionData();
            region.Name = "New Hampshire";
            region.CountryId = 840;   // 840 is the country code for the United States.
            region.Code = "NH";
            region.Enabled = true;
            RegionAPI.Add(region);
            </code>
            To update an existing region's information, use the <c>Id</c> property to specify the region. 
            For example, to update New Hampshire's information, add <c>region.Id = 31;</c> to the code above.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.RegionData.#ctor(System.String,System.Int64,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name">The name of the region.</param>
            <param name="countryId">The ID of the country to which the region belongs.</param>
            <param name="code">Gets or sets the code of the region. This is typically an abbreviation for the name of the region.</param>
            <param name="enabled">Indicates whether or not the region is enabled for use.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.RegionData.Validate">
            <summary>
            Validates the RegionData object is valid for saving.
            </summary>
            <returns>Returns a ValidationResult object with any validation errors.</returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.RegionData.ToString">
            <summary>
            Returns Name of Region.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.RegionData.Id">
            <summary>
            Gets or sets the ID of the region.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RegionData.Name">
            <summary>
            Gets or sets the name of the region. For example, if the region is a US state, you might enter 
            "New Hampshire" for this property. This property is required when creating an region data object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RegionData.CountryId">
            <summary>
            Gets or sets the ID of the country to which the region belongs. For example, if you are adding
            a region to the United States, you would enter "840" for this property. This property is 
            required when creating an region data object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RegionData.Code">
            <summary>
            Gets or sets the code of the region. This is typically an abbreviation for the name of the region.
            For example, if you add New Hampshire as a region, you would enter "NH" for this property. Each
            region must have its own unique code. You cannot have more than one region with the same code.
            This property is required when creating an region data object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RegionData.Enabled">
            <summary>
            Gets or sets whether or not the region is enabled for use.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.CreditCardTypeProperty">
            <summary>
            Enumeration of CreditCardTypeData properties used for sorting and filtering CreditCardTypeData objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.CreditCardTypeData">
            <summary>
            Data class representing credit card types in system.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CreditCardTypeData.Id">
            <summary>
            Gets or sets the Id of the credit card type.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CreditCardTypeData.Name">
            <summary>
            Gets or sets the name of the credit card
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CreditCardTypeData.IsAccepted">
            <summary>
            Gets or sets whether or not the credit car type is accepted.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CreditCardTypeData.Image">
            <summary>
            gets or sets path to image for credit card type.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CreditCardTypeData.Regex">
            <summary>
            gets or sets the regex validation for the credit card type.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.IPaymentManager.Authorize">
            <summary>
            Authorizes a payment, but does not capture it.  Returns authoization code so it can be captured at a later date.
            </summary>
            <returns>Transaction Id of authorization.</returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.IPaymentManager.AuthorizeAndCapture">
            <summary>
            Authorizes and captures a payment.
            </summary>
            <returns>Transaction Id of authorization.</returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.IPaymentManager.CapturePreauthorization(System.String)">
            <summary>
            Captures a preauthorized payment.
            </summary>
            <returns>Transaction Id of authorization.</returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.IPaymentManager.Void(System.String)">
            <summary>
            Voids a preauthorized payment.
            </summary>
            <returns>Transaction Id of authorization.</returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.IPaymentManager.AuthorizeRecurringPayment(Ektron.Cms.Common.RecurrenceData)">
            <summary>
            Authorizes a recurring payment transaction.
            </summary>
            <param name="recurrence">recurring payment schedule</param>
            <returns>Recurring transaction id.</returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.IPaymentManager.CancelRecurringPayment(System.String)">
            <summary>
            Cancels a recurring payment.
            </summary>
            <param name="recurringTransactionId">id of recurring transaction to cancel.</param>
            <returns>Recurring transaction id.</returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.IPaymentManager.RecurringPaymentProcessed(System.String,System.String,System.String)">
            <summary>
            Handles a recurring payment that has been processed.  This method passes the processing on to the specified PaymentProvider.
            </summary>
            <param name="recurringTransactionId">Id of the recurring transaction</param>
            <param name="paymentTransactionId">Id of individual payment.</param>
            <param name="gatewayName">Name of the gateway to use for processing the payment.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.IPaymentManager.RecurringPaymentFailed(System.String,System.String)">
            <summary>
            Handles a recurring payment that has failed.  This method should be the callback point when a recurring payment has failed.
            </summary>
            <param name="recurringTransactionId">Id of the recurring transaction</param>
            <param name="gatewayName">Name of the gateway to use for processing the payment.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.SoloCardPayment.Validate">
            <summary>
            Validates the data entered into the cards properties.
            </summary>
            <returns>Returns true if the current data meets validation requirements, false otherwise.</returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.SoloCardPayment.GetPayment(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a PaymentMethod based upon NameValueCollection.  This would be used by the checkout control to get the paymentMethod
            posted back from the page.
            </summary>
            <param name="postBackData"></param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.SoloCardPayment.NameOnCard">
            <summary>
            The name of the cardholder, as found on the card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.SoloCardPayment.CardNumber">
            <summary>
            The account number as printed on the card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.SoloCardPayment.StartDate">
            <summary>
            The original cards issue date, as printed on the card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.SoloCardPayment.ExpirationDate">
            <summary>
            The expiration date, as printed on the card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.SoloCardPayment.IssueNumber">
            <summary>
            The issue number, as printed on the card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.SoloCardPayment.CardSecurityNumber">
            <summary>
            The security number, as printed on the card.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.SoloCardPayment.BankName">
            <summary>
            Bank or Institution that issued the credit card.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.PaymentAuthorization">
            <summary>
            Data class representing payment authorization from gateway.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentAuthorization.Gateway">
            <summary>
            Gets or sets the name of the gateway used for this authorization.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentAuthorization.TransactionId">
            <summary>
            Gets or sets the Transaction Id for this authorization.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentAuthorization.RecurringTransactionId">
            <summary>
            Gets or sets the Transaction id for a recurring transaction.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentAuthorization.Message">
            <summary>
            Gets or sets a success or error message for the authorization.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentAuthorization.AuthorizedOn">
            <summary>
            Gets or sets the authorization date.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentAuthorization.CapturedOn">
            <summary>
            Gets or sets the Capture Date.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentAuthorization.VoidedOn">
            <summary>
            Gets or sets the Voided Date.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentAuthorization.CreditedOn">
            <summary>
            Gets or sets the Credited Date.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.PaymentGatewayData">
            <summary>
            The PaymentGatewayData data class gets or sets information about a specified payment gateway.
            A payment gateway is the company that handles the payments from your site. CMS400.NET comes ready to
            use with several payment gateways installed, including Authorize.net and PayFlow. Each payment 
            gateway provider accepts configuration parameters.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.PaymentGatewayData.Validate">
            <summary>
            Validates the PaymentGatewayData object is valid for saving.
            </summary>
            <returns>Returns a ValidationResult object with any validation errors.</returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentGatewayData.Id">
            <summary>
            Gets or sets the CMS400.NET ID for the payment gateway data object. You cannot set the ID of a 
            newly created data object. The ID of an object is set internally by CMS400.NET during the creation
            (Add) process. You can set the ID of the object for updating purposes.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentGatewayData.Name">
            <summary>
            Gets or sets the name associated with the payment gateway. For example, if you were adding 
            information for a payment gateway company called EkPay, enter "EkPay" for this property. When
            creating a payment gateway, a name value is required.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentGatewayData.UserId">
            <summary>
            Gets or sets the user ID associated with a payment gateway. This is not a CMS400.NET user ID. This
            information is supplied by the payment gateway.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentGatewayData.Password">
            <summary>
            Gets or sets the password associated with a payment gateway. This is not a CMS400.NET password. 
            This information is supplied by the payment gateway.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentGatewayData.IsDefault">
            <summary>
            Gets or sets whether this payment gateway is the default in CMS400.NET.
              * <b>True</b> = default payment gateway
              * <b>False</b> = not the default payment gateway
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentGatewayData.IsCustom">
            <summary>
            Gets or sets whether this payment gateway is a custom payment gateway or one that 
            comes pre-installed with Ektron CMS400.NET. Set this property to true when creating a custom
            payment gateway.
              * <b>True</b> = is a custom payment gateway
              * <b>False</b> = is not a custom payment gateway
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentGatewayData.CustomFieldOne">
            <summary>
            Gets or sets the first custom field a payment gateway might require. Each type of payment 
            gateway provider accepts configuration parameters. For example, Authorize.NET requires a 
            username and password while PayFlow requires a username, password, vendor, and partner.
            So, if you were creating an object for PayFlow, you would enter the required vendor information
            in this property. If your payment gateway does not require additional information, leave blank.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentGatewayData.CustomFieldTwo">
            <summary>
            Gets or sets the second custom field a payment gateway might require. Each type of payment 
            gateway provider accepts configuration parameters. For example, Authorize.NET requires a 
            username and password while PayFlow requires a username, password, vendor, and partner.
            So, if you were creating an object for PayFlow, you would enter the required partner information
            in this property. If your payment gateway does not require additional information, leave blank.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentGatewayData.AllowsCreditCardPayments">
            <summary>
            Gets or sets whether the payment gateway accepts credit cards.
              * <b>True</b> = the payment gateway accepts credit cards
              * <b>False</b> = the payment gateway does not accept credit cards
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PaymentGatewayData.AllowsCheckPayments">
            <summary>
            Gets or sets whether the payment gateway accepts check payments.
              * <b>True</b> = the payment gateway accepts check payments
              * <b>False</b> = the payment gateway does not accept check payments
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.CurrencyPricingData">
            <summary>
            Represents Pricing Information for  agiven currency.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.CurrencyPricingData.#ctor(System.Int64,System.Decimal,System.Decimal)">
            <summary>
            Creates  a CurrencyPricingData with a single tierprice of quantity 1 and the supplied sale price.
            </summary>
            <param name="currencyId">Id of currency to create pricing for.</param>
            <param name="listPrice">List Price for currency.</param>
            <param name="salePrice">sale Price for single tier item.</param>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyPricingData.CurrencyId">
            <summary>
            Gets or sets the Id of currency that this pricing represents.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyPricingData.NumericIsoCode">
            <summary>
            Gets or sets the numeric iso code of the currency associated with these prices.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyPricingData.AlphaIsoCode">
            <summary>
            Gets or sets the alpha iso code of the currency associated with these prices.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyPricingData.ListPrice">
            <summary>
            Gets or sets the list price for this currency.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyPricingData.TierPrices">
            <summary>
            Gets all the tier prices for this currency.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyPricingData.SalePrice">
            <summary>
            Gets the default sale price for a single quantity.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CurrencyPricingData.PricingType">
            <summary>
            Gets or sets the PricingType forthe currency.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.ExchangeRateProperty">
            <summary>
            Enumeration of ExchangeRate columns available for sorting and filtering.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.ExchangeRateData.Validate">
            <summary>
            Validates the ExchangeRate data object for saving.
            </summary>
            <returns>returns ValidationResult object with results.</returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.ExchangeRateData.ConvertPrice(System.Decimal)">
            <summary>
            Converts a pric ein the base currency to a price in the exchange currency using the rate defined.
            </summary>
            <param name="basePrice">price to convert.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.ExchangeRateData.BaseCurrencyId">
            <summary>
            Gets or sets the Currency Id for the base currency.  
            This is the currency that is being used as the basis for the exchange rate.  i.e. 
            If you are converting from USD to AUD, USD is the base currency
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ExchangeRateData.ExchangeCurrencyId">
            <summary>
            Gets or sets the Currency Id for the exchange currency.  
            This is the currency that the currency amount is being converted to.
            If you are converting from USD to AUD, AUD is the exchange currency.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ExchangeRateData.Rate">
            <summary>
            Gets or sets the actual exchange rate between to currencies.  This is the rate applied to base currency 
            to convert it to exchange currency.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ExchangeRateData.EffectiveDate">
            <summary>
            Gets or sets the date and time in which this rate becomes effective.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.IExchangeRate.GetCurrentExchangeRate">
            <summary>
            Retrieves the currently effective exchange rate based upon the system settings for default currency and the currenct currency.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Commerce.PricingData.#ctor(System.Int64,System.Decimal,System.Decimal)">
            <summary>
            Creates  a PricingData with a single CurrencyPricingData that contains a single tierprice with the supplied sale price.
            </summary>
            <param name="currencyId">Id of currency to create pricing for.</param>
            <param name="listPrice">List Price for currency.</param>
            <param name="salePrice">sale Price for single tier item.</param>
        </member>
        <member name="P:Ektron.Cms.Commerce.PricingData.CurrencyPricelist">
            <summary>
            Gets list of CurrencyPriceData objects associated with this PricingData object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PricingData.IsRecurringPrice">
            <summary>
            Gets the Is Recurring Price flag.  If true, this price is for recurring billing.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PricingData.Recurrence">
            <summary>
            Gets or sets the recurrence pattern for this price if it supports recurring billing.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.TierPriceData.DataState">
            <summary>
            Gets or sets the TierPrices persistence State.  Used internally.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.TierPriceData.RecurrenceId">
            <summary>
            Gets or sets the id of the recurrence pattern for this price if it supports recurring billing.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.RecommendationItemData">
            <summary>
            Data class representing entry reccomendations in ecommerce system.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.RecommendationItemData.#ctor(System.Int64,System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.RecommendationType)">
            <summary>
            
            </summary>
            <param name="id">id of reccomendation.</param>
            <param name="entryId">entry id associated with recommendation.</param>
            <param name="entryLanguage">language of entryId.</param>
            <param name="recommendationType">type of recommendation.</param>
        </member>
        <member name="P:Ektron.Cms.Commerce.RecommendationItemData.Type">
            <summary>
            Gets or sets the type of reccomendation.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RecommendationItemData.EntryType">
            <summary>
            Gets or sets the entry type associated with this recommendation.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RecommendationItemData.EntryLanguage">
            <summary>
            Gets or sets the language of the entry.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RecommendationItemData.Title">
            <summary>
            Gets or sets the title of the recommendation.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RecommendationItemData.Image">
            <summary>
            Gets or sets the image associated with the recommendation.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RecommendationItemData.ImageThumbnail">
            <summary>
            Gets or sets the image thumbnail associated with the recommendation.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RecommendationItemData.Html">
            <summary>
            Gets or sets the Html of the recommendation.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RecommendationItemData.Summary">
            <summary>
            Gets or sets the summary of the recommendation.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RecommendationItemData.Pricing">
            <summary> 
            The entry pricing, including currencies and quantity.
            </summary> 
            <value></value> 
            <returns>PricingData of the catalog entry.</returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Commerce.RecommendationItemData.Quicklink">
            <summary>
            Gets or sets the quiclink of the recommendation.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.PackageProperty">
            <summary>
            Enumeration representing properties of the packagedata class.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.PackageData">
            <summary>
            Data class used for representing package sizes used for shipping items.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.PackageData.#ctor(System.String,Ektron.Cms.Commerce.Dimensions,Ektron.Cms.Commerce.Weight)">
            <summary>
            
            </summary>
            <param name="name">the name of the package</param>
            <param name="dimensions">dimensions of the package</param>
            <param name="maxWeight">maximum weight capacity of the package</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.PackageData.#ctor(System.String,Ektron.Cms.Commerce.Dimensions,Ektron.Cms.Commerce.Weight,System.Int64)">
            <summary>
            
            </summary>
            <param name="name">the name of the package</param>
            <param name="dimensions">dimensions of the package</param>
            <param name="maxWeight">maximum weight capacity of the package</param>
            <param name="id">the Id of the package.</param>
        </member>
        <member name="P:Ektron.Cms.Commerce.PackageData.Id">
            <summary>
            Gets or sets the Id of the package.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PackageData.Name">
            <summary>
            Gets or sets the name of the package.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PackageData.Dimensions">
            <summary>
            gets or sets the dimensions of the package.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PackageData.MaxWeight">
            <summary>
            gets or sets the maximum weight capacity of the package.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.ShippingBaseData">
            <summary>
            Base data class for representing shipping method information.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ShippingBaseData.Name">
            <summary>
            Gets or sets the name of the the shipping data
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ShippingBaseData.Id">
            <summary>
            gets or sets the id of the the shipping data.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ShippingBaseData.ProviderService">
            <summary>
            Gets or sets the name of the provider service for the shipping data.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.ShippingMethodProperty">
            <summary>
            Enumeration representing properties of the ShippingMethodData class.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.ShippingMethodData">
            <summary>
            Data class used to represent shipping methods defined in the cms.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ShippingMethodData.IsActive">
            <summary>
            Gets or sets whethe ror not the Shipping Method is Active.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ShippingMethodData.DisplayOrder">
            <summary>
            Gets or sets the display order for this shipping method.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.ShippingOptionData">
            <summary>
            Data class representing a quote for a particular shipping method.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ShippingOptionData.ShippingFee">
            <summary>
            Gets or sets the fee for this particular shipping option.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.ShippingOptionData.CurrencyId">
            <summary>
            Gets or sets the currency associated with this shipping Fee.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.TaxRateData.Id">
            <summary>
            Gets or sets the Id of the TaxRate.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.TaxRateData.TypeId">
            <summary>
            Gets or sets the type of the Tax Rate.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.TaxRateData.TypeItemId">
            <summary>
            Gets or sets the Id of the tax type object this tax rate applies to.  
            For instance, for a region sales tax, TypeItemId would be the Id of the corresponding region.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.TaxRateData.TaxClassId">
            <summary>
            Gets or sets the Id of the tax class that this rate applies to.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.TaxRateData.Rate">
            <summary>
            Gets or sets the actual rate for this TaxRate object.  Should be entered in decimal format - i.e. .075 for 7.5%
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.CountryTaxRateData.CountryData">
            <summary>
            Gets or sets the CountryData object associated with this tax rate.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PostalCodeTaxRateData.PostalCode">
            <summary>
            Gets or sets the postal code associated with this tax rate.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.PostalCodeTaxRateData.RegionId">
            <summary>
            Gets or sets the regionid asociated with this postal code.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.RegionTaxRateData.RegionData">
            <summary>
            Gets or sets the RegionData object associated with this tax rate.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.TaxClassProperty">
            <summary>
            / Enumeration of TaxClass columns available for sorting and filtering.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.TaxClassData">
            <summary>
            Data object representing tax class information.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.TaxClassData.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name">name of the tax class</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.TaxClassData.#ctor(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="name">name of the tax class</param>
            <param name="id">name of the tax class</param>
        </member>
        <member name="P:Ektron.Cms.Commerce.TaxClassData.Id">
            <summary>
            Gets or sets the name of the tax class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.TaxClassData.Name">
            <summary>
            Gets or sets the name of the tax class.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.TaxRateProperty">
            <summary>
            Enumeration of possible values to order Lists of TaxRateData by.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.TaxRateType">
            <summary>
            This Represents the default Tax rate Types supported by The CMS.  Additonal tax Types may be supported by customers.
            Example - customer could create specialized VAT TaxRate type.
            
            </summary>
            <remarks>
            TaxRateType Id's 1-100 should be reserved for internal use.
            </remarks>
        </member>
        <member name="T:Ektron.Cms.Commerce.TaxTypeProperty">
            <summary>
            / Enumeration of TaxType columns available for sorting and filtering.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.TaxTypeData">
            <summary>
            Data class representing Tax Types.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.TaxTypeData.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name">name of the tax class</param>
            <param name="precedence">Gets or sets the precedence of the tax class.  This is the priority order in which it will be applied. 
            For example, if type "Postal Code Sales Tax is priority 1" and it exists for an address it will be used over
            type "State Sales Tax" which is priority 2.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.TaxTypeData.#ctor(System.String,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="name">name of the tax class</param>
            <param name="id">name of the tax class</param>
            <param name="precedence">Gets or sets the precedence of the tax class.  This is the priority order in which it will be applied. 
            For example, if type "Postal Code Sales Tax is priority 1" and it exists for an address it will be used over
            type "State Sales Tax" which is priority 2.</param>
        </member>
        <member name="P:Ektron.Cms.Commerce.TaxTypeData.Id">
            <summary>
            Gets or sets the name of the tax class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.TaxTypeData.Name">
            <summary>
            Gets or sets the name of the tax class.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.TaxTypeData.Precedence">
            <summary>
            Gets or sets the precedence of the tax class.  This is the priority order in which it will be applied. 
            For example, if type "Postal Code Sales Tax is priority 1" and it exists for an address it will be used over
            type "State Sales Tax" which is priority 2.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.LinearUnit">
            <summary>
            Enumeration of units for measuring length.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.WeightUnit">
            <summary>
            Enumeration of units for measuring weight.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.Dimensions">
            <summary>
            Class used to define dimension information.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.Dimensions.#ctor(Ektron.Cms.Commerce.LinearUnit,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="units">Linear Units that define the dimensions.</param>
            <param name="length">Length of the package in Units</param>
            <param name="width">Length of the package in Units</param>
            <param name="height">Length of the package in Units</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.Dimensions.ConvertUnits(Ektron.Cms.Commerce.LinearUnit)">
            <summary>
            Converts the current Dimensions object to a new object in the supplied units.
            </summary>
            <param name="toUnit">LinearUnit to convert to</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.Dimensions.ConvertDimensions(System.Single)">
            <summary>
            Converts each dimesnion in object based upon the multiplier.
            </summary>
            <param name="multiplier">decimal to multiple dimensions by</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.Dimensions.CompareTo(Ektron.Cms.Commerce.Dimensions)">
            <summary>
            Compares DImensions based upon CubicUnits
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Commerce.Dimensions.Length">
            <summary>
            Gets or sets the Length of the package in Units.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.Dimensions.Width">
            <summary>
            Gets or sets the Length of the package in Units
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.Dimensions.Height">
            <summary>
            Gets or sets the Length of the package in Units
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.Dimensions.Units">
            <summary>
            Gets or sets the Linear Units that define the dimensions.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.Dimensions.CubicUnits">
            <summary>
            Gets the dimensions cubic units.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.Weight">
            <summary>
            Class used to define mesurement information.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Commerce.Weight.#ctor(Ektron.Cms.Commerce.WeightUnit,System.Single)">
            <summary>
            
            </summary>
            <param name="units">Units in which the package is weighed.</param>
            <param name="totalWeight">Total weight of the package in Units.</param>
        </member>
        <member name="M:Ektron.Cms.Commerce.Weight.ConvertUnits(Ektron.Cms.Commerce.WeightUnit)">
            <summary>
            Converts the current Weight object to a new object in the supplied units.
            </summary>
            <param name="toUnit">WeightUnit to convert to</param>
        </member>
        <member name="P:Ektron.Cms.Commerce.Weight.Amount">
            <summary>
            Gets or sets the actual weight value in Units.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.Weight.Units">
            <summary>
            Gets or sets the Units in which the package is weighed.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Commerce.WarehouseProperty">
            <summary>
            Enumeration of Warehouse properties used for sorting and filtering WarehouseData objects.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.WarehouseData.Id">
            <summary>
            Gets or sets Id of Address.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.WarehouseData.Name">
            <summary>
            Gets or sets the name of this Warehouse.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.WarehouseData.Address">
            <summary>
            Gets or sets the address of this Warehouse.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Commerce.WarehouseData.IsDefaultWarehouse">
            <summary>
            Gets or sets the IsDefaultWarehouse status property for the warehouse. 
            If true, this warehouse is the default warehouse for the system.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Common.Cache.RequestCache`1">
            <summary>
            This class provides a mechanism to store objects for the lifetime 
            of a single request.
            
            Methods are static and generic, so no instance variable is required 
            and the desired object type is used without the need for type casting.
            
            Note that the cache entry Id is of type System.Uri, which may be 
            constructed inline with the method call.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Common.Cache.RequestCache`1.Insert(System.String,`0)">
            <summary>
            Adds (or updates) an object of type T to the request cache.
            </summary>
            <param name="key">
            The unique identifier for the cached object.
            </param>
            <param name="item">
            The object, of type T, to add to the cache
            </param>
        </member>
        <member name="M:Ektron.Cms.Common.Cache.RequestCache`1.Insert(System.String,System.String,`0)">
            <summary>
            Adds (or updates) an object of type T to the request cache.
            </summary>
            <param name="key">
            The unique identifier for the cached object.
            </param>
            <param name="componentName">
            The identifier of the calling component.
            </param>
            <param name="item">
            The object, of type T, to add to the cache.
            </param>
        </member>
        <member name="M:Ektron.Cms.Common.Cache.RequestCache`1.Invalidate(System.String)">
            <summary>
            Removes an object from the request cache.
            </summary>
            <param name="key">
            The unique identifier for the cached object.
            </param>
        </member>
        <member name="M:Ektron.Cms.Common.Cache.RequestCache`1.Invalidate(System.String,System.String)">
            <summary>
            Removes an object from the request cache.
            </summary>
            <param name="key">
            The unique identifier for the cached object.
            </param>
            <param name="componentName">
            The identifier of the calling component.
            </param>
        </member>
        <member name="M:Ektron.Cms.Common.Cache.RequestCache`1.Get(System.String)">
            <summary>
            Retrieves an object of type T from the request cache.
            </summary>
            <param name="key">
            The unique identifier for the cached object.
            </param>
            <returns>
            An object, of type T, from the cache. May be a default 
            value (such as null, depending on the type) if the object does 
            not exist in the cache
            </returns>
        </member>
        <member name="M:Ektron.Cms.Common.Cache.RequestCache`1.Get(System.String,System.String)">
            <summary>
            Retrieves an object of type T from the request cache.
            </summary>
            <param name="key">
            The unique identifier for the cached object.
            </param>
            <param name="componentName">
            The identifier of the calling component.
            </param>
            <returns>
            An object, of type T, from the cache. May be a default 
            value (such as null, depending on the type) if the object does 
            not exist in the cache
            </returns>
        </member>
        <member name="T:Ektron.Cms.Common.Cache.CacheHelper">
            <summary>
            This class provides access to Ektron global Cache keys
            </summary>
        </member>
        <member name="M:Ektron.Cms.Common.Cache.ApplicationCache.Insert(System.String,System.Object)">
            <summary>
            Adds (or updates) an object of type T to the request cache.
            This method is overloaded. See Also:
              * Insert(String,T)
              * Insert(String,T,String)
              * Insert(String,T,Double)
            </summary>
            <param name="key">
            The unique identifier for the cached object.
            </param>
            <param name="item">
            The object, of type T, to add to the cache
            </param>
        </member>
        <member name="M:Ektron.Cms.Common.Cache.ApplicationCache.Insert(System.String,System.Object,System.String)">
            <summary>
            Adds (or updates) an object of type T to the request cache.
             This method is overloaded. See Also:
              * Insert(String,T)
              * Insert(String,T,String)
              * Insert(String,T,Double)
            </summary>
            <param name="key">
            The unique identifier for the cached object.
            </param>
            <param name="item">
            The object, of type T, to add to the cache
            </param>
            <param name="dependency">
            Dependency relationship between an item stored in an ASP.NET application's Cache object and a file, of type string
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ektron.Cms.Common.Cache.ApplicationCache.Insert(System.String,System.Object,System.Double)" -->
        <member name="M:Ektron.Cms.Common.Cache.ApplicationCache.Invalidate(System.String)">
            <summary>
            Removes an object from the request cache.
            </summary>
            <param name="key">
            The unique identifier for the cached object.
            </param>
        </member>
        <member name="M:Ektron.Cms.Common.Cache.ApplicationCache.Get``1(System.String)">
            <summary>
            Retrieves an object of type T from the request cache.
            </summary>
            <param name="key">
            The unique identifier for the cached object.
            </param>
            <returns>
            An object, of type T, from the cache. May be a default 
            value (such as null, depending on the type) if the object does 
            not exist in the cache
            </returns>
        </member>
        <member name="T:Ektron.Cms.CmsLocalizedDataCollection`1">
            <summary>
            Represents a collection of Language specific CmsLocalizedData objects for a given message Id.
            This collection is only meant to contain the multiple language versions of a single CmsLocalizedDataObject 
            of a given Id and not multiple objects of various Ids.
            </summary>
        </member>
        <member name="M:Ektron.Cms.CmsLocalizedDataCollection`1.FindItemForLanguage(System.Int32)">
            <summary>
            Gets the Language specific item based upon the supplied language.
            </summary>
            <param name="languageId">ID of language to find item for.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.CmsLocalizedDataCollection`1.BaseList">
            <summary>
            Gets the base List collection.
            </summary>
        </member>
        <member name="P:Ektron.Cms.CmsLocalizedDataCollection`1.DefaultItem">
            <summary>
            Gets the default Item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.CmsLocalizedDataCollection`1.DefaultLanguageId">
            <summary>
            Gets or sets the Default Language Id for the CmsLocalizedDataCollection
            </summary>
        </member>
        <member name="M:Ektron.Cms.Common.CriteriaFilter`1.#ctor(`0,Ektron.Cms.Common.CriteriaFilterOperator,System.Object)">
            <summary>
            Creates  a new CriteriaFilter
            </summary>
            <param name="field">field to filter on.</param>
            <param name="filterOperator">operator to use on field and value for filter.</param>
            <param name="value">value used for filter.</param>
        </member>
        <member name="M:Ektron.Cms.Common.CriteriaFilterGroup`1.AddFilter(`0,Ektron.Cms.Common.CriteriaFilterOperator,System.Object)">
            <summary>
            Adds a new CriteriaFilter to the filter list.
            </summary>
            <param name="field">field to filter on.</param>
            <param name="filterOperator">operator to use on field and value for filter.</param>
            <param name="value">value used for filter.</param>
            <returns>newly added filter.</returns>
        </member>
        <member name="P:Ektron.Cms.Common.CriteriaFilterGroup`1.Filters">
            <summary>
            Gets list of CriteriaFilters in this group.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.CriteriaFilterGroup`1.Condition">
            <summary>
            Gets or Sets the LogicalOperator for the FilterGroup.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Common.ContentResultType">
            <summary>
            Represents types of content in approval process.
            </summary>
            <remarks>
            Same as EkContent.ContentResultType which is not widely available because it's parkt EkContnet.
            </remarks>
        </member>
        <member name="T:Ektron.Cms.Common.RecurrenceData">
            <summary>
            Class represents a recurrence pattern.  Patterns are created using Factory Methods.
            </summary>
            <remarks>
            To avoid possible invalid data patterns, all fields are readonly and patterns must be created using factory.
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Common.RecurrenceData.GetDayOfWeekList">
            <summary>
            Converts the EventRecurrence.RecurrenceDayOfWeek flag values to a list of DayOfWeek Enum Values.
            </summary>
            <returns>List of DayOfWeek values for the current Recurrence</returns>
        </member>
        <member name="M:Ektron.Cms.Common.RecurrenceData.CreateNonRecurrence">
            <summary>
            Creates an empty EventRecurrence with a recurrenceType of None.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.RecurrenceData.CreateDailyRecurrence(System.Int32)">
            <summary>
            Create a recurrence for a daily event.
            </summary>
            <param name="recurrenceMultiple">Identifies how often this event occurs.  for example, 1 = daily, 2 = every other day, 3 = every third day, etc.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.RecurrenceData.CreateDailyRecurrence(Ektron.Cms.Common.RecurrenceDaysOfWeek)">
            <summary>
            Create a recurrence for a daily event.
            </summary>
            <param name="days">identifies which days does this event occur.  ie. mon, mon\wed\fri, etc.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.RecurrenceData.CreateWeeklyRecurrence(System.Int32,Ektron.Cms.Common.RecurrenceDaysOfWeek)">
            <summary>
            Create a recurrence for a weekly event.
            </summary>
            <param name="recurrenceMultiple">Identifies how often this event occurs.  for example, 1 = weekly, 2 = every other week, 3 = every third week, etc.</param>
            <param name="days">identifies which days does this event occur.  ie. mon, mon\wed\fri, etc.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.RecurrenceData.CreateMonthlyByDayRecurrence(System.Int32,Ektron.Cms.Common.RecurrenceDayOfMonth,Ektron.Cms.Common.RecurrenceDaysOfWeek)">
            <summary>
            Create a monthly recurrence that occurs based upon the relative week.  For example, every month on the first Tuesday.
            </summary>
            <param name="recurrenceMultiple">Identifies how often this event occurs.  for example, 1 = monthly, 2 = every other month, 3 = every third month, etc.</param>
            <param name="dayOfMonth">Identifies which week of the month the event occurs.</param>
            <param name="day">identifies the day this event occurs on.  i.e. The third Tuesday.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.RecurrenceData.CreateMonthlyByDayRecurrence(System.Int32,System.DateTime)">
            <summary>
            Create a monthly recurrence that occurs based upon the relative week.  For example, every month on the first Tuesday.
            </summary>
            <param name="recurrenceMultiple">Identifies how often this event occurs.  for example, 1 = monthly, 2 = every other month, 3 = every third month, etc.</param>
            <param name="date">A date time that represents the day of week occurance to use.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.RecurrenceData.CreateMonthlyByDateRecurrence(System.Int32,System.Int32)">
            <summary>
            Create a monthly recurrence that occurs based upon a specific date of the month.  For example, every month on the 15th.
            </summary>
            <param name="recurrenceMultiple">Identifies how often this event occurs.  for example, 1 = monthly, 2 = every other month, 3 = every third month, etc.</param>
            <param name="date">identifies which day of the month the event occur.  ie. 1st, 3rd, 15th, etc. For last day of month, use -1.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.RecurrenceData.CreateYearlyRecurrence(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a recurrence for a yearly event for a given monthly date.  For example, every year on April 15th.
            </summary>
            <param name="recurrenceMultiple">Identifies how often this event occurs.  for example, 1 = yearly, 2 = every other year, 3 = every third year, etc.</param>
            <param name="monthOfYear">The integer representing the month of the year this event occurs.</param>
            <param name="dayOfMonth">The specific day of the month this event occurs.  For example, the 15th.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.RecurrenceData.CreateYearlyRecurrence(System.Int32,System.Int32,Ektron.Cms.Common.RecurrenceDayOfMonth,Ektron.Cms.Common.RecurrenceDaysOfWeek)">
            <summary>
            Create a recurrence for a yearly event for a given monthly day.  For example, every year on the first tuesday of april.
            </summary>
            <param name="recurrenceMultiple">Identifies how often this event occurs.  for example, 1 = yearly, 2 = every other year, 3 = every third year, etc.</param>
            <param name="monthOfYear">The integer representing the month of the year this event occurs.</param>
            <param name="dayOfMonth">The specific day of the month this event occurs.  For example, the last weekday.</param>
            <param name="day">The day of the week this event occurs.  For example, the second tuesday.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Common.RecurrenceData.Id">
            <summary>
            Gets or sets the Id of this recurrence if it has been persisted.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.RecurrenceData.EndDateUtc">
            <summary>
            The date recurrence ends.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.RecurrenceData.StartDateUtc">
            <summary>
            The date the recurrence begins.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.RecurrenceData.Intervals">
            <summary>
            Identifies how many times this recurrence should occur.  This would supercede enddateUtc to determine oh many occurances occur.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.RecurrenceData.RecurrenceType">
            <summary>
            The type of recurrence.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.RecurrenceData.RecurrenceMultiple">
            <summary>
            Identifies how often this recurrence occurs.  for example, 1 = daily, 2 = every other day, 3 = every third day, etc.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.RecurrenceData.DayOfMonth">
            <summary>
            The day of the month the patterns recurrs on.  This could be an absolute day like 1st, 2nd, 3rd or relative day represented by RecurrenceDayOfMonth.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.RecurrenceData.Month">
            <summary>
            The month of the year the recurrence ocurs.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Common.RecurrenceData.Days">
            <summary>
            Identifies which days does this recurrence occurs.   For example, mon, tues\thur, mon\wed\fri, etc.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Common.RecurrenceType">
            <summary>
            Enumeration representing Recurrence Pattern Types.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Common.RecurrenceDaysOfWeek">
            <summary>
            Enumeration representing Days of the week.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Common.RecurrenceDayOfMonth">
            <summary>
            Enumeration representing recurrence days of the month.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Common.UserProperty">
            <summary>
            Enumeration used for filtering user lists using UserCriteria.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Common.AttributeCriteria`1">
            <summary>
            Specialized Criteira object that also supports gathering filters on Attributes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ektron.Cms.Common.AttributeCriteria`1.AddAttributeFilter(System.String,Ektron.Cms.Common.CriteriaFilterOperator,System.Object)">
            <summary>
            Adds a attribute based filter to the critaria object.
            </summary>
            <param name="attributeName">Name of attribute to filter on.</param>
            <param name="filterOperator">Filter operator to use for this filter.</param>
            <param name="value">Value of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Common.AttributeCriteria`1.AddAttributeFilter(System.Int64,Ektron.Cms.Common.CriteriaFilterOperator,System.Object)">
            <summary>
            Adds a attribute based filter to the critaria object.
            </summary>
            <param name="attributeName">Id of attribute to filter on.</param>
            <param name="filterOperator">Filter operator to use for this filter.</param>
            <param name="value">Value of the attribute.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Common.UserCriteria">
            <summary>
            Specialized criteria class for filtering users by attribute values.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Community.TagCloud">
            <summary>
            Data structure representing a tag cloud.  A tag cloud is a list of tags associated with a given object type.  
            Also includes the number of times each tag has been used for that object type.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Community.TagCloud.ObjectType">
            <summary>
            Type of object represented by the tag cloud.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Community.TagCloud.Tags">
            <summary>
            Tags in the cloud.  These tags are associated to ObjectType.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Community.TagCloudItem">
            <summary>
            Represents a Tag in a cloud.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Community.TagCloudItem.Tag">
            <summary>
            The TagData object in the cloud.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Community.TagCloudItem.Count">
            <summary>
            The number of times the tag has been used for the ObjectType of the cloud.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Community.TagCloudRequestData">
            <summary>
            Data structure used for requesting TagClouds from the Tag Api.
            </summary>
            <remarks>
            Default values:
            LanguageId = 1033
            PageSize = 50
            ObjectType = EkEnumeration.CMSObjectTypes.User
            OrderBy = TagCloudOrderBy.Text
            OrderAscending = false
            ObjectType = EkEnumeration.CMSObjectTypes.User
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Community.TagCloudRequestData.SetDefaultValues">
            <summary>
            Sets the TagCloudRequestData object back to its default values.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Community.TagCloudRequestData.LanguageId">
            <summary>
            Language of tags to retrieve.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Community.TagCloudRequestData.PageSize">
            <summary>
            The number of results to return with each request.
            Used in coordination with PageIndex to "page" through results.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Community.TagCloudRequestData.PageIndex">
            <summary>
            The page number to retrieve.
            Used in coordination with Pagesize to "page" through results.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Community.TagCloudRequestData.TagTypes">
            <summary>
            The Tag Type to retrieve
            </summary>
        </member>
        <member name="P:Ektron.Cms.Community.TagCloudRequestData.OrderBy">
            <summary>
            The order in which results should be sorted.  Used in conjunction with OrderAscending
            </summary>
        </member>
        <member name="P:Ektron.Cms.Community.TagCloudRequestData.OrderAscending">
            <summary>
            The order in which OrderBy should be sorted.  a true value means to order the results ascending; false means descending.
            For example, by default OrderBy = TaggedCount and OrderAscending = false.  This returns results order by taggedCount descending.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Community.TagCloudRequestData.OrderByDirection">
            <summary>
            The order in which OrderBy should be sorted.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Community.TagCloudRequestData.ObjectType">
            <summary>
            The type of CMS Object Type to build the cloud for.
            </summary>
        </member>
        <member name="T:Ektron.Cms.TagTypes">
            <summary>
            Defines the tag type.
            NOTE: this is a binary OR'd field...each must be a power of 2!!!
            </summary>
        </member>
        <member name="F:Ektron.Cms.TagTypes.All">
            <summary>
            Represents all Tags.
            </summary>
        </member>
        <member name="F:Ektron.Cms.TagTypes.UserDefault">
            <summary>
            Represents a default tag on User objects.
            </summary>
        </member>
        <member name="F:Ektron.Cms.TagTypes.GroupDefault">
            <summary>
            Represents a default tag on Group objects.
            </summary>
        </member>
        <member name="F:Ektron.Cms.TagTypes.LibraryDefault">
            <summary>
            Represents a default tag on Library objects.
            </summary>
        </member>
        <member name="F:Ektron.Cms.TagTypes.ContentDefault">
            <summary>
            Represents a default tag on Content objects.
            </summary>
        </member>
        <member name="T:Ektron.Cms.TagData">
            <summary>
            Data class for Tag objects.
            </summary>
        </member>
        <member name="M:Ektron.Cms.TagData.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="text">The Tags actual text.</param>
        </member>
        <member name="M:Ektron.Cms.TagData.#ctor(System.String,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="text">The Tags actual text.</param>
            <param name="languageId">Language of tag</param>
        </member>
        <member name="M:Ektron.Cms.TagData.#ctor(System.String,System.Int32,System.Int64)">
            <summary>
            constructor
            </summary>
            <param name="text">The Tags actual text.</param>
            <param name="languageId">Language of tag</param>
            <param name="id">Id of the tag.  Should only be set for existing tags.  New tags will be given an id when they are saved.</param>
        </member>
        <member name="P:Ektron.Cms.TagData.Id">
            <summary>
            Id of Tag. Should only be set for existing tags. New tags will be given an id when they are saved.
            </summary>
        </member>
        <member name="P:Ektron.Cms.TagData.LanguageId">
            <summary>
            Language of tag
            </summary>
        </member>
        <member name="P:Ektron.Cms.TagData.Text">
            <summary>
            The Tags actual text.
            </summary>
        </member>
        <member name="P:Ektron.Cms.TagData.Type">
            <summary>
            The type of tag.
            </summary>
        </member>
        <member name="P:Ektron.Cms.TagData.TotalUsedCount">
            <summary>
            returns the total number of times this tag has been used on an object.
            </summary>
        </member>
        <member name="T:Ektron.Cms.TagRequestData">
            <summary>
            Data structure used for requesting tags from the Tag Api.
            Default Ordering is TaggedCount, Descending (OrderAscending = false)
            </summary>
            <remarks>
            Default values:
            LanguageId = 1033
            PageSize = 0  (return all)
            PageIndex = 1
            ObjectType = EkEnumeration.CMSObjectTypes.User
            OrderBy = TagCloudOrderBy.TaggedCount
            OrderAscending = false
            </remarks>
        </member>
        <member name="M:Ektron.Cms.TagRequestData.SetDefaultValues">
            <summary>
            Sets the TagCloudRequestData object back to its default values.
            </summary>
        </member>
        <member name="P:Ektron.Cms.TagRequestData.LanguageId">
            <summary>
            Language of tags to retrieve.
            </summary>
        </member>
        <member name="P:Ektron.Cms.TagRequestData.PageSize">
            <summary>
            The number of results to return with each request.
            Used in coordination with PageIndex to "page" through results.
            </summary>
        </member>
        <member name="P:Ektron.Cms.TagRequestData.PageIndex">
            <summary>
            The page number to retrieve.
            Used in coordination with Pagesize to "page" through results.
            </summary>
        </member>
        <member name="P:Ektron.Cms.TagRequestData.TagTypes">
            <summary>
            The Tag Type to retrieve
            </summary>
        </member>
        <member name="P:Ektron.Cms.TagRequestData.OrderBy">
            <summary>
            The order in which results should be sorted.  Used in conjunction with OrderAscending
            </summary>
        </member>
        <member name="P:Ektron.Cms.TagRequestData.OrderAscending">
            <summary>
            The order in which OrderBy should be sorted.  a true value means to order the results ascending; false means descending.
            For example, by default OrderBy = TaggedCount and OrderAscending = false.  This returns results order by taggedCount descending.
            </summary>
        </member>
        <member name="P:Ektron.Cms.TagRequestData.OrderByDirection">
            <summary>
            The order in which OrderBy should be sorted.
            </summary>
        </member>
        <member name="T:Ektron.Cms.TagOrderBy">
            <summary>
            Enum representing properties to order a tag cloud by.  The default ordering is by tag count.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Messaging.MessageFormatting.MessageTemplateData.GetTokenList">
            <summary>
            Returns a list of the tokens supported by this formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Messaging.MessageFormatting.WebEventMessageData.GetTokenList">
            <summary>
            Returns a list of the tokens supported by this formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.DiscussionTopic.CreatedByUserID">
            <summary>
            Gets or sets the ID of the user who created the Topic.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.DiscussionTopic.CreatedbyUserName">
            <summary>
            Gets or sets the username of the person who created the Topic.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.DiscussionTopic.Views">
            <summary>
            Gets or sets how many times a Topic has been viewed.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.DiscussionTopic.Priority">
            <summary>
            Gets or set the priority of the Topic. Choices are:
              * <b>Normal</b> - Topics with this priority follow Announcements and Sticky topics. The Normal icon (two users) next to the topic indicates its priority.
              * <b>Sticky</b> - topic appears near the top of the list, just below the announcements. If a list has more than one sticky topic, they are sorted by date with most recent on the top. The Sticky icon (an envelope with an up arrow) indicates its priority to the left of the Topic's title.
              * <b>Announcement</b> - topic always appears at the top of the list. If a list has more than one announcement, they are sorted by date with most recent on the top. The Announcement icon (an envelope) indicates its priority to the left of the Topic's title.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.DiscussionTopic.LastPostedDate">
            <summary>
            Gets or sets the date of the most recently posted topic.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.DiscussionTopic.LastMessageID">
            <summary>
            
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.DiscussionTopic.Replies">
            <summary>
            Gets or sets the quantity of replies to a Topic.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.DiscussionTopic.StartingMessage">
            <summary>
            
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.DiscussionTopic.AverageRating">
            <summary>
            Gets or sets the average rating for a Topic.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.DiscussionTopic.LockTopic">
            <summary>
            Gets or sets whether to prevent all posting to this Discussion Topic. You can do this 
            temporarily or permanently. If a Board is locked, only Administrator user group members can
            create, edit or delete posts. 
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Ektron.Cms.FormData">
            <summary>
            Describes a form design.<para></para>
            Declaration Example:<para></para>
            <c>Dim formItem As Ektron.Cms.FormData</c>
            <example>
            <code>
            Dim formApi As New Ektron.Cms.Content.Form
            Dim formItem As Ektron.Cms.FormData
            formItem = formApi.GetForm(CInt(2))
            </code>
            </example>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.FormData.Description">
            <summary>
            Gets or sets a description of the form. The description must be 255 characters or less. 
            </summary>
            <value></value>
            <remarks>
            The string should be plain text. HTML tags should not be used.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.FormData.StoreDataTo">
            <summary>
            Specifies how the data should be processed. Valid values include:
              * <b>"db"</b>     submitted data should be stored in the database.
              * <b>"email"</b>  submitted data should be included in an email sent to the configured address(es). 
              * <b>"both"</b>   submitted data should stored in the database AND sent in an email.
            </summary>
            <value></value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Ektron.Cms.FormData.Autofill">
            <summary>
            Specifies whether the form data should be automatically filled if the user is known 
            and has previously entered data for this form.
            </summary>
            <value></value>
            <returns>True if form data should be automatically filled. False if the form should always be blank.</returns>
            <remarks>Requires that data be stored in the database.</remarks>
        </member>
        <member name="P:Ektron.Cms.FormData.MailTo">
            <summary>
            Gets or sets the email address(es) to send an email to when form data is submitted. 
            Multiple email addresses should be separated by semicolons (";").
            </summary>
            <value></value>
            <remarks>
            Applies only when StoreDataTo is "email" or "both".
            </remarks>
        </member>
        <member name="P:Ektron.Cms.FormData.MailFrom">
            <summary>
            Gets or sets the email address assigned as the sender when email is sent upon
            submittal of form data.
            </summary>
            <value></value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Ektron.Cms.FormData.MailSubject">
            <summary>
            Gets or sets the subject of the email sent when form data is submitted.
            Maximum length is 128 characters.
            </summary>
            <value></value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Ektron.Cms.FormData.MailPreamble">
            <summary>
            Gets or sets the text that precedes the submitted data in the body of the email 
            sent when form data is submitted. Maximum length is 128 characters.
            </summary>
            <value></value>
            <remarks>
            The string should be plain text. HTML tags should not be used.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.FormData.MailCc">
            <summary>
            Gets or sets the email address(es) to copy an email to when form data is submitted.
            Multiple email addresses should be separated by semicolons (";").
            </summary>
            <value></value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Ektron.Cms.FormData.SendXmlPacket">
            <summary>
            Gets or sets whether the submitted form data should be
            emailed as well-formed XML data.
              * <b>True</b> - formats the data by making each field name a tag around each value. 
              * <b>False</b> - sends the data without consideration whether it is well-formed XML.
            </summary>
            <value></value>
            <remarks>
            The XML structure of the form data submitted is:
            <pre>
            &lt;cmsMail&gt;
                  &lt;FormTitle&gt;This is the Title&lt;/FormTitle&gt;
                  &lt;FormDescription&gt;This is the description.&lt;/FormDescription&gt;
                  &lt;date&gt;7/11/2005 5:24:58 PM&lt;/date&gt;
                  &lt;MailTo&gt;&lt;/MailTo&gt;
                  &lt;MailFrom&gt;&lt;/MailFrom&gt;
                  &lt;MailCc&gt;&lt;/MailCc&gt;
                  &lt;MailSubject&gt;&lt;/MailSubject&gt;
                  &lt;MailPreamble&gt;&lt;/MailPreamble&gt;
                  &lt;Data&gt;
                     &lt;Field1&gt;Value of Field 1&lt;/Field1&gt;
                     &lt;Field2&gt;Value of Field 2&lt;/Field2&gt;
                     &lt;Field3&gt;Value of Field 3&lt;/Field3&gt;
                  &lt;/Data&gt;
            &lt;/cmsMail&gt;
            </pre>
            <b>Note:</b> The &lt;date&gt; is NOT ISO 8601. It's format is
            dependent on the web server. 
            </remarks>                                                                   
        </member>
        <member name="P:Ektron.Cms.FormData.Validation">
            <summary>
            Gets or sets the form's validation information as an array of FormValidationData.
            </summary>
            <value></value>
            <returns>Ektron.Cms.FormValidationData()</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.FormData.PollRevision">
            <summary>
            Gets or sets the revision number of the poll as a string.
            </summary>
            <value></value>
            <returns>string</returns>
            <remarks>It is used in the browser cookie when users load the poll on a web page.</remarks>
        </member>
        <member name="P:Ektron.Cms.DiscussionBoard.Categories">
            <summary> 
            Gets or sets the categories for a discussion board using the DiscussionCategory data class. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionBoard.Forums">
            <summary> 
            Gets or sets Forum information for the Discussion Board using the DiscussionForum data class. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionBoard.IPBanned">
            <summary> 
            Gets or sets whether an IP is restricted from posting on the Discussion Board. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionBoard.Title">
            <summary> 
            Gets or sets the Title of the Discussion Board. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionBoard.ModerateComments">
            <summary> 
            Gets or sets whether a Discussion Board's comments are moderated. 
            * <b>True</b> = Moderation is on 
            * <b>False</b> = Moderation is off 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionBoard.RequireAuthentication">
            <summary> 
            Gets or sets whether a site visitor must sign in before he can post to the Discussion Board. 
            * <b>True</b> = site visitor must sign in before he can post to a Discussion Board. 
            * <b>False</b> = site visitors can post to a Discussion Board without signing in. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionBoard.TermsAndConditions">
            <summary> 
            Gets or sets the Terms and Conditions for a Discussion Board. By entering text in this property 
            and saving, you activate the Terms and Conditions feature. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionBoard.AcceptedHTML">
            <summary> 
            Gets or sets the a comma-delimited list of HTML tags allowed in the editor. When blank, 
            all tags are available. Site visitors posting to a Forum can apply these HTML tags to 
            content when 
            * their Forum editor is JavaScript Editor, as set in the user profile 
            * the Forum server control that displays the editor has its JavascriptEditorHTMLMode property set to True 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionBoard.AcceptedExtensions">
            <summary> 
            Gets or sets a comma delimited list of file extensions that can be uploaded. You can enter the 
            extension with or without the period (.). Use a comma to separate each extension. The default 
            list is: bmp,conf,doc,gif,jpe,jpeg,jpeg,png 
            The list appears at the bottom of the editor screen to notify the person entering a post 
            which file types he can attach. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionBoard.MaxFileSize">
            <summary> 
            Gets or sets the maximum size of the file, in bytes, that a user can upload. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionBoard.LockBoard">
            <summary> 
            Gets or sets whether to prevent all posting to this Discussion Board. You can do this 
            temporarily or permanently. If a Board is locked, only Administrator user group members can 
            create, edit or delete posts. Those users can post from the Web site or the Workarea. 
            You can alternatively lock any Forum underneath this Board via the LockForum property in the 
            DiscussionForum data class. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.ForumName">
            <summary> 
            Gets or sets the name for the Forum. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.ForumTitle">
            <summary> 
            Gets or sets the title for the Forum. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.ModerateComments">
            <summary> 
            Gets or sets whether the comments for the Forum are moderated. Note: Setting this property to 
            True only affects the specified Forum, not the entire Discussion Board. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.LockForum">
            <summary> 
            Gets or sets whether to prevent all posting to this Forum. You can do this 
            temporarily or permanently. If a Forum is locked, only Administrator user group members can 
            create, edit or delete posts. 
            You can alternatively lock the entire Discussion Board containing this Forum via the LockBoard 
            property in the DiscussionBoard data class. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.CategoryID">
            <summary> 
            Gets or sets the ID of the taxonomy category associated with the Forum. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.CategoryName">
            <summary> 
            The name of the taxonomy category associated with the Forum. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.SortOrder">
            <summary> 
            Gets the sort order for the Forum. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.LastPosted">
            <summary> 
            Gets or sets the time and date of the most recently added post. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.LastTopicID">
            <summary> 
            Gets or sets the ID of the most recently added topic. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.LastMessageID">
            <summary> 
            
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.LastUserID">
            <summary> 
            Gets or sets the ID of the user who added the latest post. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.LastUsername">
            <summary> 
            Gets or sets the username of user who added the latest post. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.NumberofPosts">
            <summary> 
            Gets or sets the number of posts for the forum. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.NumberofTopics">
            <summary> 
            Gets or sets the number of topics in a forum. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.BoardID">
            <summary> 
            Gets or sets the ID of the Discussion Board that contains this forum. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.DiscussionForum.Topics">
            <summary> 
            Gets or sets Topic information for the Forum using the DiscussionTopic data class. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="T:Ektron.Cms.Messaging.CmsMessageProperty">
            <summary>
            Enumeration of MessageData properties used for sorting and filtering.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Messaging.CmsMessageData">
            <summary>
            Data class representing a Message in the Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Messaging.CmsMessageData.Validate">
            <summary>
            Validates that the data object is in a valid state for persisting.
            </summary>
            <returns>Collection of ValidationResult messages if the object is not valid.</returns>
        </member>
        <member name="P:Ektron.Cms.Messaging.CmsMessageData.Title">
            <summary>
            Gets or Sets the Title of the Message.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Messaging.CmsMessageData.Subject">
            <summary>
            Gets or sets the Subject of the Message.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Messaging.CmsMessageData.HtmlBody">
            <summary>
            Gets or sets the Html Body of the Message.  Depending on the delivery mechanism of the message, either the TextBody or HtmlBody may be used.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Messaging.CmsMessageData.TextBody">
            <summary>
            Gets or sets the Html Body of the Message.  Depending on the delivery mechanism of the message, either the TextBody or HtmlBody may be used.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Messaging.CmsMessageData.MessageType">
            <summary> 
            Gets or sets the the message type of this message. 
            </summary> 
            <value></value> 
            <returns></returns> 
            <remarks></remarks> 
        </member>
        <member name="P:Ektron.Cms.Messaging.CmsMessageData.IsDefaultMessage">
            <summary>
            Gets or sets the IsDefault flag for this message.  If true, this message is the defualt used for the MessageType.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Messaging.CmsMessageData.SiteId">
            <summary>
            Gets or sets the Id of the site that the message is associated with.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Messaging.CmsMessageDataCollection">
            <summary>
            Represents a collection of Language specific CMSMessageData objects for a given message Id.
            This collection is only meant to contain the translated messages for a given message Id and NOT multiple messages of various Ids.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Messaging.CmsMessageTypeProperty">
            <summary>
            Enumeration of CMsMessageTypeData properties available for sorting and filtering.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Messaging.CmsMessageTypeData">
            <summary>
            Data clas representing Message Types in the Cms.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Messaging.CmsMessageTypeData.Validate">
            <summary>
            Validates that the data object is in a valid state for persisting.
            </summary>
            <returns>Collection of ValidationResult messages if the object is not valid.</returns>
        </member>
        <member name="P:Ektron.Cms.Messaging.CmsMessageTypeData.Id">
            <summary>
            Gets or sets the ID of the message type.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Messaging.CmsMessageTypeData.Scope">
            <summary>
            Gets or sets the scope of the message type.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Messaging.CmsMessageTypeData.Name">
            <summary>
            Gets or sets the name of the message type.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Messaging.MessageFormatting.BlogCommentMessageData.GetTokenList">
            <summary>
            Returns a list of the tokens supported by this formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Messaging.MessageFormatting.ContentMessageData.GetTokenList">
            <summary>
            Returns a list of the tokens supported by this formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Messaging.MessageFormatting.CommunityGroupMessageData.GetTokenList">
            <summary>
            Returns a list of the tokens supported by this formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Messaging.MessageFormatting.DiscussionTopicReplyMessageData.GetTokenList">
            <summary>
            Returns a list of the tokens supported by this formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Messaging.MessageFormatting.DiscussionTopicMessageData.GetTokenList">
            <summary>
            Returns a list of the tokens supported by this formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Messaging.MessageFormatting.DirectObjectUserMessageData.GetTokenList">
            <summary>
            Returns a list of the tokens supported by this formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Messaging.MessageFormatting.MessageBoardMessageData.GetTokenList">
            <summary>
            Returns a list of the tokens supported by this formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Messaging.MessageFormatting.MicroMessageMessageData.GetTokenList">
            <summary>
            Returns a list of the tokens supported by this formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Messaging.MessageFormatting.SubjectUserMessageData.GetTokenList">
            <summary>
            Returns a list of the tokens supported by this formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Messaging.MessageFormatting.SystemMessageData.GetTokenList">
            <summary>
            Returns a list of the tokens supported by this formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.PrivateMessageProperty">
            <summary>
            Enumeration of PrivateMessageData properties than can be filtered on.
            </summary>
        </member>
        <member name="T:Ektron.Cms.PrivateMessageData">
            <summary>
            Data class representing a private message in CMS400.NET.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Notifications.INotificationAgentSetting.GetRegisteredAgentList">
            <summary>
            Retrieves a list of the Notification Agents registered in the web.config.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Notifications.INotificationPreference.SaveUserPreferences(System.Collections.Generic.List{Ektron.Cms.Notifications.NotificationPreferenceData})">
            <summary>
            Saves a set of notification preferences for a given user. 
            Preferences marked as added will be added and those marked as delelted will be removed.
            </summary>
            <param name="preferenceData">preference data to save.</param>
        </member>
        <member name="T:Ektron.Cms.Notifications.NotificationAgent">
            <summary>
            Base class for creating notification Agents.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Notifications.NotificationAgent.GetAgentSettings">
            <summary>
            Returns new instance of data class representing settings for this agent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Notifications.NotificationAgent.Send(Ektron.Cms.Notifications.NotificationMessageData)">
            <summary>
            Sends the suppled message to the supplied user.
            </summary>
            <param name="message">message to send.</param>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationAgent.IsValidationRequired">
            <summary>
            Returns true if this Agent requires settings be validated before being used.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Notifications.NotificationAgentProperty">
            <summary>
            ENumeration of NotificationAgentData properties that cna be used for sorting and filtering.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Notifications.NotificationAgentData">
            <summary>
            Data class representing Notification Agents registered in the CMS.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Notifications.NotificationAgentData.Validate">
            <summary>
            Validates that the data object is valid for saving.  Any errors are returns as ValidationResults.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationAgentData.Id">
            <summary>
            Get or sets the Id of the Notification Agent.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationAgentData.Name">
            <summary>
            Gets or sets the Name of the agent.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationAgentData.Description">
            <summary>
            Gets or sets the description of the agent.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationAgentData.TypeName">
            <summary>
            Gets or sets the Fully Qualified Name of the Agent type.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationAgentData.IsEnabled">
            <summary>
            Gets or sets the IsEnabled flag on the agent.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Notifications.NotificationSettingAttribute">
            <summary>
            Attribute used to decorate properties on NotificationAgentSettingsData that are settings used by Notification Agent.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationSettingAttribute.IsRequired">
            <summary>
            Indicates if this setting is required by the Agent.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Notifications.NotificationAgentSettingsData">
            <summary>
            Base class for defining settings for notification agents.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Notifications.NotificationAgentSettingsData.ReValidationRequired(Ektron.Cms.Notifications.NotificationAgentSettingsData)">
            <summary>
            When overridden, compares current SettingsData to supplied settingsData and returns true if the re-validation is required.
            </summary>
            <param name="originalSettings"></param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Notifications.NotificationMessageData">
            <summary>
            Data class representing a notification message to be sent.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationMessageData.HtmlMessage">
            <summary>
            Gets or sets the Html message of the notification.  This message would be used by providers that support Html based messages.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationMessageData.TextMessage">
            <summary>
            Gets or sets the text message of the notification.  This message would be used by providers that send messages in plain text and not Html.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationMessageData.Subject">
            <summary>
            Gets or sets the subject of the notification.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationMessageData.UserNotification">
            <summary>
            Gets or sets the UserNotificationData for this notifification.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationMessageData.Activity">
            <summary>
            Gets or sets the Activity associated with the notification.  This may be required for some notifications, but not all.
            The ActivityFeed, for one, provider requires it.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Notifications.UserNotificationDataProperty">
            <summary>
            Enumeration of NotificationUserDataP properties that can be used for querying.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Notifications.UserNotificationData">
            <summary>
            Data class representing a users notification preference and settings for a particular object.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.UserNotificationData.User">
            <summary>
            Gets or sets the user associated with this notification configuration.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.UserNotificationData.AgentName">
            <summary>
            Gets or sets the name of the agent to be used for this user's notification.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.UserNotificationData.AgentSettings">
            <summary>
            Gets or sets the user's settings for this notification provider.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Notifications.UserNotificationSettingProperty">
            <summary>
            Enum containing properties in NotificationUserSettingData that can be sorted and filtered.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Notifications.UserNotificationSettingData">
            <summary>
            Data class representing the user settings for a Notification provider.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Notifications.UserNotificationSettingData.Validate">
            <summary>
            Validates that the data object is valid for saving.  Any errors are returns as ValidationResults.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Notifications.UserNotificationSettingData.Id">
            <summary>
            Gets or sets the Id of these settings..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.UserNotificationSettingData.UserId">
            <summary>
            Gets or sets the user Id associated with these settings..
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.UserNotificationSettingData.AgentId">
            <summary>
            Gets or sets the ID of the Notification Agent associated with these settings.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.UserNotificationSettingData.VerificationCode">
            <summary>
            Gets or sets the verificationcode for this setting.  The user cannot recieve notifications on this 
            provider until they verify this code.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.UserNotificationSettingData.IsEnabled">
            <summary>
            Gets or sets the enabled setting for this user notification setting.  This notification setting cannot be used if its not enabled.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.UserNotificationSettingData.AgentSettings">
            <summary>
            Gets or sets the user's settings for this notification provider.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Notifications.NotificationPreferenceProperty">
            <summary>
            Enumeration of NotificationPreferenceData properties that can be used for querying.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Notifications.NotificationPreferenceData">
            <summary>
            Data class for dealing with user notification preferences for a user.  
            Each notification preference is a single preference that a user can set for a specific object or an object type.
            FOr example, User 10 wants to be notified via Agent Id 12 when Group Workspace (taxonomy) X has a document uploaded.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Notifications.NotificationPreferenceData.Validate">
            <summary>
            Validates the current data class is an appropriate state for saving.  Any errors are returned.  
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationPreferenceData.Id">
            <summary>
            gets or sets the Id for this notification preference.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationPreferenceData.UserId">
            <summary>
            gets or sets the User Id for this notification preference.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationPreferenceData.ActivityTypeId">
            <summary>
            Gets or sets the Activity Type for this notification preference. Built in CMS Activity are defined in EkEnumeration.ActivityType.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationPreferenceData.ObjectId">
            <summary>
            Gets or sets the Object Id for this notification preference.  The Object Id is related to the Object Type.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationPreferenceData.AgentId">
            <summary>
            Gets or sets the Provider Id for this notification preference.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationPreferenceData.ActionSourceId">
            <summary>
            Gets or sets the Object Id of the Notification Action Source for this notification preference.  
            If ActionSource = CommunityGroup, ActionSourceId would be the communityGroup Id you want to receive notifications from.  By default it is 0,
            which means all.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Notifications.NotificationPreferenceData.DataState">
            <summary>
            Gets or sets the preferences persistence State.  Used to determine the state of a preference when saving batches.
            </summary>
        </member>
        <member name="P:Ektron.Cms.CommunityGroupData.Tags">
            <summary>
            This property is readonly and any changes will not be saved.
            To add tags to a CommunityGroup, use the AddTagToCommunityGroup API.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.CommunityGroupSortRequest.SortBy">
            <summary>
            Gets or sets the property to sort the CommunityGroupData results by.
            </summary>
            <value></value>
            <returns></returns>
            <remarks>CommunityGroupSortBy.GroupName is the default value.</remarks>
        </member>
        <member name="P:Ektron.Cms.CommunityGroupSortRequest.SortOrder">
            <summary>
            Gets or sets the order in which the SortBy property should sort the CommunityGroupData results.
            </summary>
            <value></value>
            <returns></returns>
            <remarks>SortOrder.Ascending is the default value.</remarks>
        </member>
        <member name="P:Ektron.Cms.UserBaseData.Avatar">
            <summary>
            Gets or sets the user's avatar URL for a Threaded Discussion. This is for the UserData object. For Example,
            <c>www.example.com/images/smiley.gif</c>
            </summary>
            <value></value>
            <returns>The user's avatar URL for a Threaded Discussion.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserBaseData.Id">
            <summary>
            Gets or sets the integer ID of a user for the UserData object.
            </summary>
            <value></value>
            <returns>An integer representing the ID of a user.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserBaseData.Username">
            <summary>
            Gets or sets the username of a user for the UserData object.
            </summary>
            <value></value>
            <returns>The username of a user.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserBaseData.FirstName">
            <summary>
            Gets or sets the first name of a user for the UserData object.
            </summary>
            <value></value>
            <returns>The first name of a user.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserBaseData.LastName">
            <summary>
            Gets or sets the last name of a user for the UserData object.
            </summary>
            <value></value>
            <returns>The last name of a user.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserBaseData.DisplayUserName">
            <summary>
            Gets or sets the user's first name and last name for the UserData object. This is for the UserData object.
            </summary>
            <value></value>
            <returns>User's first name and last name.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserBaseData.Password">
            <summary>
            Gets or sets the user's password for the UserData object. Note: when updating a user, if 
            you do not wish to update the user's password, leave the UserData.Password property blank.
            </summary>
            <value></value>
            <returns>The user's password.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserBaseData.DisplayName">
            <summary>
            Gets or sets the user's display alias for the UserData object, used in the forums and other locations.
            </summary>
            <value></value>
            <returns>User's display alias, used in the forums and other locations.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserBaseData.Email">
            <summary>
            Gets or sets the user's email address for the UserData object.
            </summary>
            <value></value>
            <returns>The user's email address.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserBaseData.Address">
            <summary>
            Gets or sets the user's address for the UserData object.
            </summary>
            <value></value>
            <returns>The user's address.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserBaseData.Latitude">
            <summary>
            Gets or sets the user's address latidue for the UserData object.
            </summary>
            <value></value>
            <returns>The user's address latitude.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserBaseData.Longitude">
            <summary>
            Gets or sets the user's address longitude for the UserData object.
            </summary>
            <value></value>
            <returns>The user's address longitude.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.FormSubmittedData.FormDataID">
            <summary>
            Gets or sets the numeric ID for the form data.
            </summary>
            <value></value>
            <remarks>
            A value of -1 means the ID is undefined.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.FormSubmittedData.DateSubmitted">
            <summary>
            Gets or sets the date the data in the DataItems() array was submitted.
            </summary>
            <value></value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Ektron.Cms.FormSubmittedData.UserId">
            <summary>
            Gets or sets the user ID of the person who submitted the data. A value of 0 means anonymous.
            </summary>
            <value></value>
            <remarks>UserId and UserInfo are not kept synchronized in this class.</remarks>
        </member>
        <member name="P:Ektron.Cms.FormSubmittedData.UserInfo">
            <summary>
            Gets or sets the user information as an Ektron.Cms.UserData object.
            </summary>
            <value></value>
            <remarks>UserId and UserInfo are not kept synchronized in this class.</remarks>
        </member>
        <member name="P:Ektron.Cms.FormSubmittedData.DataItems">
            <summary>
            Gets or sets the array of the data associated with each field defined in the form.
            </summary>
            <value></value>
            <remarks>
            </remarks>
        </member>
        <member name="M:Ektron.Cms.Users.Authentication.UserAuthenticationDataProvider.GetUserData(System.String)">
            <summary>
            Returns a new UserData object prepopulated with any properties from the external authentication provider.
            </summary>
            <param name="userKey">The key of the user in the third party authenticator.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Users.Authentication.UserAuthenticationDataProvider.RequestInformation">
            <summary>
            Gets or sets the current EkRequestInformation
            </summary>
        </member>
        <member name="P:Ektron.Cms.Users.Authentication.UserAuthenticationDataProvider.IsHttps">
            <summary>
            Gets a flag indicating if current request is https.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Users.Authentication.UserAuthenticationDataProvider.AuthenticationTypeId">
            <summary>
            Gets the Authentication Type Associated with this UserData provider.
            </summary>
        </member>
        <member name="T:Ektron.Cms.UserData">
            <summary>
            A data object that contains the properties that make up a user. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.LoginAttempts">
            <summary>
            Gets an Int16 representing the number of times a user has attempted to login for the 
            UserData object. This number resets to 0 (zero) once a user successfully logs in.
            </summary>
            <value></value>
            <returns>Int16 representing the number of times a user has attempted to login. This 
            number resets to 0 (zero) once a user successfully logs in.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.DateCreated">
            <summary>
            Gets or sets the creation date of a user. This is for the UserData object.
            </summary>
            <value></value>
            <returns>The date the user was created.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.LastLoginDate">
            <summary>
            Gets or sets the last date a user logged into CMS400.NET. This is for the 
            UserData object. 
            </summary>
            <value></value>
            <returns>The last login date for a user.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.LastPasswordChangeDate">
            <summary>
            Gets or sets the last date a user changed their password.
            </summary>
            <value></value>
            <returns>The last login date for a user.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.AuthGuid">
            <summary>
            When using a non CMS authentication method, the guid of the user in that system.
            Example: Active Directory objectGuid
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.Signature">
            <summary>
            Gets or sets the user's signature for the UserData object, used in the forums and other locations.
            </summary>
            <value></value>
            <returns>The user's signature used in the forums and other locations.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.AcceptedTerms">
            <summary>
            Gets or set whether the user has accepted the Terms and Conditions associated with a Threaded Discussion.
            This is for the UserData object.
            </summary>
            <value></value>
            <returns>A boolean indicating whether the user has accepted the Terms and Conditions associated with a Threaded Discussion.
            * <b>True</b> = user has accepted Terms and Conditions.
            * <b>False</b> = user has not accepted Terms and Conditions.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.UserPreference">
            <summary>
            Gets or sets a user's preferences as UserPreferenceData for the UserData object. 
            </summary>
            <value></value>
            <returns>A user's preferences as UserPreferenceData.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.IsMemberShip">
            <summary>
            Gets or sets a boolean indicating whether the user is a Membership user or not. 
            This is for UserData object.
            </summary>
            <value></value>
            <returns>A boolean indicating whether the user is a Membership user.
            * <b>True</b> = user is a Membership user.
            * <b>False</b> = user is a CMS400.NET user.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.LanguageName">
            <summary>
            Gets or set the name of the user's language for the UserData object.
            </summary>
            <value></value>
            <returns>Name of the user's language.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.LanguageId">
            <summary>
            Gets or sets the integer ID of the language for the UserData object.
            </summary>
            <value></value>
            <returns>The integer ID of the language.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.AdUserName">
            <summary>
            Gets or sets the Active Directory user name for the UserData object.
            </summary>
            <value></value>
            <returns>The Active Directory user name.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.GroupId">
            <summary>
            <b>The GroupId property is no longer valid. To retrieve a list of groups this User belongs to use Ektron.Cms.API.User.GetAllUserGroups() function.</b><para></para>
            Gets or sets the numeruc ID (Long) of the group to which the user belongs. This is for the UserData object.
            </summary>
            <value></value>
            <returns>The group ID to which the user belongs.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.GroupName">
            <summary>
            <b>The GroupName property is no longer valid. To retrieve a list of groups this User belongs to use Ektron.Cms.API.User.GetAllUserGroups() function.</b><para></para>
            Gets or sets the name of the group to which the user belongs. This is for the UserData object.
            </summary>
            <value></value>
            <returns>The name of the group to which the user belongs.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.Rank">
            <summary>
            Gets or sets the user's rank for a Threaded Discussion for the UserData object.
            </summary>
            <value></value>
            <returns>The user's rank for a Threaded Discussion.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserData.AuthenticationTypeId">
            <summary>
            Gets or sets the ID of the authentication type this user uses to authenticate against for the CMS. 
            </summary>
        </member>
        <member name="P:Ektron.Cms.UserData.AuthenticationUserId">
            <summary>
            Gets or sets the id associated with this user in the third party authentication process.
            </summary>
        </member>
        <member name="T:Ektron.Cms.UserRequestData">
            <summary>
            A data object that contains request information for users.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserRequestData.Type">
            <summary>
            Differentiates request between Cms Users and Membership users.
            * <b>0</b> = to retrieve CMS400.NET users.
            * <b>1</b> = to retrieve Membership users.
            * <b>-1</b> = to retrieve all users.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserRequestData.Group">
            <summary>
            ID of User Group to retrieve users from. For example, set Group = 1 to retrieve only users that are members of group ID 1. 
            Leave as -1 to retrieve users from all groups.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserRequestData.RequiredFlag">
            <summary>
            Determines whether or not to retrieve deleted users.
            * <b>0</b> = to retrieve active users.
            * <b>1</b> = to retrieve deleted users.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserRequestData.OrderBy">
            <summary>
            Sets the column by which the resultset is ordered. Possible values include:
            * <b>user_id</b>
            * <b>user_name</b>
            * <b>first_name</b>
            * <b>last_name</b>
            * <b>language</b>
            * <b>email_address1</b>
            The default sort is <b>last_name</b>.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserRequestData.SearchText">
            <summary>
            Possible search rules to apply to results using SQL syntax. For example, last_name = 'Jones'. 
            Possible columns include:
            * <b>user_id</b>
            * <b>user_name</b>
            * <b>first_name</b>
            * <b>last_name</b>
            * <b>language</b>
            * <b>email_address1</b>
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.UserRequestData.OrderDirection">
            <summary>
            Sets the order by which to sort the OrderBy column. Possible values are:
            * <b>ASC</b>
            * <b>DESC</b> 
            <b>ASC</b> is the default value.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Ektron.Cms.CommunityUserData">
            <summary>
            UserData object plus Community related properties.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ektron.Cms.CommunityUserData.Tags">
             <summary>
             Gets a Comma delimitted list of tags applied to the user.
             Editing this list does not affect tags on user. Tags must be added to User though the Tag API.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Commerce.CountryStrategy">
            <summary>
            Base class for handling Country Strategy events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CountryStrategy.OnCanDelete(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called as part of Country.CanDelete.  It should return true if deleting the country is possible.  
            If delete should nopt be allowed, it should return false and append an appropriate message to the messages parameter.
            </summary>
            <param name="countryId">Id of country to be deleted</param>
            <param name="result">ValidationResult to be populated with ValidationErrors if delete should not be allowed.</param>
            <param name="args">Event arguments</param>
            <returns>Returns true if the country can be deleted.</returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CountryStrategy.OnDelete(System.Int32,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called as part of Country.Delete.
            </summary>
            <param name="countryId">Id of country being deleted</param>
            <param name="args">Event Arguments</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Commerce.RegionStrategy">
            <summary>
            Base class for handling Region Strategy events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.RegionStrategy.OnCanDelete(System.Int64,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called as part of Region.CanDelete.  It should return true if deleting the Region is possible.  
            If delete should nopt be allowed, it should return false and append an appropriate message to the messages parameter.
            </summary>
            <param name="regionId">Id of Region to be deleted</param>
            <param name="result">ValidationResult to be populated with ValidationErrors if delete should not be allowed.</param>
            <param name="args">Event arguments</param>
            <returns>Returns true if the Region can be deleted.</returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.RegionStrategy.OnDelete(System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called as part of Region.Delete.
            </summary>
            <param name="regionId">Id of Region being deleted</param>
            <param name="args">Event Arguments</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.CommunityGroupStrategy.OnAdd(Ektron.Cms.CommunityGroupData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after a community group is added.
            </summary>
            <param name="groupData">Added community group data.</param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.CommunityGroupStrategy.OnUpdate(Ektron.Cms.CommunityGroupData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after a community group is updated.
            </summary>
            <param name="groupData">Updated community group data.</param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.CommunityGroupStrategy.OnDelete(System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after a community group is deleted.
            </summary>
            <param name="id">ID of community group that was deleted.</param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.CommunityGroupStrategy.OnAfterUserAdd(System.Int64,System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after a user is added to a community group.
            </summary>
            <param name="CommunityGroupId">ID of community group user was added to.</param>
            <param name="userId">ID of user added to community group.</param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.CommunityGroupStrategy.OnAfterUserDelete(System.Int64,System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after a user is removed from a community group.
            </summary>
            <param name="CommunityGroupId">ID of community group user was removed from.</param>
            <param name="userId">ID of user removed from community group.</param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.UserStrategy.OnBeforeLogin(Ektron.Cms.UserData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called before a user is logged into the cms.
            </summary>
            <param name="userData">User Data representing user logging in.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.UserStrategy.OnAfterLogin(Ektron.Cms.UserData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after a user is logged into the cms.
            </summary>
            <param name="userData">User Data representing user that has logged in.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.UserStrategy.OnAfterAddColleague(System.Int64,System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after two users become colleagues.  There is no significance to the ordering of the users.
            </summary>
            <param name="userOneId">Id of the the first user in the colleague connection.</param>
            <param name="userTwoId">Id of the the second user in the colleague connection.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.WebEventStrategy.OnBeforeAdd(Ektron.Cms.Common.Calendar.WebEventData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called before a taxonomy node is added.
            </summary>
            <param name="taxonomyData">TaxonomyData to be added.</param>
            <param name="eventArgs">Event arguments for event.</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Content.BlogStrategy">
            <summary>
            Base class for handling Region Strategy events.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Commerce.BasketStrategy">
            <summary>
            Base class for handling Basket Strategy events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.BasketStrategy.OnAfterBasketCreate(Ektron.Cms.Commerce.BasketData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after a basket is created.
            </summary>
            <param name="basketData">BasketData to be created.</param>
            <param name="eventArgs">Event arguments for event.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.BasketStrategy.OnAfterBasketSave(Ektron.Cms.Commerce.BasketData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after a basket is saved.
            </summary>
            <param name="basketData">BasketData that has be saved.</param>
            <param name="eventArgs">Event arguments for event.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.BasketStrategy.OnBeforeBasketDelete(System.Int64,Ektron.Cms.Extensibility.CancellableEventArgs)">
            <summary>
            This method is called before a basket is deleted.
            </summary>
            <param name="basketId">Id of basket that will be deleted.</param>
            <param name="eventArgs">Event arguments for event.  Set IsCancelled equal to true to cancel the deletion.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.BasketStrategy.OnAfterBasketDelete(System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after a basket is deleted.
            </summary>
            <param name="basketId">Id of Basket that has been deleted.</param>
            <param name="eventArgs">Event arguments for event.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.BasketStrategy.OnBeforeItemAdded(Ektron.Cms.Extensibility.Commerce.BasketItemEventArgs)">
            <summary>
            This method is called before an item is added to a basket.
            </summary>
            <param name="eventArgs">Event arguments for event.  Set IsCancelled equal to true to cancel the item add.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.BasketStrategy.OnAfterItemAdded(Ektron.Cms.Extensibility.Commerce.BasketItemEventArgs)">
            <summary>
            This method is called after an item is added to a basket..
            </summary>
            <param name="eventArgs">Event arguments for event.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.BasketStrategy.OnBeforeKitUpdated(Ektron.Cms.Commerce.KitConfigData,Ektron.Cms.Extensibility.Commerce.BasketItemEventArgs)">
            <summary>
            This method is called before a kit configuration is updated.
            </summary>
            <param name="eventArgs">Event arguments for event.  Set IsCancelled equal to true to cancel update.</param>
            <param name="currentKitConfiguration">The Current Kit Configuration before the update.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.BasketStrategy.OnAfterKitUpdated(Ektron.Cms.Extensibility.Commerce.BasketItemEventArgs)">
            <summary>
            This method is called after a kit configuration is updated.
            </summary>
            <param name="eventArgs">Event arguments for event.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.BasketStrategy.OnBeforeItemRemoved(System.Int64,Ektron.Cms.Extensibility.CancellableEventArgs)">
            <summary>
            This method is called before an item is removed from a basket.
            </summary>
            <param name="basketItemId">Id of basketItem to be removed.</param>
            <param name="eventArgs">Event arguments for event.  Set IsCancelled equal to true to cancel the Item removal.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.BasketStrategy.OnAfterItemRemoved(System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after an item is removed from a basket..
            </summary>
            <param name="basketItemId">Id of basket item removed.</param>
            <param name="eventArgs">Event arguments for event.</param>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Commerce.BasketItemEventArgs">
            <summary>
            Event arguments for basket item events.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Extensibility.CancellableEventArgs">
            <summary>
            Event argument class used for cancellable cms events.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Extensibility.CmsEventArgs">
            <summary>
            Event argument class used for CMS events.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Extensibility.CmsEventArgs.ObjectId">
            <summary>
            Gets or sets the Id of the object that the event was raised for.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Extensibility.CmsEventArgs.RequestInformation">
            <summary>
            Gets or sets the current requestinformation being used.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Extensibility.CmsEventArgs.Transaction">
            <summary>
            gets or sets the current transaction being used.  Will be null if not applicable.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Extensibility.CancellableEventArgs.IsCancelled">
            <summary>
            Gets or sets the is cancelled flag indicating whether or not the action raising the event should be cancelled.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Extensibility.CancellableEventArgs.CancellationMessage">
            <summary>
            Gets or sets the message indicating the reason for the action cancellation.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Extensibility.Commerce.BasketItemEventArgs.ProductId">
            <summary>
            Gets or sets Id of product associated with basket item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Extensibility.Commerce.BasketItemEventArgs.VariantId">
            <summary>
            Gets or sets Id of variant associated with basket item.  Will be 0 if basket item is not a variant.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Extensibility.Commerce.BasketItemEventArgs.KitConfiguration">
            <summary>
            Gets or sets kit configuration associated with basket item.  Will be null if basket item is not a kit configuration.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Extensibility.Commerce.BasketItemEventArgs.BasketItemId">
            <summary>
            Gets or sets Id of basket item.  Will be 0 if basket item has not been saved yet.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Commerce.CatalogEntryStrategy">
            <summary>
            Base class for handling CatalogEntry Strategy events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CatalogEntryStrategy.OnBeforeAdd(Ektron.Cms.Commerce.EntryData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called before a CatalogEntry is added.
            </summary>
            <param name="entryData">catalogEntryData to be added.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CatalogEntryStrategy.OnAfterAdd(Ektron.Cms.Commerce.EntryData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after a CatalogEntry is added.
            </summary>
            <param name="entryData">catalogEntryData that was added.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CatalogEntryStrategy.OnBeforeUpdate(Ektron.Cms.Commerce.EntryData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called before a CatalogEntry is updated.
            </summary>
            <param name="entryData">catalogEntryData to be added.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CatalogEntryStrategy.OnAfterUpdate(Ektron.Cms.Commerce.EntryData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after a CatalogEntry is updated.
            </summary>
            <param name="entryData">catalogEntryData that was updated.</param>
            <param name="args">Event Arguments</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CatalogEntryStrategy.OnBeforeDelete(System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called before a CatalogEntry has been deleted.
            </summary>
            <param name="entryId">Id of CatalogEntry to be deleted</param>
            <param name="args">Event Arguments</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CatalogEntryStrategy.OnAfterDelete(System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called afater a CatalogEntry has been deleted.
            </summary>
            <param name="entryId">Id of CatalogEntry being deleted</param>
            <param name="args">Event Arguments</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CatalogEntryStrategy.OnAfterCheckIn(System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called afater a CatalogEntry has been checkedIn.
            </summary>
            <param name="entryId">Id of CatalogEntry being checked in.</param>
            <param name="args">Event Arguments</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CatalogEntryStrategy.OnAfterPublish(System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after a CatalogEntry is published.
            </summary>
            <param name="entryId">Id of Entry that was published.</param>
            <param name="args">Event Arguments</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Commerce.BasketCalculatorStrategy">
            <summary>
            Base class for handling BasketCalculator Strategy events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.BasketCalculatorStrategy.OnBeforeCalculate(Ektron.Cms.Commerce.BasketCalculatorData,Ektron.Cms.Extensibility.CancellableEventArgs)">
            <summary>
            When implemented, this method is called before the Basket is calculated.
            </summary>
            <param name="basketCalculatorData">BasketCalculatorData to be calculated.</param>
            <param name="eventArgs">Event arguments for event.  Set IsCancelled equal to true to cancel the calculation.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.BasketCalculatorStrategy.OnAfterCalculate(Ektron.Cms.Commerce.BasketCalculatorData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after the basket is calculated.
            </summary>
            <param name="basketCalculatorData">basketCalculatorData that has been calculated.</param>
            <param name="eventArgs">Event arguments for event.</param>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Commerce.CustomerStrategy">
            <summary>
            Base class for handling Customer Strategy events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CustomerStrategy.OnAfterAdd(Ektron.Cms.Commerce.CustomerData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after a customer is added.
            </summary>
            <param name="customerData">customerData that was added.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CustomerStrategy.OnAfterUpdate(Ektron.Cms.Commerce.CustomerData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after a customer is updated.
            </summary>
            <param name="customerData">customerData that was updated.</param>
            <param name="args">Event Arguments</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CustomerStrategy.OnAfterDelete(System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called afater a custoemr has been deleted.
            </summary>
            <param name="customerId">Id of Customer being deleted</param>
            <param name="args">Event Arguments</param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Commerce.OrderStrategy">
            <summary>
            Base class for handling Order Strategy events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.OrderStrategy.OnBeforeOrderPlaced(Ektron.Cms.Commerce.BasketData,Ektron.Cms.Extensibility.CancellableEventArgs)">
            <summary>
            This method is called before an order is placed
            </summary>
            <param name="basketData">BasketData to be converted to an order.</param>
            <param name="eventArgs">Event arguments for event.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.OrderStrategy.OnAfterOrderPlaced(Ektron.Cms.Commerce.OrderData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after an order has been placed.
            </summary>
            <param name="orderData">OrderData that has been placed.</param>
            <param name="eventArgs">Event arguments for event.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.OrderStrategy.OnAfterStatusChange(Ektron.Cms.Commerce.OrderData,Ektron.Cms.Common.EkEnumeration.OrderStatus,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after an order's status has been changed.
            </summary>
            <param name="orderData">Order being updated.</param>
            <param name="eventArgs">Event arguments for event.</param>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Commerce.TaxCalculatorStrategy">
            <summary>
            Base class for handling TaxCalculator Strategy events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.TaxCalculatorStrategy.OnBeforeCalculate(Ektron.Cms.Commerce.BasketCalculatorData,Ektron.Cms.Extensibility.CancellableEventArgs)">
            <summary>
            When implemented, this method is called before the tax costs are calculated.
            </summary>
            <param name="basketData">BasketData to be calculated.</param>
            <param name="eventArgs">Event arguments for event.  Set IsCancelled equal to true to cancel the calculation.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.TaxCalculatorStrategy.OnAfterCalculate(Ektron.Cms.Commerce.BasketCalculatorData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after the tax costs are calculated.
            </summary>
            <param name="basketData">BasketData that has been calculated.</param>
            <param name="eventArgs">Event arguments for event.</param>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Commerce.CouponCalculatorStrategy">
            <summary>
            Base class for handling CouponCalculator Strategy events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CouponCalculatorStrategy.OnBeforeCalculate(Ektron.Cms.Commerce.BasketCalculatorData,System.Collections.Generic.List{Ektron.Cms.Commerce.CouponData},Ektron.Cms.Extensibility.CancellableEventArgs)">
            <summary>
            When implemented, this method is called before the basket coupons are calculated.
            </summary>
            <param name="basketData">BasketDaat to be calculated.</param>
            <param name="coupons">Coupons applied to basket.</param>
            <param name="eventArgs">Event arguments for event.  Set IsCancelled equal to true to cancel the calculation.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.CouponCalculatorStrategy.OnAfterCalculate(Ektron.Cms.Commerce.BasketCalculatorData,System.Collections.Generic.List{Ektron.Cms.Commerce.CouponData},Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after the basket coupons are calculated.
            </summary>
            <param name="basketData">BasketData that has been calculated.</param>
            <param name="coupons">Coupons applied to basket.</param>
            <param name="eventArgs">Event arguments for event.</param>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Commerce.InventoryStrategy">
            <summary>
            Base class for handling Inventory Strategy events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.InventoryStrategy.OnBeforeInventorySave(Ektron.Cms.Commerce.InventoryData,Ektron.Cms.Extensibility.CancellableEventArgs)">
            <summary>
            This method is called before inventory is saved.  This method could be called before inventory is updated via the product or via an order.
            </summary>
            <param name="inventoryData">Inventory being saved.</param>
            <param name="eventArgs">cancellable event arguments for this action.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.InventoryStrategy.OnAfterInventorySave(Ektron.Cms.Commerce.InventoryData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called after inventory is saved.  This method could be called before inventory is updated via the product or via an order.
            </summary>
            <param name="inventoryData">Inventory being saved.</param>
            <param name="eventArgs">event arguments for this action.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.InventoryStrategy.OnInventoryReorderLevelReached(Ektron.Cms.Commerce.InventoryData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called when inventory has been decreased below the reorder threshhold.
            </summary>
            <param name="entryId">Id of catalog entry being affected.</param>
            <param name="inventoryData">Inventory data object for the catalog entry that reached reorder level.</param>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.InventoryStrategy.OnInventoryNowInStock(Ektron.Cms.Commerce.InventoryData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            This method is called when inventory has been added to a previously out of stock item.
            </summary>
            <param name="entryId">Id of catalog entry being affected.</param>
            <param name="inventoryData">Inventory data object for the catalog entry that now has stock.</param>
        </member>
        <member name="T:Ektron.Cms.Extensibility.Commerce.ShippingCalculatorStrategy">
            <summary>
            Base class for handling ShippingCalcualtor Strategy events.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.ShippingCalculatorStrategy.OnBeforeCalculate(Ektron.Cms.Commerce.BasketCalculatorData,Ektron.Cms.Commerce.ShippingMethodData,Ektron.Cms.Extensibility.CancellableEventArgs)">
            <summary>
            When implemented, this method is called before the shipping rates are calculated.
            </summary>
            <param name="basketData">BasketData to be calculated.</param>
            <param name="shippingMethod">Currently selelcted shipping method for basket.  May be null if no method has been selected yet.</param>
            <param name="eventArgs">Event arguments for event.  Set IsCancelled equal to true to cancel the calculation.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.Commerce.ShippingCalculatorStrategy.OnAfterCalculate(Ektron.Cms.Commerce.BasketCalculatorData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after the shipping rates are calculated.   This method can be used to modify Shipping rates after calculation.
            </summary>
            <param name="basketData">BasketData that has been calculated.</param>
            <param name="eventArgs">Event arguments for event.</param>
        </member>
        <member name="T:Ektron.Cms.Extensibility.TaxonomyStrategy">
            <summary>
            Base class for handling Taxonomy Strategy events.  To implement a strategy extension for taxonomy events, you must derive from ths class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Extensibility.TaxonomyStrategy.OnBeforeAdd(Ektron.Cms.TaxonomyData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called before a taxonomy node is added.
            </summary>
            <param name="taxonomyData">TaxonomyData to be added.</param>
            <param name="eventArgs">Event arguments for event.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.TaxonomyStrategy.OnAfterAdd(Ektron.Cms.TaxonomyData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after a taxonomy node is added.
            </summary>
            <param name="taxonomyData">TaxonomyData that was added.</param>
            <param name="eventArgs">Event arguments for event.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.TaxonomyStrategy.OnBeforeUpdate(Ektron.Cms.TaxonomyData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called before a taxonomy node is updated.
            </summary>
            <param name="taxonomyData">TaxonomyData to be updated.</param>
            <param name="eventArgs">Event arguments for event.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.TaxonomyStrategy.OnAfterUpdate(Ektron.Cms.TaxonomyData,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after a taxonomy node is updated.
            </summary>
            <param name="taxonomyData">TaxonomyData that was updated.</param>
            <param name="eventArgs">Event arguments for event.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.TaxonomyStrategy.OnBeforeDelete(System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called before a taxonomy node is deleted.
            </summary>
            <param name="id">Id of taxonomy to be deleted.</param>
            <param name="eventArgs">Event arguments for event.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.TaxonomyStrategy.OnAfterDelete(System.Int64,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after a taxonomy node is deleted.
            </summary>
            <param name="id">Id of taxonomy that was deleted.</param>
            <param name="eventArgs">Event arguments for event.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.TaxonomyStrategy.OnBeforeAssignItem(Ektron.Cms.TaxonomyRequest,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called before an item is added to a taxonomy node.
            </summary>
            <param name="request">Data object representing item to be added to taxonomy.</param>
            <param name="eventArgs">Event arguments for event.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Extensibility.TaxonomyStrategy.OnAfterAssignItem(Ektron.Cms.TaxonomyRequest,Ektron.Cms.Extensibility.CmsEventArgs)">
            <summary>
            When implemented, this method is called after an item is added to a taxonomy node.
            </summary>
            <param name="request">Data object representing item added to taxonomy.</param>
            <param name="eventArgs">Event arguments for event.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.ObjectFactory.GetMappingXml">
            <summary>
            Gets the default MappingXml and looks for any implementations overriden in web.config.
            Any overridden implementations are inserted into the default xml and returned.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
