<?xml version="1.0"?>
<doc>
<assembly>
<name>
Ektron.Cms.BusinessApi
</name>
</assembly>
<members>
<member name="M:WorldLingoService.ServiceApiService.#ctor">
	<remarks/>
</member><member name="E:WorldLingoService.ServiceApiService.translateCompleted">
	<remarks/>
</member><member name="M:WorldLingoService.ServiceApiService.translate(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:WorldLingoService.ServiceApiService.translateAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:WorldLingoService.ServiceApiService.translateAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:WorldLingoService.ServiceApiService.CancelAsync(System.Object)">
	<remarks/>
</member><member name="T:WorldLingoService.ServiceApiService">
	<remarks/>
</member><member name="P:WorldLingoService.TranslateResult.data">
	<remarks/>
</member><member name="P:WorldLingoService.TranslateResult.encoding">
	<remarks/>
</member><member name="P:WorldLingoService.TranslateResult.errorCode">
	<remarks/>
</member><member name="P:WorldLingoService.TranslateResult.jobNo">
	<remarks/>
</member><member name="P:WorldLingoService.TranslateResult.mimeType">
	<remarks/>
</member><member name="P:WorldLingoService.TranslateResult.quote">
	<remarks/>
</member><member name="P:WorldLingoService.TranslateResult.wordCount">
	<remarks/>
</member><member name="T:WorldLingoService.TranslateResult">
	<remarks/>
</member><member name="T:WorldLingoService.translateCompletedEventHandler">
	<remarks/>
</member><member name="P:WorldLingoService.translateCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:WorldLingoService.translateCompletedEventArgs">
	<remarks/>
</member><member name="M:Ektron.Cms.UserAPI.logInUser(System.String,System.String,System.String)">
	<summary>
 Used to log in the user.
 </summary>
	<param name="username">The system username.</param>
	<param name="Password">The system password.</param>
	<param name="ServerName">The system server name.</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.logInUser(System.String,System.String,System.String,System.String,Ektron.Cms.Common.EkEnumeration.AutoAddUserTypes)">
	<summary>
 Used to force log in the user and no password required.
 Note: When using Active Directory/LDAP, this method will log the user only after first successfull LDAP/AD User Login into CMS. 
 when using Active Directory, the ServerName and Protocol parameters are set to empty strings (""). 
 </summary>
	<param name="username">The system username.</param>
	<param name="ServerName">The system server name. When using Active Directory, this parameter needs to be an empty string "".</param>
	<param name="Domain">The user's domain, required only when users login using Active Directory. If your domain is <b>intra.example.com</b>, it is entered in the following format: <b>"DC=intra,DC=example,DC=com"</b>.</param>
	<param name="Protocol">Required only when using a secure login or when you are using any valid Active Directory protocols.</param>
	<param name="AutoAddType">The desired EkEnumeration.AutoAddUserTypes type</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks>Using this method may increase security risk</remarks>
</member><member name="M:Ektron.Cms.UserAPI.logInUser(System.String,System.String,System.String,System.String)">
	<summary>
 Used to log in the user.
 </summary>
	<param name="username">The system username.</param>
	<param name="Password">The system password.</param>
	<param name="ServerName">The system server name.</param>
	<param name="Domain">The user's domain, required only when users login using Active Directory.</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.logInUser(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Used to log in the user.
 </summary>
	<param name="username">The system username.</param>
	<param name="Password">The system password.</param>
	<param name="ServerName">The system server name.</param>
	<param name="Domain">The user's domain, required only when users login using Active Directory.</param>
	<param name="Protocol">Required only when using a secure login or when you are using any valid Active Directory protocols.</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.logInUser(System.String,System.String,System.String,System.String,System.String,Ektron.Cms.Common.EkEnumeration.AutoAddUserTypes)">
	<summary>
 Used to log in the user.
 </summary>
	<param name="username">The system username.</param>
	<param name="Password">The system password.</param>
	<param name="ServerName">The system server name.</param>
	<param name="Domain">The user's domain, required only when users login using Active Directory.</param>
	<param name="Protocol">Required only when using a secure login or when you are using any valid Active Directory protocols.</param>
	<param name="AutoAddType">The desired EkEnumeration.AutoAddUserTypes type</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.SetAuthenticationCookie(Ektron.Cms.UserData)">
	<summary>
 This method set the authentication cookie.
 </summary>
	<param name="userInfo">Returned value of the logInUser method.</param>
	<remarks>First you must call the logInUser method to login the user.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.SetAuthenticationCookie(Ektron.Cms.UserData,System.Int64)">
	<summary>
 This method set the authentication cookie.
 </summary>
	<param name="userInfo">Returned value of the logInUser method.</param>
	<param name="currencyId">The site currency to use.</param>
	<remarks>First you must call the logInUser method to login the user.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.SetAuthenticationCookie(Ektron.Cms.UserData,System.Int64,System.Int32)">
	<summary>
 This method set the authentication cookie.
 </summary>
	<param name="userInfo">Returned value of the logInUser method.</param>
	<param name="currencyId">The site currency to use.</param>
	<param name="languageId">The site language to use.</param>
	<remarks>First you must call the logInUser method to login the user.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.autologInUser(System.String,System.String,System.String,Ektron.Cms.Common.EkEnumeration.AutoAddUserTypes)">
	<summary>
	</summary>
	<param name="SAMusername"></param>
	<param name="domain"></param>
	<param name="ServerName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetUserGroupByName(System.String)">
	<summary>
 Loads a given group's details.
 </summary>
	<param name="name">The group's name.</param>
	<returns>Ektron.Cms.UserGroupData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetUserGroupById(System.Int64)">
	<summary>
 Loads a given group's details.
 </summary>
	<param name="Id">The group's ID.</param>
	<returns>Ektron.Cms.UserGroupData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetUserGroupByIdForFolderAdmin(System.Int64,System.Int64)">
	<summary>
 Returns all the groups data for the administrator.
 </summary>
	<param name="FolderId">Folder ID</param>
	<param name="Id">User ID</param>
	<returns>UserGroupData</returns>
	<remarks>User login with administrator privileges is required</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetCommunityUserById(System.Int64)">
	<summary>
 Loads the user details plus community properties for the given user.
 </summary>
	<param name="userId">The user ID.</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetCommunityUserById(System.Int64,System.Boolean)">
	<summary>
 Loads the user details plus community properties for the given user.
 </summary>
	<param name="userId">The user ID.</param>
	<param name="retrievePreferences">Loads preference only if required (true = load preferences as a part of user data).</param>
	<returns>Ektron.Cms.CommunityUserData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetUserById(System.Int64,System.Boolean,System.Boolean)">
	<summary>
 Loads the user details for the given user.
 </summary>
	<param name="Id">The user ID.</param>
	<param name="Preference">Loads preference only if required (true = load preferences as a part of user data).</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetNonVerifyUser(System.String,System.Boolean)">
	<summary>
 Loads the user details for a given user name
 </summary>
	<param name="username">The user name</param>
	<param name="Preference">Whether user preferences need to be returned (Required - Boolean)</param>
	<returns>Ektron.cms.UserData</returns>
</member><member name="M:Ektron.Cms.UserAPI.GetNonVerifyUser(System.String)">
	<summary>
 Loads the user details for a given user name
 </summary>
	<param name="username">The user name</param>
	<returns>Ektron.cms.UserData</returns>
</member><member name="M:Ektron.Cms.UserAPI.GetUserByIDForFolderAdmin(System.Int64,System.Int64,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="FolderId"></param>
	<param name="Id"></param>
	<param name="Preference"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetActiveUserById(System.Int64,System.Boolean)">
	<summary>
 Returns all of the user properties with or without preference.
 </summary>
	<param name="Id">The user's ID.</param>
	<param name="Preference">Preference is returned only if the value true, otherwise nothing is returned for preference.</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.UserObject(System.Int64)">
	<summary>
 Returns user data based on the user's ID. <p></p>
 This function is overloaded. See Also: UserObject (String)
 </summary>
	<param name="Id">The user's ID.</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.UserObject(System.String)">
	<summary>
 Returns user data based on the user's login or username.<p></p>
 This function is overloaded. See Also: UserObject (Integer)
 </summary>
	<param name="sUserName">User's login or username.</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetUserPreferenceById(System.Int64)">
	<summary>
 Loads the preferences for the given user.
 </summary>
	<param name="Id">The user's ID.</param>
	<returns>Ektron.Cms.UserPreferenceData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetAllUsersByFolderId(System.Int64,System.Int64)">
	<summary>
 Gets the User Group Data of all the allowed users in the folder specified.
 </summary>
	<param name="CallerID">The user ID that is logged on to the system.</param>
	<param name="FolderId">The ID of the folder.</param>
	<returns>Ektron.Cms.UserGroupData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetAllUserGroups(Ektron.Cms.Common.EkEnumeration.UserTypes,System.String,Ektron.Cms.PagingInfo@)">
	<summary>
 Loads all of the user groups from the system.<para></para>
 This function is overloaded. See Also: GetAllUserGroups (String)
 </summary>
	<param name="GroupType">GroupType\: 1 = Membership; 0 =
                         CMSUser</param>
	<param name="OrderBy">Arranges data in a specific order.
                       Possible values are "GroupName"
                       or "GroupID".</param>
	<param name="paging">A PagingInfo object, used to select obtain only a portion of the data to display at any one time.</param>
	<returns>An array of UserGroupData.</returns>
</member><member name="M:Ektron.Cms.UserAPI.GetAllUserGroups(Ektron.Cms.Common.EkEnumeration.UserTypes,System.String)">
	<summary>
 Loads all of the user groups from the system.<para></para>
 This function is overloaded. See Also: GetAllUserGroups (String)
 </summary>
	<param name="GroupType">GroupType\: 1 = Membership; 0 =
                         CMSUser</param>
	<param name="OrderBy">Arranges data in a specific order.
                       Possible values are "GroupName"
                       or "GroupID".</param>
	<returns>
 Ektron.Cms.UserGroupData()
 </returns>
	<remarks>
 User login with administrator privileges are required to
 perform this operation.
 </remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetAllUserGroups(System.String)">
	<summary>
 Loads all of the user groups from the system.<para></para>
 This function is overloaded. See Also: GetAllUserGroups (EkEnumeration.UserTypes String)
 </summary>
	<param name="OrderBy">Arranges data in a specific order.
                       Possible values are "GroupName"
                       or "GroupID".</param>
	<returns>
 Ektron.Cms.UserGroupData()
 </returns>
	<remarks>
 User login with administrator privileges are required to
 perform this operation.
 </remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetUsersForTask(System.Int64,System.Int64)">
	<summary>
 Loads the users that have permissions to the given content.
 </summary>
	<param name="CallerID">The user ID that is logged on to the system.</param>
	<param name="ContentID">The ID of the content. (Required)</param>
	<returns>Ektron.Cms.UserGroupData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetUsersByUserName(System.String,System.String)">
	<summary>
 \Returns an array of user group data based on the userName
 and userNameType.
 </summary>
	<param name="userNames">The user's name. (Required)</param>
	<param name="userNameTypes">The user type possible values
                             are "user" or
                             "membership user".</param>
	<returns>
 Ektron.Cms.UserGroupData()
 </returns>
	<remarks>
 User login with administrator privileges are required to
 perform this operation.
 </remarks>
</member><member name="M:Ektron.Cms.UserAPI.UpdateUser(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the user details.
 </summary>
	<param name="data">A collection of user data.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.UpdateUser(Ektron.Cms.UserData)">
	<summary>
 Updates the user details.  If you do not wish to update the user's password,
 leave the UserData.Password property blank.
 </summary>
	<param name="data">A UserData object of user data.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.UpdateUserPreferences(System.Int64,Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the given user’s preference data.
 </summary>
	<param name="Id">The user’s ID.</param>
	<param name="data">A collection of user preferences.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.UpdateADMapping(System.Int64,System.Object)">
	<summary>
 Updates the Active directory information into the CMS based on the user ID and user data.
 </summary>
	<param name="UserId">The user’s ID.</param>
	<param name="pagedata">Key, value pair for given user ID.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.MapCMSUserGroupToAD(System.Int64,System.String,System.String)">
	<summary>
 Updates the given CMS group corresponding to the Active Directory group.
 </summary>
	<param name="GroupId">CMS group ID.</param>
	<param name="GroupName">CMS group name.</param>
	<param name="Domain">The Active Directory domain.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetADMapping(System.Int64,System.String,System.Int32,System.Int32,System.Int32)">
	<summary>
 Loads the CMS and Active Directory name.
 </summary>
	<param name="CallerId">Who is calling this function.</param>
	<param name="MapType">Possible value is “userprop” (user properties).</param>
	<param name="Map">Ektron.Cms.Common.EkEnumeration.MapTypes (include, exclude and dontconsider are the possible values).</param>
	<param name="Exclude">Flag (0 – false, 1-true).</param>
	<param name="Editable">Flag(0-false,1-true).</param>
	<returns>Ektron.Cms.AdMappingData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetADStatus">
	<summary>
 Used to load required Synch, Desynch and relationship flags of the configured Active Directory.
 </summary>
	<returns>Ektron.Cms.AdSyncData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetDomains(System.Int32,System.Int32)">
	<summary>
 Loads a list of domains from Active Directory.
 </summary>
	<param name="ShowAll">flag(1 = show all).</param>
	<param name="CheckIntegration">Check whether CMS is configured to integrate Active Directory (1 = check otherwise resumed).</param>
	<returns>Ektron.Cms.DomainData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetCMSUsersToSync(System.Int32)">
	<summary>
 Loads all the CMS users that need to be synchronized with Active Directory.
 </summary>
	<param name="MaxReturn">The maximum number of users that should be displayed.</param>
	<returns>Ektron.Cms.UserData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetCMSGroupsToSync(System.Int32)">
	<summary>
 Loads all the CMS groups that need to be synchronized.
 </summary>
	<param name="MaxReturn">The maximum number of groups that should be displayed.</param>
	<returns>Ektron.Cms.GroupData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetCMSRelationshipsToSync(System.Int32)">
	<summary>
 Loads all the CMS relationships that need to be synchronized with Active Directory.
 </summary>
	<param name="MaxReturn">The maximum number of results that should be displayed.</param>
	<returns>Ektron.Cms.UserGroupData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.DeSynchUsers(System.Boolean)">
	<summary>
 Update the user with new user details.
 </summary>
	<param name="Flag">If true, update the user with new user information, otherwise none.</param>
	<returns>Ektron.Cms.AdDeSyncUserData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.DeSynchUserGroups(System.Boolean)">
	<summary>
 Updates the group with a new group name.
 </summary>
	<param name="Flag">If true, update the user group with the new group information, otherwise none.</param>
	<returns>Ektron.Cms.AdDeSyncGroupData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.SynchCMSUsersToAD(Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,System.Int32)">
	<summary>
 Synchronize the CMS user data to the Active Directory data.
 </summary>
	<param name="UserIds">A collection of user IDs.</param>
	<param name="UserNames">A collection of usernames.</param>
	<param name="Domains">A collection of domains.</param>
	<param name="Actions">A collection of actions corresponding to items added to the collection. The possible collection values are “delete” or “map”.</param>
	<param name="PullInfo">Retrieves the Active Directory information when the value is 1, otherwise none.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.SynchCMSGroupsToAD(Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection)">
	<summary>
 Synchronizes the CMS group data to the Active Directory group data.  This updates the CMS data with the corresponding to Active Directory changes.
 </summary>
	<param name="GroupIds">A collection of group IDs.</param>
	<param name="UserNames">A collection of usernames.</param>
	<param name="Domains">A collection of domains.</param>
	<param name="Actions">Possible actions are “delete” or “map”.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.SynchCMSRelationshipsToAD(Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection)">
	<summary>
 Synchronizes the CMS relations, such as groups, to the Active Directory for the given users.
 </summary>
	<param name="UserIds">A collection of user IDs.</param>
	<param name="GroupIds">A collection of group IDs.</param>
	<param name="Actions">A collection of actions (possible action is “delete”).</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.MapCMSUserToAD(System.Int64,System.String,System.String,System.Int32)">
	<summary>
 Maps the given user ID to the corresponding Active Directory entry.
 </summary>
	<param name="UserId">The user’s ID.</param>
	<param name="UserName">The user’s name.</param>
	<param name="Domain">The user’s domain.</param>
	<param name="PullInfo">Flag to load Active Directory information. (1 = Load Active Directory information, otherwise none.)</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.RemapCMSUserToAD(System.Int64,System.String,System.String,System.Int32)">
	<summary>
 Remaps the given user ID to the corresponding Active Directory entry.
 </summary>
	<param name="UserId">The user’s ID.</param>
	<param name="UserName">The user’s name.</param>
	<param name="Domain">The user’s domain.</param>
	<param name="PullInfo">Flag to load Active Directory information. (1 = Load Active Directory information, otherwise none.)</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.AddADUsersToCMSByUsername(Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection)">
	<summary>
 Adds Active Directory users to the CMS by their user name and domain.
 </summary>
	<param name="UserNames">A collection of user names.</param>
	<param name="UserDomains">A collection of domain names.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.UpdateADUsersGroups(System.String,System.String)">
	<summary>
 Updates Active Directory users in a CMS group.
 </summary>
	<param name="UserName">The user’s username.</param>
	<param name="Domain">The user’s Domain.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.UpdateUsersInfoFromAD(System.String,System.String)">
	<summary>
 Updates the user details from the Active Directory details.
 </summary>
	<param name="UserName">The user’s username.</param>
	<param name="Domain">The user’s Domain.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.AddADGroupToCMS(System.Object)">
	<summary>
 This function allows you add Active Directory groups to the CMS.
 </summary>
	<param name="GroupPaths">A collection of Active Directory group paths.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.DeleteUserFromGroup(System.Int64,System.Int64,System.Boolean)">
	<summary>
 Removes a user from the designated group.
 </summary>
	<param name="UserId">The user's ID.</param>
	<param name="GroupId">The group's ID.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.DeleteUserByID(System.Int64)">
	<summary>
 Removes the user from the system.  This will not purge the data, but it disables the user from further accessing the system.
 </summary>
	<param name="Id">The user’s ID.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.DeleteUserByIds(System.String)">
	<summary>
 Removes the user from the system.  This will not purge the data, but it disables the user from further accessing the system.
 </summary>
	<param name="Ids">The selected user ids( comma separated values).</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.DeleteUserGroup(System.Int64)">
	<summary>
 Removes the group from the system permanently.
 </summary>
	<param name="Id">The group's ID.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.UpDateUserGroup(Ektron.Cms.UserData)">
	<summary>
 Updates the user group details.
 </summary>
	<param name="data">A userData object representing a user group to update.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.UpDateUserGroup(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the user group details.
 </summary>
	<param name="Group">A list of group details as a collection.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.AddUserGroup(System.String,System.String,System.String)">
	<summary>
 Creates new user group.
 </summary>
	<param name="GroupName">The name of the group.</param>
	<param name="GroupPath">Group path, usually required for Active Directory, otherwise CMS group assumed.</param>
	<param name="GroupDomain">Group domain, usually required for Active Directory.</param>
	<returns>Ektron.Cms.UserGroupData</returns>
</member><member name="M:Ektron.Cms.UserAPI.AddUserToGroup(System.Int64,System.Int64)">
	<summary>
 Adds an existing user to an existing group.
 </summary>
	<param name="UserId">The user's ID.</param>
	<param name="GroupId">The required group's ID.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.AddUserToGroup(System.String,System.Int64)">
	<summary>
 Adds an existing user to an existing group.
 </summary>
	<param name="UserIds">A list of user ids.</param>
	<param name="GroupId">The required group's ID.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.AddUser(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds a new user to CMS.
 </summary>
	<param name="Users">User details as a value, key pair.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.AddUser(Ektron.Cms.UserData)">
	<summary>
 Adds a new user to CMS.
 </summary>
	<param name="data">User details as strongly typed UserData object.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetAvailableADUsers(System.Object,System.Object,System.String,System.String)">
	<summary>
 Loads all available Active Directory users.
 </summary>
	<param name="Attributes">Possible attributes are firstname, lastname, username or any(*).</param>
	<param name="Filter">Possible filters are firstname, lastname, username or any(*).</param>
	<param name="OrderBy">Any specific order such as username, firstname, lastname and domain.</param>
	<param name="Domain">The active directory domain. (Required)</param>
	<returns>Ektron.Cms.UserData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetAvailableADGroups(System.String,System.String)">
	<summary>
 Loads all of the Active Directory groups by a given domain and filter.
 </summary>
	<param name="Filter">Filter by complete or a specific group name.</param>
	<param name="Domain">The domain name. (Required)</param>
	<returns>Ektron.Cms.GroupData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetAllCmsUsers(System.String)">
	<summary>
 Loads all the CMS users.
 </summary>
	<param name="OrderBy">Used to arrange data in a specific
                       order.<para></para>The string value
                       can be\:
                       * "username"
                       * "firstname"
                       * "lastname"
                       * "userid"
                       * "language"
                       * "datecreated"
                       * "lastlogindate"</param>
	<returns>
 Ektron.Cms.UserData()
 </returns>
	<remarks>
 User login with administrator privileges are required to
 perform this operation.
 </remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetAllUsers(Ektron.Cms.UserRequestData@)">
	<summary>
 Returns the list of users from the database based on the UserRequestData class.
 </summary>
	<param name="userRequest">list of constraints to load users</param>
	<returns>An array of users as UserData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetUsersByGroup(System.Int64,System.String)">
	<summary>
 Loads the all the users from the given group.
 </summary>
	<param name="GroupId">The group's ID</param>
	<param name="OrderBy">The order of the users. The string
                       value can be\:
                       * "username"
                       * "firstname"
                       * "lastname"
                       * "userid"
                       * "language"
                       * "datecreated"
                       * "lastlogindate"</param>
	<returns>
 Ektron.Cms.UserData()
 </returns>
	<remarks>
 User login with administrator privileges are required to
 perform this operation.
 </remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetGroupsUserIsIn(System.Int64,System.String)">
	<summary>
		<b>This method is obsolete. The recommended alternative is GetGroupsUserIsIn(ByVal UserId As Long, ByVal OrderBy As Ektron.Cms.Common.EkEnumeration.GroupOrderBy).</b><para></para>
	</summary>
	<param name="UserId">The user's ID.</param>
	<param name="OrderBy">The order in which the groups are displayed. The possible values are "GroupName" and "GroupID". (Required)</param>
	<returns>Ektron.Cms.GroupData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetGroupsUserIsIn(System.Int64,Ektron.Cms.Common.EkEnumeration.GroupOrderBy)">
	<summary>
 Loads all the groups by user.
 </summary>
	<param name="UserId">The user's ID.</param>
	<param name="OrderBy">The order in which the groups are displayed. The possible values are "GroupName" and "GroupID". (Required)</param>
	<returns>Ektron.Cms.GroupData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetUsersNotInGroup(System.Int64,System.String,System.Int32)">
	<summary>
 Loads all the users that are not in the given group.
 </summary>
	<param name="Id">The group ID.</param>
	<param name="OrderBy">The order of the users. The string
                       value can be\:
                       * "username"
                       * "firstname"
                       * "lastname"
                       * "userid"
                       * "language"
                       * "datecreated"
                       * "lastlogindate"</param>
	<returns>
 Ektron.Cms.UserData()
 </returns>
	<remarks>
 User login with administrator privileges are required to
 perform this operation.
 </remarks>
</member><member name="M:Ektron.Cms.UserAPI.IsAGroupMember(System.Int64,System.Int64)">
	<summary>
 For a given userId, returns whether that user is a member of the group.
 </summary>
	<param name="userId">Long value of the user Id.</param>
	<param name="groupId">Long value of the group Id.</param>
	<returns>Boolean of whether the user is a member of the group.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetUserEmailInfoByID(System.Int64)">
	<summary>
 Returns user data for a given user's ID.
 </summary>
	<param name="Id">The user's ID.</param>
	<returns>Object of UserData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetMembershipUserByUserName(System.String)">
	<summary>
 Returns user data based on the user's login name (username).
 </summary>
	<param name="Username">User’s login name (username). This is required</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.IsCommerceAdmin(System.Int64)">
	<summary>
 Checks to see if current user is a commerce administrator, saves value to aid performance.
 </summary>
	<param name="userId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetUserCustomProperties(System.Int64)">
	<summary>
 Returns an array of custom properties for a given user's ID.
 </summary>
	<param name="UserId">User's ID</param>
	<returns>Ektron.Cms.CustomAttribute()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.ResetMembershipUserPassword(System.String,System.Int64)">
	<summary>
 Reset the password for the given membership user.
 </summary>
	<param name="Username">User’s username to be reset</param>
	<returns>String</returns>
	<remarks>User login is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.ResetMembershipUserPassword(System.String,System.String,System.Int64)">
	<summary>
 Reset the password for the given membership user.
 </summary>
	<param name="Username">User’s username to be reset</param>
	<param name="AccountId">Account id</param>
	<returns>String</returns>
	<remarks>User login is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.ResetMembershipUserPassword(System.String,System.String,System.String)">
	<summary>
 Reset the password for the given membership user.
 </summary>
	<param name="Username">User’s username to be reset</param>
	<returns>Boolean: True if successful otherwise False</returns>
	<remarks>User login is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.ActivateUserAccount(System.String,System.String)">
	<summary>
 Activates the deleted (deactivated) user into the
 current/active state using the Username and GUID (AccountID)
 parameter.<p></p>
 This function is overloaded. See Also: ActivateUserAccount (Integer)
 </summary>
	<param name="Username">The login name for the user</param>
	<param name="AccountID">The GUID for the user</param>
	<returns>
 Boolean
 </returns>
	<remarks>
 User login with administrator privileges are required for
 this operation
 </remarks>
</member><member name="M:Ektron.Cms.UserAPI.ActivateUserAccount(System.Int64)">
	<summary>
 Activates a deleted (deactivated) user into the current/active state using the UserId.<p></p>
 This function is overloaded. See Also: ActivateUserAccount (String String)
 </summary>
	<param name="UserId">A unique ID for the required user</param>
	<returns>Boolean</returns>
	<remarks>System login and administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.LockUserAccount(System.Int64)">
	<summary>
 This function locks a user account.
 </summary>
	<param name="UserId">A unique ID for the required user.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.UnLockUserAccount(System.Int64)">
	<summary>
 This function Unlocks a user account.
 </summary>
	<param name="UserId">A unique ID for the required user.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.UnsubscribeUser(System.String,System.String)">
	<summary>
 Unsubscribes a user from the system.
 </summary>
	<param name="Username">The user's username</param>
	<param name="Password">The user's password</param>
	<returns>Boolean</returns>
	<remarks>User login and administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.AddSubscription(System.Int64,System.Int64)">
	<summary>
 Assigns the identified subscription to the user.
 </summary>
	<param name="userId">The CMS user or membership ID</param>
	<param name="subscriptionId">The subscription ID</param>
	<remarks>User login and administrator privileges are required to perform this operation.
 Must supply a valid user ID and subscription ID, or will throw, 
 will also throw if user does not exist (or has been deleted). Will not error 
 if the user already has the given subscription.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.RemoveSubscription(System.Int64,System.Int64)">
	<summary>
 Removes a users existing subscription assignment.
 </summary>
	<param name="userId">The CMS user or membership ID</param>
	<param name="subscriptionId">The subscription ID</param>
	<remarks>Must supply a valid user ID and subscription ID, or will throw, 
 will also throw if user does not exist (or has been deleted). Will not error 
 if the user does not have the given subscription.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetAllUserByCustomProperty(Ektron.Cms.Common.EkEnumeration.ObjectPropertyValueTypes,System.String)">
	<summary>
 Returns all the users based on the given properties.
 </summary>
	<param name="PropType"></param>
	<param name="PropValues">Required property</param>
	<returns></returns>
	<remarks>User login and administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.EditUserCustomProperties(System.Int64,System.Boolean)">
	<summary>
 This method creates the editable fields(UI) for user's custom properties.
 </summary>
	<param name="UserId">User's ID. If the user ID is not specified then it will return empty fields.</param>
	<param name="bReadOnly"></param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.ProcessUserFeatures(System.Int64,System.Boolean)">
	<summary>
 This method creates the editable fields(UI) for user's features properties.
 </summary>
	<param name="UserId">User's ID. If the user ID is not specified then it will return empty fields.</param>
	<param name="bReadOnly"></param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.ReadCustomProperties(System.Collections.Specialized.NameValueCollection)">
	<summary>
 Returns the custom properties as a Visual Basic collection. Importing the Microsoft.VisualBasic name space might be required.
 </summary>
	<param name="form">A collection of user properties</param>
	<returns>Microsoft.VisualBasic.Collection</returns>
	<remarks>User login and administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetValueTypeName(System.Int32)">
	<summary>
	</summary>
	<param name="Type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.CheckValue(System.Int32,System.String)">
	<summary>
	</summary>
	<param name="Type"></param>
	<param name="Value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.UpdateCustomPropertiesItemOrder(System.String)">
	<summary>
 Updates the order of available custom properties.
 </summary>
	<param name="ItemOrder">Order of the properties applicable to the user.</param>
	<returns>Boolean</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.CreateBlankUserObject">
	<summary>
 Returns the instance of the user data. <p></p>
 This function is overloaded. See Also: CreateBlankUserObject (UserData)
 </summary>
	<returns>Ektron.Cms.UserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.CreateBlankUserObject(Ektron.Cms.UserData@)">
	<summary>
 Sets the given user data values into the UserData class. <p></p>
 This function is overloaded. See Also: <see cref="M:Ektron.Cms.UserAPI.CreateBlankUserObject" text="CreateBlankUserObject"/>
	</summary>
	<param name="udUserData">an Object of user properties</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetAllCustomProperties">
	<summary>
 Returns array of all the custom properties defined in the system.
 </summary>
	<returns>Ektron.Cms.CustomAttribute()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.AddNewUser(Ektron.Cms.UserData)">
	<summary>
 Adds a membership user to the CMS. Returns a UserData object representing the newly created membership user.
 </summary>
	<param name="udUserData">An object of class which represents the corresponding user elements</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.AddNewUser(Ektron.Cms.UserData,System.Boolean)">
	<summary>
 Adds a membership user to the CMS. Returns a UserData object representing the newly created membership user.
 </summary>
	<param name="udUserData">An object of class which represents the corresponding user elements</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetUserByUsername(System.String)">
	<summary>
 Get user by username.
 </summary>
	<param name="username">username</param>
	<returns>user's information</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetOnSubmitJS">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.UserAPI.GetRules(Ektron.Cms.UserCustomPropertyData)">
	<summary>
	</summary>
	<param name="UCPData"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.UserAPI">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.AddTask(Ektron.Cms.TaskData@)">
	<summary>
 Adds a task in the system.
 </summary>
	<param name="data">TaskData</param>
	<returns>False=if successfully added otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.UpdateTask(Ektron.Cms.TaskData@)">
	<summary>
 Updates the task
 </summary>
	<param name="data">Task Data</param>
	<returns>False=if successfully updated otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.DeleteTask(System.Int64)">
	<summary>
 Mark the task deleted.
 </summary>
	<param name="taskId">Task ID</param>
	<returns>False=if successfully deleted otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.DeleteTask(System.Int64,System.Boolean)">
	<summary>
 Mark the task deleted or delete the task permanently.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="Permanently">True=Delete the task</param>
	<returns>False=if successfully deleted otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.DeleteTasks(System.Int64[])">
	<summary>
 Mark tasks deleted.
 </summary>
	<param name="taskId">Array of Task ID</param>
	<returns>False=if successfully deleted otherwise True</returns>
	<remarks>When an error occurs the method will quite without deleting rest of the tasks.</remarks>
</member><member name="M:Ektron.Cms.TaskAPI.DeleteTasks(System.Int64[],System.Boolean)">
	<summary>
 Mark tasks deleted or delete tasks permanently.
 </summary>
	<param name="taskId">Array of Task ID</param>
	<param name="Permanently">True=Delete tasks</param>
	<returns>False=if successfully deleted otherwise True</returns>
	<remarks>When an error occurs the method will quite without deleting rest of the tasks.</remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetTask(System.Int64)">
	<summary>
 Get the task information.
 </summary>
	<param name="taskId">Task Id</param>
	<returns>Task Data</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetTasks">
	<summary>
 Get All tasks from the system.
 </summary>
	<returns>Array of task data.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetTasks(System.Int64[])">
	<summary>
 Get All tasks from the system.
 </summary>
	<param name="folderId">Array of FolderIDs</param>
	<returns>Array of task data.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetTaskState(System.Int64)">
	<summary>
 Get the task state.
 </summary>
	<param name="taskId">Task ID</param>
	<returns>If successful return task state otherwise it will throw an error.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.SetStateForTask(System.Int64,Ektron.Cms.Common.EkEnumeration.TaskState)">
	<summary>
 Set the task state.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="newTaskState">New Task State</param>
	<returns>False=if successfully state of the changed otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.AssignTaskToUser(System.Int64,System.Int64)">
	<summary>
 Assign a task to a user.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="assignToUserId">User's ID</param>
	<returns>False=if successfully assigned to a user otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.AssignTaskToUser(System.Int64,System.Int64,System.Int64)">
	<summary>
 Assign a task to a user.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="assignToUserId">Assign to User's ID</param>
	<param name="assignByUserId">Assign by User's ID</param>
	<returns>False=if successfully assigned to a user otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.AssignTaskToUsergroup(System.Int64,System.Int64)">
	<summary>
 Assign a task to a usergroup.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="assignToUsergroup">Assign to Usergroup's ID</param>
	<returns>False=if successfully assigned to a usergroup otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.AssignTaskToUsergroup(System.Int64,System.Int64,System.Int64)">
	<summary>
 Assign a task to a usergroup.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="assignToUsergroup">Assign to Usergroup's ID</param>
	<param name="assignByUserId">Assign by User's ID</param>
	<returns>False=if successfully assigned to a usergroup otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.UnassignedTaskFromUser(System.Int64)">
	<summary>
 Unassigned a task from a user.
 </summary>
	<param name="taskId">Task ID</param>
	<returns>False=if successfully unassigned task from a user otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.UnassignedTaskFromUser(System.Int64,System.Int64)">
	<summary>
 Unassigned a task from a user.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="unassignByUserId">Unassigned by User's ID</param>
	<returns>False=if successfully unassigned task from a user otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.UnassignedTaskFromUsergroup(System.Int64)">
	<summary>
 Unassigned a task from a usergroup.
 </summary>
	<param name="taskId">Task ID</param>
	<returns>False=if successfully unassigned the task from a usergroup otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.UnassignedTaskFromUsergroup(System.Int64,System.Int64)">
	<summary>
 Unassigned a task from a usergroup.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="unassignByUserId">Unassigned by User's ID</param>
	<returns>False=if successfully unassigned the task from a usergroup otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetTasksAssignedToUser(System.Int64)">
	<summary>
 Get all tasks assigned to the user.
 </summary>
	<param name="userId">User's ID</param>
	<returns>Array of tasks.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetTasksAssignedToUser(System.Int64,Ektron.Cms.Common.EkEnumeration.TaskState)">
	<summary>
 Get all tasks assigned to the user by a state of the task specified.
 </summary>
	<param name="userId">User's ID</param>
	<param name="taskState">Task State</param>
	<returns>Array of tasks.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetTasksAssignedToUsergroup(System.Int64)">
	<summary>
 Get all tasks assigned to the usergroup.
 </summary>
	<param name="groupId">Usergroup's ID</param>
	<returns>Array of tasks.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetTasksAssignedToUsergroup(System.Int64,Ektron.Cms.Common.EkEnumeration.TaskState)">
	<summary>
 Get all tasks assigned to the usergroup by a state of tasks specified.
 </summary>
	<param name="groupId">Usergroup's ID</param>
	<param name="taskState">Task State</param>
	<returns>Array of tasks.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetTasksAssignedByUser(System.Int64)">
	<summary>
 Get all tasks assigned by the user.
 </summary>
	<param name="userId">User's ID</param>
	<returns>Array of tasks.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetTasksAssignedByUser(System.Int64,Ektron.Cms.Common.EkEnumeration.TaskState)">
	<summary>
 Get all task assign by the user by a state of tasks specified.
 </summary>
	<param name="userId">User's ID</param>
	<param name="taskState">Task State</param>
	<returns>Array of tasks.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetAllCategories">
	<summary>
 Gets All Task categories and task types belongs to those categories.
 </summary>
	<returns>Array of TaskCategoryData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetTaskCategory(System.Int64)">
	<summary>
 Gets the specified task category and task types belongs to the category.
 </summary>
	<param name="categoryID">category id</param>
	<returns>TaskCategoryData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.UpdateTaskCategory(System.Int64,System.String)">
	<summary>
 Updates the category title
 </summary>
	<param name="categoryId">Category Id</param>
	<param name="title">New Title</param>
	<returns>False=if successfully updated otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.AddTaskCategory(System.String)">
	<summary>
 Adds a task category.
 </summary>
	<param name="title">Category Title</param>
	<returns>Category Id</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.DeleteTaskCategory(System.Int64)">
	<summary>
 Deletes the task category.
 </summary>
	<param name="categoryId">category id</param>
	<returns>False=if successfully deleted otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.GetTaskType(System.Int64)">
	<summary>
 Gets the task type information.
 </summary>
	<param name="taskTypeId">TaskTypeId</param>
	<returns>TaskTypeData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.DeleteTaskType(System.Int64)">
	<summary>
 Deletes the task type.
 </summary>
	<param name="taskTypeId">task type id to be deleted.</param>
	<returns>False=if successfully deleted otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.UpdateTaskType(System.Int64,System.String,System.String,System.Boolean)">
	<summary>
 Updates the task type.
 </summary>
	<param name="taskTypeId">Task Type Id</param>
	<param name="title">Title</param>
	<param name="description">Description</param>
	<param name="active">Set as active</param>
	<returns>False=if successfully updated otherwise True</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.TaskAPI.AddTaskType(System.String,System.String,System.Int64,System.Boolean)">
	<summary>
 Adds a task type to a category.
 </summary>
	<param name="title">Title</param>
	<param name="description">Description</param>
	<param name="categoryId">Task Category ID</param>
	<param name="active">Set as active</param>
	<returns>Task Type ID</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.TaskAPI">
	<summary>
 Used when working with Content, the Library, Fonts, Asset Management, Metadata,
 Forms, Subscriptions, Content Statistics, Content Rating, Roles and Blogs.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTag(Ektron.Cms.TagData@)">
	<summary>
 Saves a Tag and returns new Id. If the tag already exists, the existing Tag Id is returned.
 </summary>
	<param name="tag">tag data to save</param>
	<returns>Id of newly created tag or existing tag.</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTagToContent(System.String,System.Int64)">
	<summary>
 Applies a Tag to a piece of content.  If the tag text does not already exist, it is created.  
 The newly created Id is accessible via the returned TagData. Adds the tag for the current user and the Tag is saved under the current site language.
 </summary>
	<param name="tagText">Text of tag to apply to object.</param>
	<param name="contentId">Id of the piece of content that is being tagged.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTagToContent(System.String,System.Int64,System.Int64,System.Int32)">
	<summary>
 Applies a Tag to a piece of content.  If the tag text does not already exist, it is created.  
 The newly created Id is accessible vi athe returned TagData.
 </summary>
	<param name="tagText">Text of tag to apply to object.</param>
	<param name="contentId">Id of the piece of content that is being tagged.</param>
	<param name="userId">Id of the user applying the tag.</param>
	<param name="languageId">Id of the language the tagText should be saved as.  Supply -1 for all languages.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTagToCommunityGroup(System.String,System.Int64)">
	<summary>
 Applies a Tag to a Community Group.  If the tag text does not already exist, it is created.  
 The newly created Id is accessible via the returned TagData.  Adds the tag for the current user and the Tag is saved under the current site language.
 </summary>
	<param name="tagText">Text of tag to apply to Community Group.</param>
	<param name="groupId">Id of the community that is being tagged.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks>This method </remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTagToCommunityGroup(System.String,System.Int64,System.Int32)">
	<summary>
 Applies a Tag to a Community Group.  If the tag text does not already exist, it is created.  
 Uses the currently logged in user.
 The newly created Id is accessible via the returned TagData. 
 </summary>
	<param name="tagText">Text of tag to apply to Community Group.</param>
	<param name="groupId">Id of the community that is being tagged.</param>
	<param name="languageId">Id of the language the tagText should be saved as.  Supply -1 for all languages.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks>This method </remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTagToCommunityGroup(System.String,System.Int64,System.Int64,System.Int32)">
	<summary>
 Applies a Tag to a Community Group.  If the tag text does not already exist, it is created.  
 The newly created Id is accessible via the returned TagData. 
 </summary>
	<param name="tagText">Text of tag to apply to the Community Group.</param>
	<param name="groupId">Id of the community that is being tagged.</param>
	<param name="userId">Id of the user applying the tag.</param>
	<param name="languageId">Id of the language the tagText should be saved as.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks>This method </remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTagToCommunityGroup(System.Int64,System.Int64)">
	<summary>
 Applies a Tag to a Community Group.  If the tag text does not already exist, it is created.  
 The newly created Id is accessible via the returned TagData.
 </summary>
	<param name="tagId">Id of tag to apply to  Community Group.</param>
	<param name="groupId">Id of the  Community Group that is being tagged.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTagToObject(System.String,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
	<summary>
 Applies a Tag to a piece of content.  If the tag text does not already exist, it is created.  
 The newly created Id is accessible via the returned TagData.  Adds the tag for the current user and the Tag is saved under the current site language.
 </summary>
	<param name="tagText">Text of tag to apply to object.</param>
	<param name="objectType">Type of object represented by objectId.</param>
	<param name="objectId">Id of object that is being tagged.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTagToObject(System.String,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.Int64,System.Int32)">
	<summary>
 Applies a Tag to a piece of content.  If the tag text does not already exist, it is created.  
 The newly created Id is accessible via the returned TagData.
 </summary>
	<param name="tagText">Text of tag to apply to object.</param>
	<param name="objectType">Type of object represented by objectId.</param>
	<param name="objectId">Id of object that is being tagged.</param>
	<param name="userId">Id of the user applying the tag.</param>
	<param name="languageId">Id of the language the tagText should be saved as.  Supply -1 for all languages.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTagToObject(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.Int64,System.Int32)">
	<summary>
 Applies a Tag to an object.  
 The newly created Id is accessible via the returned TagData.
 </summary>
	<param name="tagId">ID of tag to apply to object.</param>
	<param name="objectType">Type of object represented by objectId.</param>
	<param name="objectId">Id of object that is being tagged.</param>
	<param name="userId">Id of the user applying the tag.</param>
	<param name="languageId">Id of the language the tagText should be saved as.  Supply -1 for all languages.</param>
	<remarks></remarks>
 AddTagIdToObject 

</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTagToUser(System.String,System.Int64)">
	<summary>
 Applies a Tag to a user.  If the tag text does not already exist, it is created.  
 The newly created Id is accessible via the returned TagData. The Tag is saved under the current site language.
 </summary>
	<param name="tagText">Text of tag to apply to object.</param>
	<param name="userId">Id of the user that is being tagged.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTagToUser(System.String,System.Int64,System.Int32)">
	<summary>
 Applies a Tag to a user.  If the tag text does not already exist, it is created.  
 The newly created Id is accessible vi athe returned TagData.
 </summary>
	<param name="tagText">Text of tag to apply to object.</param>
	<param name="userId">Id of the user that is being tagged.</param>
	<param name="languageId">Id of language the tag should be saved as.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.AddTagToUser(System.Int64,System.Int64)">
	<summary>
 Applies a Tag to a user.  If the tag text does not already exist, it is created.  
 The newly created Id is accessible vi athe returned TagData.
 </summary>
	<param name="tagId">Id of tag to apply to object.</param>
	<param name="userId">Id of the user that is being tagged.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.DeleteTagById(System.Int64)">
	<summary>
 Permanently deletes tag and all associations.  
 Even deletes system tags so this should only be called if user has permission to delete system tags.
 If deleting tags used by a specific user, use DeleteTagsByUser.
 </summary>
	<param name="tagId">Id of tag to be deleted.</param>
</member><member name="M:Ektron.Cms.Community.TagsAPI.DeleteTagOnObject(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.Int64)">
	<summary>
 Deletes a user's tag on an object.
 For example, User A had tagged content 101 with "CMS" and now wishes to delete that object tag.
 </summary>
	<param name="tagID">Id of tag to delete</param>
	<param name="ObjectID">Id of the object to delete tags on.</param>
	<param name="ObjectType">The type of object associated with the ObjectId.</param>
	<param name="userId">The user who originally applie dthe tag and wants to delete it.</param>
	<returns>true if operation was successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.DeleteTagsOnUser(System.Int64)">
	<summary>
 Deletes all tags applied to a user.
 To delete tags applied BY a given user, use DeleteTagsByUser
 </summary>
	<param name="userId">Id of user to delete tags on.</param>
	<returns>true if operation was successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.DeleteTagsOnContent(System.Int64)">
	<summary>
 Deletes all tags on a piece of content.
 </summary>
	<param name="contentId">Id of piece of content to delete tags on.</param>
	<returns>true if operation was successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.DeleteTagsOnCommunityGroup(System.Int64)">
	<summary>
 Deletes all tags on a piece of content.
 </summary>
	<param name="groupId">Id of community group to delete tags on.</param>
	<returns>true if operation was successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.DeleteTagsOnObject(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
	<summary>
 Deletes all tags on an object.
 </summary>
	<param name="ObjectID">Id of the object to delete tags on.</param>
	<param name="ObjectType">The type of object associated with the ObjectId.</param>
	<returns>true if operation was successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.DeleteTagsByUser(System.Int64)">
	<summary>
 Deletes all tags applied by a user.  
 To delete tags ON a user, use DeleteTagsOnUser.
 </summary>
	<param name="userId">Id of user whose tags are being deleted</param>
	<returns>true if operation was successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.TagsAPI.EditTag(Ektron.Cms.TagData@)">
	<summary>
 Updates an existing Tag.
 </summary>
	<param name="tag">tag data to save</param>
	<returns>Id of newly created tag or existing tag.</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetAllTagRelatedContent(System.Int64)">
	<summary>
 Returns a list of content related to the supplied Content via a common Tag.  
 For example, both Content one and Content Two are both tagged with "CMS" and are considered related.
 </summary>
	<param name="contentId">This is the piece of content for which to retrieve related content</param>
	<returns>returns array of partially populated ContentData objects.</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetAllTagRelatedUsers(System.Int64)">
	<summary>
 Returns a list of users related to the supplied user via a common Tag.  
 For example, both user one and user Two are both tagged with "Engineer" and are considered related.
 </summary>
	<param name="userId">This is the user for which to retrieve related users</param>
	<returns>Array of partially populated UserData objects</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetAllTags(Ektron.Cms.PagingInfo)">
	<summary>
 Returns a list of all tags in the system.
 </summary>
	<param name="pagingInfo">paging information for call.</param>
	<returns>Array of TagData objects</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetAllTags(System.Int32,System.Int32,System.Int32@)">
	<summary>
 Returns a list of all tags in the system.
 </summary>
	<param name="pageSize">Size of result set to retrieve. Pass 0 to retrieve all.</param>
	<param name="page">Index of result set to retrieve.</param>
	<param name="totalTags">returns the total number of tags available.</param>
	<returns>Collection of TagData objects</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetAllTags(Ektron.Cms.TagRequestData,System.Int32@)">
	<summary>
 Returns a list of all tags in the system.
 </summary>
	<param name="request">contains the parameters for the tags to retrieve.</param>
	<param name="totalTags">Returns the total number of tags available for the requested parameters.</param>
	<returns>Array of TagData objects</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetDefaultTags(Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
	<summary>
 Returns a list of all system defined tags in the system.
 </summary>
	<param name="objectType">The type of objectto retrieve tags for. For example, retrieve allthe default tags for CommunityGroups (CMSObjectTypes.CommunityGroup).</param>
	<returns>Array of TagData objects</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetDefaultTags(Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.Int32)">
	<summary>
 Returns a list of all system defined tags in the system.
 </summary>
	<param name="objectType">The type of objectto retrieve tags for. For example, retrieve allthe default tags for CommunityGroups (CMSObjectTypes.CommunityGroup).</param>
	<param name="languageId">language of tags to retrieve.</param>
	<returns>Collection of TagData objects</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetTagByID(System.Int64)">
	<summary>
 Returns the Tag with specified Id
 </summary>
	<param name="tagId">Id of the tag to retrieve.</param>
	<returns>returns tag found with supplied Id or new tag if no tag is found.</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetTagByName(System.String)">
	<summary>
 Returns Tag with specified Text
 </summary>
	<param name="tagText">Text of the tag to retrieve.</param>
	<returns>returns tag found with supplied Id or new tag if no tag is found.</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetTagStatistics(System.Int64)">
	<summary>
 Returns a Tag's usage statistics for each obejct type.
 </summary>
	<param name="tagId">Id of the tag to retrieve statistics for.</param>
	<returns>returns a dictionary where the key is the CMSObjectType and the value is the number of times the tag has been used for that ObjectType.</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetTagCloud(Ektron.Cms.Community.TagCloudRequestData,System.Int32@)">
	<summary>
 Returns a TagCloud based upon the request.
 </summary>
	<param name="request">contains the parameters for the tagcloud to retrieve.</param>
	<param name="totalTags">Returns the total number of tags available in the requested cloud.</param>
	<returns>A TagCloud object representing the request.</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetTagsForContent(System.Int64)">
	<summary>
 Returns an array of tags for a piece of content.
 </summary>
	<param name="contentId">Id of the piece of content to retrieve tags for.</param>
	<returns>array of TagData objects that have been applied to the content.</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetTagsForObject(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
	<summary>
 Returns an array of tags for a given object.
 </summary>
	<param name="objectId">ObjectId to retrieve tags for.</param>
	<param name="objectType">Object Type to retrieve tags for.</param>
	<returns>array of TagData objects that have been applied to Object.</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetTagsForObject(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.Int32)">
	<summary>
 Returns an array of tags for a given object.
 </summary>
	<param name="objectId">ObjectId to retrieve tags for.</param>
	<param name="objectType">Object Type to retrieve tags for.</param>
	<param name="languageId">languageId of tags to retrieve.</param>
	<returns>array of TagData objects that have been applied to Object.</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetTagsForUser(System.Int64)">
	<summary>
 Returns an array of tags for a user.
 </summary>
	<param name="userId">Id of the user to retrieve tags for.</param>
	<returns>array of TagData objects that have been applied to the user.</returns>
</member><member name="M:Ektron.Cms.Community.TagsAPI.GetTagsForUser(System.Int64,System.Int32)">
	<summary>
 Returns an array of tags for a user.
 </summary>
	<param name="userId">Id of the user to retrieve tags for.</param>
	<param name="languageId">Language of tags to retrieve.</param>
	<returns>array of TagData objects that have been applied to the user.</returns>
</member><member name="M:Ektron.Cms.SiteAPI.GetAllActiveLanguages">
	<summary>
 Gets all languages that have been activated in the CMS400 Workarea &gt; Settings &gt; Configuration &gt; Language Settings area.
 </summary>
	<returns>Array of Ektron.Cms.LanguageData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SiteAPI.GetSiteVariables(System.Int64)">
	<summary>
 Returns all of the settings data.
 </summary>
	<param name="Id">User ID</param>
	<returns>Ektron.Cms.SettingsData</returns>
	<remarks>If user ID is passed it returns the additional value of MaxUsersAllowed, AdInstalled and AdAllowed properties.</remarks>
</member><member name="M:Ektron.Cms.SiteAPI.GetLanguageById(System.Int32)">
	<summary>
 Returns the details about the given language ID.
 </summary>
	<param name="Id">Valid non negative language ID (refer to the language_type table for all the languages)</param>
	<returns>Ektron.Cms.LanguageData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SiteAPI.GetAllLanguages">
	<summary>
 Gets a list of all the available languages sorted by language name in ascending order.
 </summary>
	<returns>Array of  Ektron.Cms.LanguageData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SiteAPI.GetAllLanguages(Ektron.Cms.LanguageDataSet.SortBy,Ektron.Cms.LanguageDataSet.SortDirection)">
	<summary>
 Gets a list of all the available languages.
 </summary>
	<param name="OrderBy">Determines the sort order.</param>
	<param name="direction">Determines the sort direction.</param>
	<returns>Array of  Ektron.Cms.LanguageData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SiteAPI.GetLanguages(Ektron.Cms.LanguageDataSet.LanguageState,Ektron.Cms.LanguageDataSet.SortBy,Ektron.Cms.LanguageDataSet.SortDirection)">
	<summary>
 Gets a list of all languages that meet a given state, for example, active.
 </summary>
	<param name="State">The state that the language must meet. For example, defined, active, site enabled.</param>
	<param name="SortBy">The field on which to sort the languages in the data table.</param>
	<param name="SortDirection">The direction, ascending or descending, in which to sort the field values.</param>
	<returns>LanguageDataTable of languages that meet the given state.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SiteAPI.UpdateSiteEnabledLanguages(System.String)">
	<summary>
 Updates the languages in the given list to be enabled on the site. Languages not in the list are disabled.
 </summary>
	<param name="LanguageIDs">Comma-separated list of language ids. For example, "1033,1031"</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SiteAPI.UpdateSiteVariables(System.Collections.Hashtable)">
	<summary>
 Update the site settings
 </summary>
	<param name="item">Set of settings data as key, value pair.</param>
	<remarks>To use this function, the user should be logged in to the system. Otherwise, the user will get the permission denied error.</remarks>
</member><member name="M:Ektron.Cms.SiteAPI.SetTaskPermission(System.Int64,System.Int32,System.Int32)">
	<summary>
 Updates the task permission(s) for the given user or group.
 </summary>
	<param name="Id">User ID or Group ID</param>
	<param name="UserType">User (1) or Group (2)</param>
	<param name="PermissionType">Ektron.Cms.Common.TaskPermission (1 = Create Task, 2 = Redirect Task, 3 = Delete Task, 4 = Edit Alias)</param>
	<remarks>To use this function, the user should be logged in to the system. Otherwise, user will get the permission denied error.</remarks>
</member><member name="M:Ektron.Cms.SiteAPI.BreakTaskPermissionInherit(System.Int64)">
	<summary>
 Removes the task permissions for a given user.
 </summary>
	<param name="Id">User ID</param>
	<remarks>The user should be logged in to the system. Otherwise, the user will get the permission denied error.</remarks>
</member><member name="M:Ektron.Cms.SiteAPI.GetTaskPermission(System.Int64,System.Int32)">
	<summary>
 Returns 1 if the user has one of the task permissions, otherwise 0.
 </summary>
	<param name="Id">User or group ID</param>
	<param name="Type">User or group (1 = user, 2 = group).</param>
	<returns>Integer</returns>
	<remarks>The user should be logged in to the system. Otherwise, the user will get the permission denied error.</remarks>
</member><member name="M:Ektron.Cms.SiteAPI.GetClientMonthNames">
	<summary>
 Returns the month name of a given content language (or site language)
 </summary>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SiteAPI.GetClientDayNames">
	<summary>
 Returns the day name of a given content language (or site language).
 </summary>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SiteAPI.IsTaskPermissionInherited(System.Int64)">
	<summary>
 Returns true if a user has already granted one of the task permissions.
 </summary>
	<param name="Id">User ID</param>
	<returns>Boolean</returns>
	<remarks>To use this function, the user should be logged in to the system. Otherwise, the user will get the permission denied error.</remarks>
</member><member name="M:Ektron.Cms.SiteAPI.QuickDeployContent(System.String)">
	<summary>
 Given a list of CSV separated numerical content IDs, it will try to quickdeploy
 them if they are in folders marked for quickdeploy
 </summary>
	<param name="contentids"></param>
	<returns>True if it will send changes</returns>
	<remarks>Deprecated...QuickDeploy has been replaced by eSync</remarks>
</member><member name="M:Ektron.Cms.SiteAPI.IsContentSyncable(System.Int64,System.Int32,System.Int64)">
	<summary>
 Checks if a piece of content is syncable.  A piece of content is not syncable if its permissions or approvals have been changed , 
 if it has been added a new tag or assigned to a new taxonomy that has not been synched.
 </summary>
	<param name="contentId">Id of content to check.</param>
	<returns></returns>
	<remarks>Deprecated...QuickDeploy has been replaced by eSync</remarks>
</member><member name="M:Ektron.Cms.SiteAPI.IsFolderSyncable(System.Int64,System.Int64)">
	<summary>
 Checks if a single folder is syncable.  A folder is not syncable if its properties have been modified at all since the last full synch.
 </summary>
	<param name="folderId">Id of folder to check.</param>
	<returns></returns>
	<remarks>Deprecated...QuickDeploy has been replaced by eSync</remarks>
</member><member name="M:Ektron.Cms.SiteAPI.GetAllSyncableRelationsForFolder(System.Int64)">
	<summary>
 Returns all the sync relations for a folder that are currently able to be synced.
 </summary>
	<param name="folderId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SiteAPI.GetAllSyncableRelationsForContent(System.Int64,System.Int32)">
	<summary>
 Returns all the sync relations for a content that are currently able to be synced.
 </summary>
	<param name="contentId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.SiteAPI">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.UserSearchCondition.setVariable">
	<summary>
 Value for the variable.
 </summary>
	<value>Any value</value>
	<returns>Value</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.UserSearchCondition">
	<summary>
 This class used to define custom search conditions to lookup users against users table and dynamic_definition_tbl aka custom properties.
 </summary>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.ContentSearchCondition.setVariable">
	<summary>
 Value for the variable.
 </summary>
	<value>Any value</value>
	<returns>Value</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.ContentSearchCondition">
	<summary>
 This class is used to define custom search conditions to lookup content against a content object and metadata (custom properties).
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SearchManager.Execute(Ektron.Cms.UserSearchCondition)">
	<summary>
 Returns the array of UserData based on the criteria UserSearchCondition.
 </summary>
	<param name="condition">UserSearchCondition</param>
	<returns>Array of UserData</returns>
	<example>
		<code>
 Dim isMemberShip As UserSearchCondition = New UserSearchCondition
 isMemberShip.setType = SearchType.EQUAL
 isMemberShip.setValue = 1 'The value can be integer,string,date and boolean should be match with db type
 isMemberShip.setVariable = users.membership_user
 
 Dim isInEktron As UserSearchCondition = New UserSearchCondition
 isInEktron.setType = SearchType.EQUAL
 isInEktron.setValue = "03031"  'The value can be integer,string,date and boolean should be match with dynamic_data_tbl labels type
 isInEktron.setVariable = "customproperties.zip code"
 
 Dim condition As UserSearchCondition = New UserSearchCondition
 condition.setType = SearchType.AND
 condition.AddCondition(isInEktron)
 condition.AddCondition(isMemberShip)
 
 Dim search As New SearchManager
 Dim result As userdata() = search.Execute(condition)
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SearchManager.Execute(Ektron.Cms.UserSearchCondition,Ektron.Cms.Common.EkEnumeration.Users,Ektron.Cms.Common.EkEnumeration.OrderByDirection)">
	<summary>
 Returns the array of UserData based on the criteria UserSearchCondition and order by column.
 </summary>
	<param name="condition">UserSearchCondition</param>
	<returns>Array of UserData</returns>
	<example>
		<code>
 Dim isMemberShip As UserSearchCondition = New UserSearchCondition
 isMemberShip.setType = SearchType.EQUAL
 isMemberShip.setValue = 1 'The value can be integer,string,date and boolean should be match with db type
 isMemberShip.setVariable = users.membership_user
 
 Dim isInEktron As UserSearchCondition = New UserSearchCondition
 isInEktron.setType = SearchType.EQUAL
 isInEktron.setValue = "03031"  'The value can be integer,string,date and boolean should be match with dynamic_data_tbl labels type
 isInEktron.setVariable = "customproperties.zip code"
 
 Dim condition As UserSearchCondition = New UserSearchCondition
 condition.setType = SearchType.AND
 condition.AddCondition(isInEktron)
 condition.AddCondition(isMemberShip)
 
 Dim search As New SearchManager
 Dim result As userdata() = search.Execute(condition, Ektron.Cms.EkEnumeration.Users.user_name, Ektron.Cms.EkEnumeration.OrderByDirection.Descending )
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SearchManager.Execute(Ektron.Cms.ContentSearchCondition)">
	<summary>
 Returns the array of ContentData based on the criteria ContentSearchCondition..
 </summary>
	<param name="condition">ContentSearchCondition</param>
	<returns>Array of ContentData</returns>
	<example>
		<code>
 Dim isContentLanguage As ContentSearchCondition = New ContentSearchCondition
 isContentLanguage.setType = SearchType.EQUAL
 isContentLanguage.setValue = 1033 'The value can be integer,string,date and boolean should be match with db type
 isContentLanguage.setVariable = content.content_language
 
 Dim isInEktron As ContentSearchCondition = New ContentSearchCondition
 isInEktron.setType = SearchType.EQUAL
 isInEktron.setValue = "03031"  'The value can be integer,string,date and boolean should be match with dynamic_data_tbl labels type
 isInEktron.setVariable = "customproperties.zip code"
 
 Dim condition As ContentSearchCondition = New ContentSearchCondition
 condition.setType = SearchType.AND
 condition.AddCondition(isInEktron)
 condition.AddCondition(isMemberShip)
 
 Dim search As New SearchManager
 Dim result As userdata() = search.Execute(condition)
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SearchManager.Execute(Ektron.Cms.ContentSearchCondition,Ektron.Cms.Common.EkEnumeration.Content,Ektron.Cms.Common.EkEnumeration.OrderByDirection)">
	<summary>
 Returns the array of ContentData based on the criteria ContentSearchCondition and order by column.
 </summary>
	<param name="condition">ContentSearchCondition</param>
	<returns>Array of ContentData</returns>
	<example>
		<code>
 Dim isContentLanguage As ContentSearchCondition = New ContentSearchCondition
 isContentLanguage.setType = SearchType.EQUAL
 isContentLanguage.setValue = 1033 'The value can be integer,string,date and boolean should be match with db type
 isContentLanguage.setVariable = content.content_language
 
 Dim isInEktron As ContentSearchCondition = New ContentSearchCondition
 isInEktron.setType = SearchType.EQUAL
 isInEktron.setValue = "03031"  'The value can be integer,string,date and boolean should be match with dynamic_data_tbl labels type
 isInEktron.setVariable = "customproperties.zip code"
 
 Dim condition As ContentSearchCondition = New ContentSearchCondition
 condition.setType = SearchType.AND
 condition.AddCondition(isInEktron)
 condition.AddCondition(isMemberShip)
 
 Dim search As New SearchManager
 Dim result As userdata() = search.Execute(condition, Ektron.Cms.EkEnumeration.Users.user_name, Ektron.Cms.EkEnumeration.OrderByDirection.Descending )
 </code>
	</example>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.SearchManager">
	<summary>
 This class executes the condition(s) and returns the result as an array of UserData or an array of ContentData.
 </summary>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.SearchCondition.setType">
	<summary>
 Type of search based on searchType Enum.
 </summary>
	<value>AND, OR, NOT, etc.,</value>
	<returns>Type Enum</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.SearchCondition.setVariable">
	<summary>
 Variable name.
 </summary>
	<value>tablename.columnname</value>
	<returns>variable name</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.SearchCondition.setValue">
	<summary>
 Value for the variable.
 </summary>
	<value>Any value</value>
	<returns>Value</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.SearchCondition.AddCondition(Ektron.Cms.SearchCondition)">
	<summary>
 Sets the condition into SearchCondition class, user can add any conditions or conditions of condition.
 </summary>
	<param name="condition">condition</param>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.SearchCondition.GetCondition">
	<summary>
 Reads the condition defined int the class.
 </summary>
	<value>none</value>
	<returns>conditions</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.SearchCondition">
	<summary>
 Base class defines all the properties related to search conditions.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Permissions.LoadPermissions(System.Int64,System.String,Ektron.Cms.ContentAPI.PermissionResultType)">
	<summary>
 Loads the permission for given object, such as content, folder, task, etc.
 </summary>
	<param name="Id">The object ID</param>
	<param name="RequestType">The object type := content | folder | collections | tasks </param>
	<param name="Type">The permission result type</param>
	<returns>Ektron.Cms.PermissionData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.API.Permissions.GetUserPermissions(System.Int64,System.String,System.Int64,System.String)">
	<summary>
 Loads the user permissions as a array of UserPermissionData.
 </summary>
	<param name="Id">the item's ID</param>
	<param name="ItemType">The item's type</param>
	<param name="UserId">The user's ID</param>
	<param name="UserGroupList">the group list</param>
	<returns>Ektron.Cms.UserPermissionData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Permissions.GetUserPermissions(System.Int64,System.String,System.Int64,System.String,Ektron.Cms.ContentAPI.PermissionUserType,Ektron.Cms.ContentAPI.PermissionRequestType)">
	<summary>
 Loads the user permissions as a array of UserPermissionData.
 </summary>
	<param name="Id">the item's ID</param>
	<param name="ItemType">The item's type</param>
	<param name="UserId">The user's ID</param>
	<param name="UserGroupList">the group list</param>
	<param name="PermissionType">PermissionUserType</param>
	<param name="PermissionRequest">PermissionRequestType</param>
	<returns>Ektron.Cms.UserPermissionData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Permissions.UpdateItemPermission(Ektron.Cms.UserPermissionData)">
	<summary>
 Updates the item permissions for a user or a usergroup.
 </summary>
	<param name="userPermData">User's Permissions Data</param>
	<returns>False if it's successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Permissions.AddItemPermission(Ektron.Cms.UserPermissionData)">
	<summary>
 Adds the item permissions for a user or a usergroup.
 </summary>
	<param name="userPermData">User's Permissions Data</param>
	<returns>False if it's successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Permissions.DeleteItemPermission(System.Int64,System.Boolean,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
	<summary>
 Deletes a user or a group from the item's permissions
 </summary>
	<param name="id">User or Group Id</param>
	<param name="IsGroupId">Given ID is a user id or a group id?</param>
	<param name="itemId">ContentId or FolderId</param>
	<param name="itemType">Given item id is EkEnumeration.CMSObjectTypes.Content or EkEnumeration.CMSObjectTypes.Folder?</param>
	<returns>False if it's successful.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Permissions.DisableFolderInheritance(System.Int64)">
	<summary>
 Disable permissions inheritance on the folder and copies current permissions to the folder.
 </summary>
	<param name="id">folder Id</param>
	<returns>False if it's successful.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Permissions.EnableFolderInheritance(System.Int64)">
	<summary>
 Deletes current permissions from the folder and enable permissions inheritance on the folder.
 </summary>
	<param name="id">folder Id</param>
	<returns>False if it's successful.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Permissions.DisableContentInheritance(System.Int64)">
	<summary>
 Disable permissions inheritance on the content and copies current permissions to the content.
 </summary>
	<param name="id">Content Id</param>
	<returns>False if it's successful.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Permissions.EnableContentInheritance(System.Int64)">
	<summary>
 Deletes current permissions from the content and enable permissions inheritance on the content.
 </summary>
	<param name="id">Content Id</param>
	<returns>False if it's successful.</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.FlexNavigation.StartLevel">
	<summary>
 Enter a number to indicate the level at which you want this menu to display when it first appears. 
 To begin the menu display at the root level, enter zero (0). 
 Note that the StartLevel property is ignored when StartMenuId is not zero.
 </summary>
</member><member name="P:Ektron.Cms.FlexNavigation.UseAliasRealId">
	<summary>
 If system id using manual aliasing, and the aliased menu item does not get 
 selected due to external link that generates a URL which contains the real path 
 and ID, setting this true will force first matching menu item ID to be selected.
 </summary>
	<value>False</value>
	<returns>Boolean</returns>
	<remarks>Not normally needed (default: False), but available for special cases when 
 both alias and non-alias references to the same menu item must be allowed.</remarks>
</member><member name="P:Ektron.Cms.FlexNavigation.LogInfo">
	<summary>
 Set to true to enable logging verbose info to the event log (such as information on reasons for menu selection), must set web.config LogLevel to verbose.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Used to assist identifying a configuration problem, when the menu does not appear to select what the designer intended.</remarks>
</member><member name="P:Ektron.Cms.FlexNavigation.XmlRequired">
	<summary>
 Set to true to force populating XmlDoc, otherwise may be null if markup is found in cache.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>For performance reasons, the markup is stored and retrieved from cache - normally 
 negating the need to utilize XML unless the markup is not in the cache. This property allows 
 overriding the default bahavior in order to make use of the XML in custom code.</remarks>
</member><member name="P:Ektron.Cms.FlexNavigation.StartMenuId">
	<summary>
 If only a portion of the menu tree below MenuId is required, set this property to the desired starting menu-ID and only 
 it and it's children will be used to create the XML. Set this to zero to begin with the standard MenuId (default). 
 Note that the StartLevel property is ignored when StartMenuId is not zero.
 </summary>
	<value>The starting menu ID, or zero if MenuId is to be used (default)</value>
	<returns>The starting menu ID, zero if starting with MenuId (default)</returns>
	<remarks>Used to allow starting at a submenu instead of a menu-root node (default)</remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.StartExportFolderForTranslation(System.Int64,System.Int32,System.Boolean,System.String)">
	<summary>
 Starts the process of exporting all the content specified by <c>ContentType</c> in the specified folder. Optionally,
 all the content in the subfolders may be processed as well. The status of the process may be monitored by visiting
 localizationjobs.aspx, which uses methods in this class. The translatable text and documents are exported as XLIFF files
 compressed in ZIP files. The XLIFF files are suitable for sending to a translator. Once translated, the XLIFF files
 should be imported using the <see cref="M:Ektron.Cms.LocalizationAPI.StartImportTranslation" text="StartImportTranslation"/>.
 </summary>
	<param name="FolderID">Specifies the folder containing the content to export.</param>
	<param name="ContentType">Specifies which type or types of content to export. </param>
	<param name="IncludeSubfolders">Specifies whether to export just the specified folder or all subfolders as well.</param>
	<param name="ListOfLanguageIDs">Comma\-delimited list of language IDs. e.g., "<c>1031,1036</c>"</param>
	<returns>Returns a Job ID</returns>
	<remarks>
 To export just selected content, use StartExportFolderForTranslation (Integer Integer Boolean String).<p></p>
 See <exref target="http://www.xliff.org">http://www.xliff.org</exref>
 for more information about XLIFF.  
 </remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.StartExportContentForTranslation(System.String,System.String)">
	<summary>
 Starts the process of exporting the content specified by ListOfContentIDs. 
 The status of the process may be monitored by visiting localizationjobs.aspx, which uses methods in this class.
 The translatable text and documents are exported as XLIFF files compressed in ZIP files. The XLIFF
 files are suitable for sending to a translator. Once translated, the XLIFF files should be imported
 using the <see cref="M:Ektron.Cms.LocalizationAPI.StartImportTranslation" text="StartImportTranslation"/> method.
 </summary>
	<param name="ListOfContentIDs">Comma-delimited list of content IDs. e.g., "<c>11,12</c>"</param>
	<param name="ListOfLanguageIDs">Comma-delimited list of language IDs. e.g., "<c>1031,1036</c>"</param>
	<returns>Returns a Job ID</returns>
	<remarks>
 To export all content in a folder, use StartExportFolderForTranslation (Integer Integer Boolean String).
 See <exref target="http://www.xliff.org">http://www.xliff.org</exref>
 for more information about XLIFF. 
 </remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.StartExportMenusForTranslation(System.String)">
	<summary>
 Starts the process of exporting all menus. 
 The status of the process may be monitored by visiting localizationjobs.aspx, which uses methods in this class.
 The translatable text is exported as an XLIFF file and compressed in a ZIP file. The XLIFF
 file is suitable for sending to a translator. Once translated, the XLIFF file should be imported
 using the <see cref="M:Ektron.Cms.LocalizationAPI.StartImportTranslation" text="StartImportTranslation"/> method.
 </summary>
	<param name="ListOfLanguageIDs">Comma-delimited list of language IDs. e.g., "<c>1031,1036</c>"</param>
	<returns>Returns a Job ID</returns>
	<remarks>
 See <exref target="http://www.xliff.org">http://www.xliff.org</exref>
 for more information about XLIFF. 
 </remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.StartExportTaxonomyForTranslation(System.String)">
	<summary>
 Starts the process of exporting all menus. 
 The status of the process may be monitored by visiting localizationjobs.aspx, which uses methods in this class.
 The translatable text is exported as an XLIFF file and compressed in a ZIP file. The XLIFF
 file is suitable for sending to a translator. Once translated, the XLIFF file should be imported
 using the <see cref="M:Ektron.Cms.LocalizationAPI.StartImportTranslation" text="StartImportTranslation"/> method.
 </summary>
	<param name="ListOfLanguageIDs">Comma-delimited list of language IDs. e.g., "<c>1031,1036</c>"</param>
	<returns>Returns a Job ID</returns>
	<remarks>
 See <exref target="http://www.xliff.org">http://www.xliff.org</exref>
 for more information about XLIFF. 
 </remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.StartImportTranslation">
	<summary>
 Starts the process of importing XLIFF files that have been
 translated. The files should be uploaded to server directory
 specified by <see cref="M:Ektron.Cms.LocalizationAPI.GetTranslationUploadDirectory" text="GetTranslationUploadDirectory"/>.
 Files may be XLIFF files (.xlf extension) or XLIFF files that
 are compressed in ZIP (.zip extension) files.
 </summary>
	<returns>Returns a Job ID</returns>
	<remarks>
 See <exref target="http://www.xliff.org">http://www.xliff.org</exref>
 for more information about XLIFF. 
 </remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.CancelJob(System.Int64)">
	<summary>
 Stops the specified process started by <see cref="M:Ektron.Cms.LocalizationAPI.StartImportTranslation" text="StartImportTranslation"/> 
 or one of the StartExport*ForTranslation methods.
 </summary>
	<param name="JobID">Specifies which process to stop.</param>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetTranslationUploadDirectory">
	<summary>
 Returns the server directory path to upload XLIFF and ZIP files for importing.
 For example,<p/>
		<c>C:\\inetpub\\wwwroot\\CMS400Demo\\workarea\\uploadedfiles\\localization</c>. <p></p>
 \See Also: <see cref="M:Ektron.Cms.LocalizationAPI.StartImportTranslation" text="StartImportTranslation"/>.
 </summary>
	<returns>The server directory path (as a String) to store XLIFF and ZIP files that are to be imported.</returns>
	<remarks>This directory path should not be displayed on a web page.</remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetJobs">
	<summary>
 Returns a list of the top-level jobs, export and import jobs. The jobs listed depend on the user id, 
 unauthenticated users (e.g., translators) see only publicly available jobs (e.g., ZIP files for download).
 Administrators can view all jobs, non-administrators may only view jobs they created.<p></p>
 This function is overloaded. See Also: GetJobs (Integer)
 </summary>
	<returns>A <see cref="T:Ektron.Cms.LocalizationJobDataSet.LocalizationJobDataTable"> data table </see> of top-level jobs.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetJobs(System.Int64)">
	<summary>
 Returns a list of the sub jobs of the given job. <p></p>
 This function is overloaded. See Also: <see cref="M:Ektron.Cms.LocalizationAPI.GetJobs" text="GetJobs"/>
	</summary>
	<param name="ParentJobID">Specifies the job.</param>
	<returns>A <see cref="T:Ektron.Cms.LocalizationJobDataSet.LocalizationJobDataTable"> data table </see> of jobs.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetJobByID(System.Int64)">
	<summary>
 Returns the specified job.
 </summary>
	<param name="JobID">Specifies the job.</param>
	<returns>A <see cref="T:Ektron.Cms.LocalizationJobDataSet.LocalizationJobRow"> job record </see> or Nothing if not found.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetFileByID(System.Int64)">
	<summary>
 Returns the specified file record.
 </summary>
	<param name="FileID">Specifies a file (e.g., ZIP file)</param>
	<returns>A <see cref="T:Ektron.Cms.LocalizationJobDataSet.LocalizationJobFileRow"> record </see>  of a job file or Nothing if not found.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetFilesByJob(System.Int64)">
	<summary>
 Returns a list of files associated with a given job.
 </summary>
	<param name="JobID">Specifies the job.</param>
	<returns>A <see cref="T:Ektron.Cms.LocalizationJobDataSet.LocalizationJobFileDataTable"> data table </see> of files.</returns>
	<remarks>Files are typically ZIP files for export jobs and ZIP and XLIFF files for import jobs.</remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetFilesInFile(System.Int64)">
	<summary>
 Returns a list of files in a given ZIP file.
 </summary>
	<param name="FileID">Specifies a file (e.g., ZIP file)</param>
	<returns>A <see cref="T:Ektron.Cms.LocalizationJobDataSet.LocalizationJobFileDataTable"> data table </see> of files.</returns>
	<remarks>Files are typically ZIP and XLIFF files for import jobs. The export process usually will not
 generate ZIP files with other ZIP files in them.</remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetContentItemsByJob(System.Int64)">
	<summary>
 Returns a list of content items (i.e., XLIFF skeletons) associated with a given job.
 </summary>
	<param name="JobID">Specifies the job.</param>
	<returns>A <see cref="T:Ektron.Cms.LocalizationJobDataSet.LocalizationSkeletonDataTable"> data table </see>  of content (i.e., skeleton) items.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetInterchangeFilesInFile(System.Int64)">
	<summary>
 Returns a list of interchange files (i.e., XLIFF files) contained within a given ZIP file.
 </summary>
	<param name="FileID">Specifies the ZIP file.</param>
	<returns>A <see cref="T:Ektron.Cms.LocalizationJobDataSet.LocalizationTargetDataTable"> data table </see> of XLIFF files.</returns>
	<remarks>XLIFF is a standard to interchange localization information for translation of text. The XLIFF files
 are compressed together into one or more ZIP files for convenience.</remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetInterchangeFilesByContentItem(System.Int64)">
	<summary>
 Returns a list of interchange files (i.e., XLIFF files) associated with a given content item (i.e., XLIFF Skeleton).
 </summary>
	<param name="ItemID">Specifies the content item (i.e., XLIFF skeleton).</param>
	<returns>A <see cref="T:Ektron.Cms.LocalizationJobDataSet.LocalizationTargetDataTable"> data table </see> of XLIFF files.</returns>
	<remarks>When exporting, XLIFF files for each target language are generated from a skeleton. When importing, an XLIFF
 file is associated with the skeleton content item it was generated from (the original language) and a new skeleton 
 content item generated by merging the XLIFF with the original skeleton to produce a skeleton in the target language.
 A skeleton consists of the content, typically the main HTML content block, a summary (HTML), title, meta data, etc. </remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetInterchangeFileByID(System.Int64)">
	<summary>
 Returns the interchange (i.e., XLIFF) file record specified by <paramref name="ID">ID</paramref>.
 </summary>
	<param name="ID">Specifies the interchange (i.e., XLIFF) file record.</param>
	<returns>A <see cref="T:Ektron.Cms.LocalizationJobDataSet.LocalizationTargetRow"> data record </see> of the selected XLIFF file or 
 Nothing if it does not exist.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetFlagUrlByLanguageID(System.Int32)">
	<summary>
 Returns a URL to a small image of a national flag for the country and language specified by LanguageID.
 </summary>
	<param name="LanguageID">Specifies the locale, that is, the language and country</param>
	<returns>A URL to an image of a national flag.</returns>
	<remarks>Often, only the language is of concern and the flag for the default country will be returned.</remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetFlagUrl(Ektron.Cms.LanguageDataSet.LanguageRow)">
	<summary>
 Returns a URL to a small image of a national flag for the country and language specified by Data.
 </summary>
	<param name="Data">Specifies the language data.</param>
	<returns>A URL to an image of a national flag.</returns>
	<remarks>Often, only the language is of concern and the flag for the default country will be returned.</remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetFlagUrl(Ektron.Cms.LanguageData)">
	<summary>
 Returns a URL to a small image of a national flag for the country and language specified by Data.
 </summary>
	<param name="Data">Specifies the language data.</param>
	<returns>A URL to an image of a national flag.</returns>
	<remarks>Often, only the language is of concern and the flag for the default country will be returned.</remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.GetLocalizationUrl">
	<summary>
 Returns a URL to the base directory where localization files are stored.<p/>
		<c>For example, /CMS400Demo/uploadedfiles/localization.</c>
	</summary>
	<returns>A URL to the base localization directory.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.DisplayAddViewLanguage(System.Int64)">
	<summary>
 Returns an array of all the active content languages where the LanguageData.Type indicates 
 whether the language exists (Type="VIEW") for the specified content ID or whether it does not exist
 in that language (Type="ADD").
 </summary>
	<param name="Id">Content ID</param>
	<returns>Ektron.Cms.LanguageData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Demo\\Workarea\\controls\\content\\viewcontent.ascx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.DisplayAddViewLanguageForMenus">
	<summary>
 Returns an array of all the active content languages where the LanguageData.Type indicates 
 whether the language exists (Type="VIEW") in at least one menu or whether no menus exist
 in that language (Type="ADD").
 </summary>
	<returns><seealso cref="T:Ektron.Cms.LanguageData">LanguageData()</seealso></returns>
	<remarks>Only Id, Name, BrowserCode and Type are populated.</remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.DisplayAddViewLanguageForAllContent">
	<summary>
 Returns an array of all the active content languages where the LanguageData.Type indicates 
 whether the language exists (Type="VIEW") in at least one content block or whether no content
 exists in that language (Type="ADD").
 </summary>
	<returns><seealso cref="T:Ektron.Cms.LanguageData">LanguageData()</seealso></returns>
	<remarks>Only Id, Name, BrowserCode and Type are populated.</remarks>
</member><member name="M:Ektron.Cms.LocalizationAPI.TranslateUsingWorldLingo(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Retruns a string of translated encoded content from WorldLingo Translation service
 </summary>
	<returns>string</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.LocalizationAPI">
	<summary>
 Localization, abbreviated L10N, is the process of translating and formatting text, 
 documents, and images for other human languages. This class provides an API to aid 
 in the process of extracting text for translation and then merging the translated text
 back into the CMS.
 </summary>
</member><member name="M:Ektron.Cms.Community.FriendsAPI.GetUserApi">
	<summary>
 Returns a UserAPI object that uses the same user as the current object.  
 This should be used in case the current call has been routed through the API namespace and InternalAdmin needs to be used.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.FriendsAPI.GetSentFriendInvitations(System.Int64,System.Int32,System.Int32,System.Int32@,System.Int32@)">
	<summary>
 Returns an array of FriendInvitations that have been sent invitations by invitedByUserId.
 </summary>
	<param name="userId">The Id of the user who sent the invitations to retrieve.</param>
	<param name="pageIndex">page number to retrieve if using paging.</param>
	<param name="pageSize">size of pages to retrieve.  Use 0 for all.</param>
	<param name="totalPages">returns the total number of pages available.</param>
	<param name="totalItems">returns total number of items avaiable.</param>
</member><member name="M:Ektron.Cms.Community.FriendsAPI.GetInvitedUsers(System.Int64,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
 Returns an array of users that have been sent invitations by invitedByUserId.
 </summary>
	<param name="invitedByUserId">The Id of the user who sent the invitations.</param>
	<param name="pageIndex">page number to retrieve if using paging.</param>
	<param name="pageSize">size of pages to retrieve.  Use 0 for all.</param>
	<param name="totalPages">returns the total number of pages available.</param>
	<param name="totalItems">returns total number of items avaiable.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.FlaggingAPI.AssignFlagToContent(System.Int64,System.Int64)">
	<summary>
	</summary>
	<param name="contentid"></param>
	<param name="flagid"></param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.FlaggingAPI.UpdateFlagObject(Ektron.Cms.ObjectFlagData)">
	<summary>
	</summary>
	<param name="objectFlag"></param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.FlaggingAPI.RemoveFlagObject(System.Int64)">
	<summary>
	</summary>
	<param name="flaguniqueid"></param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.FlaggingAPI.PurgeFlagEntries(System.Int64,System.DateTime,System.DateTime)">
	<summary>
 Purges all flags of a particular content block over a defined date/time range. 
 </summary>
	<param name="objectid">The ID of the content that is having its flags purged.</param>
	<param name="startDate">The beginning of the date range of content to be purged.</param>
	<param name="endDate">The end of the date range of content to be purged.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.FlaggingAPI.GetContentFlagData(System.Int64,System.String)">
	<summary>
 Returns flagData for a piece of content for a given user.
 </summary>
	<param name="contentid">Id of content to retrieve flag for.</param>
	<param name="visitorId">Visistor Id of non-cms user</param>
	<returns>ContentFlagData object.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.FlaggingAPI.GetContentFlagData(System.Int64,System.Int64)">
	<summary>
 Returns flagData for a piece of content for a given user.
 </summary>
	<param name="contentid">Id of content to retrieve flag for.</param>
	<param name="userid">Id of cms user who flagged content.</param>
	<returns>ContentFlagData object.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.FlaggingAPI.GetContentFlagData(System.Int64,System.Int64,System.String)">
	<summary>
 Returns flagData for a piece of content for a given user.
 </summary>
	<param name="contentid">Id of content to retrieve flag for.</param>
	<param name="userid">Id of cms user who flagged content.  If non CMS User, pass 0 and supply a vistorId</param>
	<param name="visitorid">Visistor Id of non-cms user.  If cms user, pass empty string.</param>
	<returns>ContentFlagData object.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.FlaggingAPI.GetContentFlagData(System.Int64,System.Int64,System.String,System.Int32)">
	<summary>
 Returns flagData for a piece of content for a given user and language.
 </summary>
	<param name="contentid">Id of content to retrieve flag for.</param>
	<param name="userid">Id of cms user who flagged content.  If non CMS User, pass 0 and supply a vistorId</param>
	<param name="visitorid">Visistor Id of non-cms user.  If cms user, pass empty string.</param>
	<returns>ContentFlagData object.</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.EkFileIO">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.EkDTSelector.#ctor(Ektron.Cms.Common.EkRequestInformation)">
	<summary>
 Constructor to create new instance.
 </summary>
	<param name="ReqInfo">Values as EkRequestInformation class. (Required)</param>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.ServerTimeSeparator">
	<summary>
 Returns the server side date separator.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.ServerDateSeparator">
	<summary>
 Returns the server side date separator.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.ClientTimeSeparator">
	<summary>
 Returns the clients time separator.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.ClientDateSeparator">
	<summary>
 Returns client date separator value.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.ClientShortDatePattern">
	<summary>
 Returns the clients date in short format.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.ClientLongDatePattern">
	<summary>
 Returns the client date in long date format.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.ClientShortTimePattern">
	<summary>
 Returns the client time in short format.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.ClientLongTimePattern">
	<summary>
 Returns the clients time in long format.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.ServerShortDatePattern">
	<summary>
 Returns the server side short date pattern.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.ServerShortTimePattern">
	<summary>
 Returns the server short time pattern.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.RequestInfo">
	<summary>
 Gets or sets the RequestInfo object.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Common.EkRequestInformation</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.formName">
	<summary>
 Sets or gets the form name.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.formElement">
	<summary>
 Sets or gets the form element value.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.spanId">
	<summary>
 Gets or sets span for calendar control.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.SpanAttributes">
	<summary>
 Gets or sets the span attributes.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.targetDate">
	<summary>
 Sets or gets the target date.
 </summary>
	<value></value>
	<returns>Date</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.extendedMeta">
	<summary>
 Returns the value of meta extended or not meta extended.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.EkDTSelector.ValidationType">
	<summary>
 Gets or sets the validation type.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.EkDTSelector.RoundMinutes(System.DateTime,System.Int32)">
	<summary>
 Math function to round the minute.
 </summary>
	<param name="dateToRound">Date value</param>
	<param name="minuteIncrement">Minute value</param>
	<returns>Date</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.EkDTSelector.displayCultureDate(System.Boolean,System.String,System.String)">
	<summary>
 Returns server culture date using culture object.
 </summary>
	<param name="isEditable">True for editable span tag, otherwise false.</param>
	<param name="inSpanID">ID value for the span tag.</param>
	<param name="inFormElemName">Name value for the span tag.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.EkDTSelector.displayCultureTime(System.Boolean,System.String,System.String)">
	<summary>
 Returns the server culture time.
 </summary>
	<param name="isEditable">True for editable span tag, otherwise false.</param>
	<param name="inSpanID">ID value for the span tag.</param>
	<param name="inFormElemName">Name value for the span tag.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.EkDTSelector.displayCultureDateTime(System.Boolean,System.String,System.String)">
	<summary>
 Returns server culture date and time.
 </summary>
	<param name="isEditable">True for editable span tag, otherwise false.</param>
	<param name="inSpanID">Id value for the span tag.</param>
	<param name="inFormElemName">Name value for the span tag.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.EkDTSelector">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.SetContentLanguage">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.GetContentLanguage">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteMetadataForView(Ektron.Cms.ContentMetaData[],System.Boolean)">
	<summary>
 Returns an HTML string for metadata view.
 </summary>
	<param name="cMetadataTypes">Metadata types.</param>
	<param name="bSearchableOnly">True or False</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteFilteredMetadataForView(Ektron.Cms.ContentMetaData[],System.Int64,System.Boolean)">
	<summary>
 Returns an HTML string for metadata view.
 </summary>
	<param name="cMetadataTypes">Metadata types.</param>
	<param name="FolderId">The folder's Id.</param>
	<param name="bSearchableOnly">True or False</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteMetadataTypeForView(System.String,System.String,System.String)">
	<summary>
 Returns a metadata type for view.
 </summary>
	<param name="DataType">Data types.</param>
	<param name="Caption">Caption value.</param>
	<param name="Value">Value. (Required)</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteFilteredMetadataForEdit(Ektron.Cms.ContentMetaData[],System.Boolean,System.String,System.Int64,System.Int32@,System.Collections.Hashtable)">
	<summary>
 Returns an HTML string for filtered metadata.
 </summary>
	<param name="cMetadataTypes">Metadata types.</param>
	<param name="bSearchableOnly">bSearchableOnly</param>
	<param name="ty">type</param>
	<param name="FolderId">The folder's ID.</param>
	<param name="Count">Number of items. (Required)</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteMetadataForEdit(Ektron.Cms.ContentMetaData[],System.Boolean,System.String,System.Int32@,System.Collections.Hashtable)">
	<summary>
 Returns an HTML string for editable metadata.
 </summary>
	<param name="cMetadataTypes">Metadata types.</param>
	<param name="bSearchableOnly">True or false</param>
	<param name="ty">Type</param>
	<param name="Count">The number of items.</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteMetadata(Ektron.Cms.ContentMetaData[],System.Boolean,System.String,System.Int32@,System.Boolean,System.Collections.Hashtable)">
	<summary>
 Returns an HTML string for metadata.
 </summary>
	<param name="cMetadataTypes">Metadata types.</param>
	<param name="bSearchableOnly">True or false</param>
	<param name="ty">Type</param>
	<param name="Count">The number of items.</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteMetadataTypeForEdit(Ektron.Cms.ContentMetaData,System.Int32,System.String,System.Collections.Hashtable,System.Boolean)">
	<summary>
 Returns an HTML string for metadata edit.
 </summary>
	<param name="cMetadataType">Metadata types.</param>
	<param name="lValidCounter">Valid counter.</param>
	<param name="ty">type</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteMetadataDefaultForEdit(Ektron.Cms.ContentMetaData,System.Int32,System.Collections.Hashtable)">
	<summary>
 Returns an HTML string for the default metadata.
 </summary>
	<param name="cMetadataType">Metadata values.</param>
	<param name="DataType">Data types</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteMetadataTypeForEditEx(System.Boolean,Ektron.Cms.ContentMetaData,System.String,System.Int32,System.String,System.Collections.Hashtable,System.Boolean)">
	<summary>
 Returns an HTML string for metadata type for edit.
 </summary>
	<param name="bIsDefault">True or False</param>
	<param name="cMetadataType">The metadata types.</param>
	<param name="DataType">The data type.</param>
	<param name="lValidCounter">Valid counter.</param>
	<param name="ty">type</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.GetEnhancedMetadataScript">
	<summary>
 Returns support javascript code for enhanced metadata.
 </summary>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.GetEnhancedMetadataArea">
	<summary>
 Returns the HTML needed to render the EnhancedMetadata selection area.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.GetSelectListControl(System.Int32,System.String,System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.BoolToYesNo(System.Boolean)">
	<summary>
 Returns labels for yes or no based on locale.
 </summary>
	<param name="bValue">True or False</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteDefaultButton(System.String,System.Boolean)">
	<summary>
 Returns HTML string for default button.
 </summary>
	<param name="id">Value of ID.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteMetadataValue(System.Object,System.Object)">
	<summary>
 Returns an HTML string metadata with a span tag.
 </summary>
	<param name="DataType">The data type. (Required)</param>
	<param name="Value">Value</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteSearchProp(System.String,System.String,System.String,System.String,Microsoft.VisualBasic.Collection,System.String,System.String,System.String)">
	<summary>
 Returns an HTML string to display search properties.
 </summary>
	<param name="MonikerStyle">Style. (Required)</param>
	<param name="DataType">The data type such as String, DateTime, Numeric, etc.</param>
	<param name="Caption">The caption value. (Required)</param>
	<param name="Name">The value for name attributes.</param>
	<param name="Items">Values of items.</param>
	<param name="AlignCaption">The value for the align attributes.</param>
	<param name="szBeginFontInfo">The value for the begin font attributes.</param>
	<param name="szEndFontInfo">The value for the end font attributes.</param>
	<returns>Object</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.ecmSearchAllAssets(Ektron.Cms.Common.SearchAssetDispayRequest)">
	<summary>
 Returns the search result based on assets.
 </summary>
	<param name="sadReq">Search parameters. (Required)</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteSearchColumns">
	<summary>
 Returns an HTML strings for the col tag.
 </summary>
	<returns>Object</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteSectionSeparator">
	<summary>
 Returns an HTML table row string with the line-height tag style.
 </summary>
	<returns>Object</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.Testselection(System.Object@,System.Object)">
	<summary>
 Returns true or false based on the MetaOption.
 </summary>
	<param name="arrofdata">An array of data.</param>
	<param name="MetaOptions">Meta options. (Required)</param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.GetSearchProperties(System.Collections.Specialized.NameValueCollection,Ektron.Cms.Common.SearchItemCustom[]@,Ektron.Cms.Common.SearchItemCustom[]@)">
	<summary>
 Returns the search's properties.
 </summary>
	<param name="FormReq">Form field values.</param>
	<param name="CustomProps">Custom properties value.</param>
	<param name="AssetProps">Asset properties value.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.Populate_AssetRequestObjectFromForm(System.Collections.Specialized.NameValueCollection)">
	<summary>
 Returns asset request object using form data.
 </summary>
	<returns>Ektron.Cms.Common.SearchAssetRequest</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteSearchProperties(Ektron.Cms.Common.SearchAssetDispayRequest)">
	<summary>
 Returns an HTML string for the search properties display.
 </summary>
	<param name="sadReq">The search asset objects. (Required)</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WritePublicSearch(Ektron.Cms.Common.SearchAssetDispayRequest)">
	<summary>
 Returns WritepublicsearchEx.
 </summary>
	<param name="sadReq">Search asset data. (Required)</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WritePublicSearchEx(Ektron.Cms.Common.SearchAssetDispayRequest,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Int32,System.String)">
	<summary>
 Returns an HTML string for extended the search attributes.
 </summary>
	<param name="sadReq">Search asset properties. (Required)</param>
	<param name="EnableAdvancedLink">True or False</param>
	<param name="EnableContentBtn">True or False</param>
	<param name="EnableContent">True or False</param>
	<param name="EnableFormsBtn">True or False</param>
	<param name="EnableForms">True or False</param>
	<param name="EnableDMSAssetsBtn">True or False</param>
	<param name="EnableDMSAssets">True or False</param>
	<param name="EnableLibImagesBtn">True or False</param>
	<param name="EnableLibImages">True or False</param>
	<param name="EnableLibFilesBtn">True or False</param>
	<param name="EnableLibFiles">True or False</param>
	<param name="EnableLibHyperlinksBtn">True or False</param>
	<param name="EnableLibHyperlinks">True or False</param>
	<param name="EnableArchivedBtn">True or False</param>
	<param name="EnableArchived">True or False</param>
	<param name="TargetFolderDescriptionList">True or False</param>
	<param name="EnableContentFieldset">True or False</param>
	<param name="ContentFieldsetLegend">True or False</param>
	<param name="EnableLibraryFieldset">True or False</param>
	<param name="LibraryFieldsetLegend">True or False</param>
	<param name="EnableFolderFieldset">True or False</param>
	<param name="FolderFieldsetLegend">True or False</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteLibrarySearchExtended(System.Int64)">
	<summary>
 Returns an HTML string for the library search custom metadata properties.
 </summary>
	<param name="folderId">The folder's ID.</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFields.WriteSearchEditProp(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
	<summary>
 Returns an HTML strings for the search edit properties.
 </summary>
	<param name="DataType">Data Type.</param>
	<param name="Required">True or False.</param>
	<param name="Name">Name. (Required)</param>
	<param name="Items">Items.</param>
	<param name="Value">Value.</param>
	<param name="DefaultValue">Default Value.</param>
	<returns>Object</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.CustomFields">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.AssignFieldToFolder(System.Object@)">
	<summary>
 Sets the selected properties into a folder.
 </summary>
	<param name="colValues">The selected properties.</param>
	<remarks>User login is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.GetFieldsByFolder(System.Int64,System.Int32)">
	<summary>
 Returns all of the custom attributes by folder.
 </summary>
	<param name="FolderID">The folder's ID.</param>
	<param name="LanguageID">The language's ID.</param>
	<returns>Microsoft.VisualBasic.Collection</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.GetAllFields(System.Int64,System.Int64)">
	<summary>
 Returns all the custom attributes for the given folder.
 </summary>
	<param name="FolderID">The folder's ID.</param>
	<param name="LanguageID">The language's ID.</param>
	<returns>Microsoft.VisualBasic.Collection</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.GetEditableCustomFieldAssignments(System.Object,System.Object)">
	<summary>
 Returns the editable custom fields.

 Break Inheritance checkbox:
   * Visible if not at root.
   * Checked if any fields assigned without inheritance.
   * If unchecked and form saved, removes all assignments.
     creates NULL assignment (CustomFieldID -1).
   * When checked, enables all assignment checkboxes (iterate
     through all of this tables elements).
   * When unchecked, disables all assignment checkboxes
     (iterate through all of this tables elements).

   * Assignment Checkboxes:
   * When clicked: if 'Assignment' button -\&gt; going unchecked,
     then ensure required us unchecked.
   * When clicked: if 'Required' button, don't accept checks if
     assigned is unchecked.
   * When form submitted, copy checked items to hidden field.
   * Form processor;
     * If break inheritance checked, and any items in hidden
       field, send contents to db.
     * If break inheritance checked, and hidden field empty,
       create dummy assignment fieldID = -1.
     * If break inheritance NOT checked, remove all
       assignments for this folder.

 Note: If editMode is false, then items are visible but not
 changeable by user.
 </summary>
	<param name="folderID">The folder's ID.</param>
	<param name="editMode">Edit mode.</param>
	<returns>String</returns>
	<remarks>
 Function GetEditableCustomFieldAssignments: ''
 </remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.AddNewEditableCustomFieldAssignments(System.Int64)">
	<summary>
 Returns the HTML string for the add/edit custom fields.
 </summary>
	<param name="parentfolderid">The parent folder's ID.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.ProcessCustomFields(System.Int64)">
	<summary>
 Process Folders' Custom-Field (and metadata) assignments:

 When form submitted, copy checked items to hidden field.
 Form processor: If break inheritance checked, and any items in hidden field, send contents to db.
                 If break inheritance checked, and hidden field empty, create dummy assignment fieldID = -1.
                 If break inheritance NOT checked, remove all assignments for this folder.
 </summary>
	<param name="folderID">The folder's ID.</param>
	<returns>Object</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.IsFolderBreakingCustFieldinheritance(System.Int64)">
	<summary>
 Returns True or False, indicating if this folder is breaking custom-field to folder assignment inheritance.
 </summary>
	<param name="folderID">The folder's ID.</param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.GetCustFieldFolderAssignmentOwner(System.Int64)">
	<summary>
 Returns the Folder's ID which the given folder is inheriting it's custom-field assignments from (may be this folder).
 Recurses until either owner is found, or root is reached (which will then be designated owner).
 </summary>
	<param name="folderID">The folder's ID.</param>
	<returns>Long</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.FilterFieldsByFolder(Ektron.Cms.ContentMetaData[],System.Int64)">
	<summary>
 Returns metadata by shorting order.
 </summary>
	<param name="cMetadataTypes">The metadata types.</param>
	<param name="folderID">The folder's ID.</param>
	<returns>Ektron.Cms.ContentMetaData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.GetFolderName(System.Int64)">
	<summary>
 Returns the folder name.
 </summary>
	<param name="folderID">The folder's ID.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.FormatSearchResults(Microsoft.VisualBasic.Collection,System.String)">
	<summary>
 Returns search result as formatted.
 </summary>
	<param name="results">Return results.</param>
	<param name="StyleInfo">The format information. (Required)</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.BuildCheckBox(System.Boolean,System.String,System.Boolean)">
	<summary>
 Returns an HTML string for a checkbox.
 </summary>
	<param name="checked">The value for the checked property.</param>
	<param name="elementName">The value for the property name.</param>
	<param name="elementEnabled">The value for the enabled property.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.TrimLeadingSlash(System.String)">
	<summary>
 Removes the leading slashes.
 </summary>
	<param name="inText">Text. (Required)</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.MakeSpacedLine(System.Int64,System.String)">
	<summary>
 Returns an HTML line tag.
 </summary>
	<param name="wrapCount">The number of characters.</param>
	<param name="colSpan">The colSpan value.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.MakeSpacedHR(System.Int64,System.String)">
	<summary>
 Returns HTML horizontal line attributes.
 </summary>
	<param name="wrapCount">Space. (Required)</param>
	<param name="colSpan">The colspan value.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.MakeSearchCheckBox(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
	<summary>
 Returns an HTML string for the search checkbox.
 </summary>
	<param name="szName">Name properties for given checkbox.</param>
	<param name="szLabel">Label properties for given checkbox.</param>
	<param name="showFlag"></param>
	<param name="checkFlag">Return check properties for the given check properties.</param>
	<param name="formatting">The value for the formatting.</param>
	<param name="SetDisabled">The value for the disabled properties.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.MakeCheckedString(System.Boolean)">
	<summary>
 Returns a given string to match with checkbox checked Boolean value.
 </summary>
	<param name="flag">True of False</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.MakeValueString(System.Boolean,System.String)">
	<summary>
 Returns HTML value attributes.
 </summary>
	<param name="flag">True or False</param>
	<param name="szValue">Value</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.GetBoolValue(System.Object)">
	<summary>
 Returns the Boolean value for a given flag.
 </summary>
	<param name="flag">The flag value.</param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.GetBreakInheritButton(System.Object,System.Object)">
	<summary>
 Returns the HTML string for the Inherit button.
 </summary>
	<param name="checkedFlag">Value for checked property.</param>
	<param name="elementEnabled">Value for element name.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CustomFieldsApi.GetJavascriptFunctions">
	<summary>
 Returns the JavaScript functions.
 </summary>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.CustomFieldsApi">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.ContentAPI.RatingGraphDisplayType">
	<summary>
 Used by the ContentRating function (ecmContentRating) to select the display style of the rating graph. Horizontal places the graph to the right of the control.
 Vertical places the graph below the control. None causes the graph to not be displayed.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetContentById(System.Int64,Ektron.Cms.ContentAPI.ContentResultType)">
	<summary>
 Loads the content details using the content ID.
 Only returns content of type CMSContentType.Content and CMSContentType.Assets.
 </summary>
	<param name="Id">The content ID</param>
	<param name="Type"></param>
	<returns>Ektron.Cms.ContentData</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\approval\\addapproval.ascx.vb</c>.<p/>
 The following is a code snippet from that page.<p/>
		<code>
    Private Sub Display_AddApproval()
        security_data = m_refContentApi.LoadPermissions(m_intId, ItemType)
        If (ItemType = "folder") Then
            folder_data = m_refContentApi.GetFolderById(m_intId)
        Else
            content_data = m_refContentApi.GetContentById(m_intId)
        End If
    Dim approval_data() As ApprovalData
        approval_data = m_refContentApi.GetAllUnassignedItemApprovals(m_intId, ItemType)
        AddApprovalToolBar()
        Populate_AddApprovals(approval_data)
    End Sub
 </code>
	</example>
	<remarks>Read permission required.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetBlogPostbyId(System.Int64)">
	<summary>
 Loads the post details using the post ID
 </summary>
	<param name="Id">The post ID</param>
	<returns>Ektron.Cms.BlogPostData</returns>
	<remarks>Read permission required.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddContent(System.String,System.String,System.String,System.String,System.String,System.String,System.Int64,System.Object,System.Object,System.Object)">
	<summary>
 Adds Content to the CMS
 </summary>
	<param name="ContentTitle">Title of content to add</param>
	<param name="ContentComment">Content comments</param>
	<param name="ContentHtml">Content HTML to display</param>
	<param name="SearchText">Search Text</param>
	<param name="SummaryHtml">Summary HTML</param>
	<param name="ContentLanguage">Content Language</param>
	<param name="FolderId">Folder to place the content in</param>
	<param name="GoLive">Go Live Date</param>
	<param name="EndDate">Content End Date</param>
	<param name="MetaInfoXml">Meta Info XML</param>
	<returns>Integer - ID of newly created content </returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateContentMetaData(System.Int64,System.Int64,System.String)">
	<summary>
 Updates a single piece of content metadata
 </summary>
	<param name="ContentID">The content id</param>
	<param name="MetaID">The Metadata type id</param>
	<param name="MetaText">The new text to assign</param>
	<returns>boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GenerateRssForContents(Ektron.Cms.Common.ContentBase[])">
	<summary>
 Returns RSS (xml formatted)content
 </summary>
	<param name="Content">ContentBase</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.LoadContentByIds(Ektron.Cms.Common.ContentRequest@,System.Web.UI.Page)">
	<summary>
 Returns list of contents using content request object
 </summary>
	<param name="req">ContentRequest</param>
	<param name="page">Page reference</param>
	<returns>ContentResult</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetContentDisplayLink(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Function takes in the required information about the string then will decide the best link to use to display the content. It decides between Linkit,
 a generated quicklink or just the template file.
 </summary>
	<param name="ContentType">Integer describing the content's type (word doc, multimedia, etc.)</param>
	<param name="ContentId">A string value of the content's ID number</param>
	<param name="ContentLanguage">A string value of the content's language number</param>
	<param name="FolderId">A string value of the content's folder ID number</param>
	<param name="host">A string value of the host name to build the link out of</param>
	<param name="StagingDomain">A string value of the content's staging domain</param>
	<param name="ProductionDomain">A string value of the content's production domain</param>
	<returns>The page link as a String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.PublishContentById(System.Int64,System.Int64,System.Int32,System.String,System.Int64,System.String)">
	<summary>
 Function takes in information about the content to be checked in and published. This goes through the normal approval chain. The content must be
 in a checked out state to the current logged in user for this to succeed. 
 </summary>
	<param name="ContentId">Integer value of the content's ID</param>
	<param name="FolderId">Integer value of the content folder's ID</param>
	<param name="ContentLanguage">Integer value of the content's language ID</param>
	<param name="dontCreateTask">If this parameter is "" a task will be created for this submit, else it will not</param>
	<param name="UserID">The user ID of task assigned by (current user). This is needed only if "dontCreateTask" is "", it is ignored else</param>
	<param name="TaskTitle">Title for the task. This is needed only if "dontCreateTask" is "", it is ignored else</param>
	<returns>A Boolean indicating success or not.</returns>
	<remarks>User must be logged in and have sufficient privileges to submit content for publishing.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.CheckOutContentById(System.Int64)">
	<summary>
 This will check the content out to the current user if the content is currently checked in and the user has privileges to check it out.
 </summary>
	<param name="ContentId">Id of the content to check out</param>
	<returns>A Boolean representing the success of the check out</returns>
	<remarks>User must be logged in and have sufficient privileges to check out the content</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.CheckInContentById(System.Int64)">
	<summary>
 This will check the content in if the content is currently checked out and the user has privileges to check it in.
 </summary>
	<param name="contentId">Id of the content to check in</param>
	<returns>A Boolean representing the success of the check in</returns>
	<remarks>User must be logged in and have sufficient privileges to check in the content</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.CheckInContentById(System.Int64,System.String)">
	<summary>
 This will check the content in if the content is currently checked out and the user has privileges to check it in.
 </summary>
	<param name="contentId">Id of the content to check in</param>
	<param name="assetFileName">File name of asset thats being checked in.</param>
	<returns>A Boolean representing the success of the check in</returns>
	<remarks>User must be logged in and have sufficient privileges to check in the content</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateContentMetadata(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{Ektron.Cms.ContentMetaData})">
	<summary>
 Updates a collection of metadata for a piece of content.
 </summary>
	<param name="contentIdList">Collection of content id's of the content who's metadata is being updated.</param>
	<param name="metadataList">Collection of metadata to be updated.  TypeId and Text must be supplied for update.</param>
	<returns></returns>
	<remarks>&gt;A Boolean representing the success of the update</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateContentMetadata(System.Int64,System.Collections.Generic.IEnumerable{Ektron.Cms.ContentMetaData})">
	<summary>
 Updates a collection of metadata for a piece of content.
 </summary>
	<param name="contentId">The id of the content who's metadata is being updated.</param>
	<param name="metadataList">Collection of metadata to be updated.  TypeId and Text must be supplied for update.</param>
	<returns></returns>
	<remarks>&gt;A Boolean representing the success of the update</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UndoCheckoutById(System.Int64)">
	<summary>
 This undoes the checkout for a piece of content which is checked out to the current user.
 </summary>
	<param name="ContentId">Id of the content for which to undo check out</param>
	<returns>A Boolean representing the success of the undo.</returns>
	<remarks>User must be logged in and have sufficient privileges to undo the checkout.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetContentStatusById(System.Int64)">
	<summary>
 This will return a single letter string which is the status of the piece of content. The letters returned are the same letters
 used in the Workarea view.
 </summary>
	<param name="ContentId">Id of the content to return the status of</param>
	<returns>A string with the single letter status of the content</returns>
	<remarks>User must be logged in and have sufficient privileges to view the status</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFieldsByFolder(System.Int64,System.Int32)">
	<summary>
 Returns the custom fields for the passed in Folder ID as a collection.
 </summary>
	<param name="FolderID">Long, the ID of the folder for which to return the custom fields</param>
	<param name="LanguageID">Long, the ID of the language for which to return the custom fields (English is 1033)</param>
	<returns>Microsoft.VisualBasic.Collection</returns>
	<example>
 This returns all of the types associated with folder 0. Then, loops through each, setting the temp
 variables to the values returned for each custom field
 <code>
    Dim content As new ContentAPI();
    Dim folderId As Long
    Dim language As Long
    Dim longTemp As Long
    Dim stringTemp As String
    folderId = 0
    language = 1033
    Microsoft.VisualBasic.Collection types = EkContent.GetFieldsByFolder(folderId, language);
    foreach (Microsoft.VisualBasic.Collection tempCol in folderTypes)
    {
        longTemp = tempCol("CustomFieldID")      'Long
        stringTemp = tempCol("CustomFieldName")  'String
        longTemp = tempCol("Assigned")           'Long
        longTemp = tempCol("Required")           'Long
        longTemp = tempCol("OwningFolderID")     'Long
    }
 </code>
	</example>
	<remarks>Must be logged in</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteContentItemById(System.Int64)">
	<summary>
 Delete the content by the content's ID.
 </summary>
	<param name="Id">The content's ID</param>
	<returns>Boolean</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.SubmitForDelete(System.Int64,System.Int64)">
	<summary>
 Delete the content by the content's Id and folder Id.
 </summary>
	<param name="cId">The content's Id</param>
	<param name="fId">The content's Folder Id</param>
	<returns>Boolean</returns>
	<remarks>User login with delete permissions required.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.MoveContentToFolderById(System.String,System.String,System.Int64)">
	<summary>
 Moves content to a folder.
 </summary>
	<param name="cId">The content's ID</param>
	<param name="cLanguages">The content's language</param>
	<param name="FID">The folder's ID</param>
	<returns>Ektron.Cms.ContentData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.RenameContentById(System.Int64,System.String)">
	<summary>
 Renames the content.
 </summary>
	<param name="cId">The content's ID</param>
	<param name="title">The content's new title</param>
	<returns>Boolean</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.CopyContentToFolderById(System.String,System.Int64,System.String,System.Boolean)">
	<summary>
 Copy the content into required folder.
 </summary>
	<param name="Id">Content ID</param>
	<param name="FID">Folder ID</param>
	<param name="Lang"></param>
	<returns>Ektron.Cms.ContentData</returns>
	<remarks>User login with administrator privileges are required to perform this operation. UrlAliases will only get copied when content is copied to another site.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFolderById(System.Int64)">
	<summary>
 Retrieves the folder's details.
 </summary>
	<param name="Id">The folder's ID</param>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\folder\\movefolderitem.ascx.vb</c>.<p/>
 The following is a code snippet from that page.<p/>
		<code>
 Private Sub InitFolderIsXmlFlags()
     Dim fldrData As FolderData
     Dim nFolderID As Integer = 0
     fldrData = m_refContentApi.GetFolderById(0)
     m_rootFolderIsXml = IIf((Not (fldrData.XmlConfiguration Is Nothing)), 1, 0)
     If (Not (Request.QueryString("id") Is Nothing)) Then
         nFolderID = Convert.ToInt32(Request.QueryString("id"))
     End If
     fldrData = m_refContentApi.GetFolderById(nFolderID)
     source_folder_is_xml.Value = IIf((Not (fldrData.XmlConfiguration Is Nothing)), 1, 0)
 End Sub
 </code>
	</example>
	<returns>Ektron.Cms.FolderData</returns>
	<remarks>Read permission required</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFolderById(System.Int64,System.Boolean)">
	<summary>
 Retrieves the folder's details.
 </summary>
	<param name="Id">The folder's ID</param>
	<returns>Ektron.Cms.FolderData</returns>
	<remarks>Read permission required</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFolderById(System.Int64,System.Boolean,System.Boolean)">
	<summary>
 Retrieves the folder's details.
 </summary>
	<param name="Id">The folder's ID</param>
	<returns>Ektron.Cms.FolderData</returns>
	<remarks>Read permission required</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.IsFolderHidden(System.Int64)">
	<summary>
 Returns flag indicating if the folder is hidden.
 </summary>
	<param name="FolderID"></param>
	<returns>Returns true if the folder is hidden, false otherwise</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetContentState(System.Int64)">
	<summary>
 Loads the content's details.
 </summary>
	<param name="Id">The content's ID</param>
	<returns>Ektron.Cms.ContentStateData</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\forms\\viewform.ascx.vb</c>.<p/>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.LoadPermissions(System.Int64,System.String,Ektron.Cms.ContentAPI.PermissionResultType)">
	<summary>
 Loads the permission for given object, such as content, folder, task, etc.
 </summary>
	<param name="Id">The object ID</param>
	<param name="RequestType">The object type</param>
	<param name="Type">The permission result type</param>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\selectcreatecontent.aspx.vb</c>.<p/>
 The following is a code snippet from that page.<p/>
		<code>
    Private Sub DrawData()
        perm_data = m_refContentApi.LoadPermissions(FolderId, "folder")
        CanCreateContent = perm_data.CanAdd
        GenerateToolBar()
        PopulateGridData()
    End Sub
 </code>
	</example>
	<returns>Ektron.Cms.PermissionData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateItemPermission(Ektron.Cms.UserPermissionData)">
	<summary>
 Updates the item permissions for a user or a usergroup.
 </summary>
	<param name="userPermData">User's Permissions Data</param>
	<returns>False if it's successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddItemPermission(Ektron.Cms.UserPermissionData)">
	<summary>
 Adds the item permissions for a user or a usergroup.
 </summary>
	<param name="userPermData">User's Permissions Data</param>
	<returns>False if it's successful.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteItemPermission(System.Int64,System.Boolean,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
	<summary>
 Deletes a user or a group from the item's permissions
 </summary>
	<param name="id">User or Group Id</param>
	<param name="IsGroupId">Given ID is a user id or a group id?</param>
	<param name="itemId">ContentId or FolderId</param>
	<param name="itemType">Given item id is EkEnumeration.CMSObjectTypes.Content or EkEnumeration.CMSObjectTypes.Folder?</param>
	<returns>False if it's successful.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetCurrentApprovalInfoByID(System.Int64)">
	<summary>
 Loads the current approval details for the given content ID.
 </summary>
	<param name="Id">The content's ID</param>
	<returns>Ektron.Cms.ApprovalData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\history\\ViewHistory.ascx.vb</c>.
 </example>
	<remarks>Read permission is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllUnassignedItemApprovals(System.Int64,System.String)">
	<summary>
 Returns all of the unassigned user/groups for a given content ID.
 </summary>
	<param name="Id">The content's ID</param>
	<param name="ItemType">The type of user</param>
	<returns>Ektron.Cms.ApprovalData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\approval\\addapproval.ascx.vb</c>.<p/>
 The following is a code snippet from that page.<p/>
		<code>
    Private Sub Display_AddApproval()
        security_data = m_refContentApi.LoadPermissions(m_intId, ItemType)
        If (ItemType = "folder") Then
            folder_data = m_refContentApi.GetFolderById(m_intId)
        Else
            content_data = m_refContentApi.GetContentById(m_intId)
        End If
    Dim approval_data() As ApprovalData
        approval_data = m_refContentApi.GetAllUnassignedItemApprovals(m_intId, ItemType)
        AddApprovalToolBar()
        Populate_AddApprovals(approval_data)
    End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DisplayAddViewLanguage(System.Int64)">
	<summary>
 Loads all the languages from the system for a given content ID and populates the Add/View drop down box with flag set on each item.
 </summary>
	<param name="Id">Content ID</param>
	<returns>Ektron.Cms.LanguageData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\content\\viewcontent.ascx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllTemplates(System.String)">
	<summary>
 Loads all of the templates.
 </summary>
	<param name="OrderBy">Order by clause</param>
	<returns>Ektron.Cms.TemplateData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\folder\\addfolder.ascx.vb</c>.
 </example>
	<remarks>User login required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetTemplatesByFolderId(System.Int64)">
	<summary>
 Retrieves the template for a given folder.
 </summary>
	<param name="Id">The folder's ID</param>
	<returns>Ektron.Cms.TemplateData</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\folder\\addfolder.ascx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllXmlConfigurations(System.String)">
	<summary>
 Reads all of the XML configurations.
 </summary>
	<param name="OrderBy">Order by clause</param>
	<returns>Ektron.Cms.XmlConfigData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\content\\editcontentattributes.ascx.vb</c>.
 </example>
	<remarks>User login required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllXmlConfigurations(System.String,System.Nullable{Ektron.Cms.Common.EkEnumeration.XmlConfigType})">
	<summary>
 Reads all of the XML configurations.
 </summary>
	<param name="OrderBy">Order by clause</param>
	<param name="Type">Nullable XmlConfigType specifies which type of xml configuration to retrieve</param>
	<returns>Ektron.Cms.XmlConfigData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\content\\editcontentattributes.ascx.vb</c>.
 </example>
	<remarks>User login required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetItemApprovals(System.Int64,System.String)">
	<summary>
 Loads the content's approvals.
 </summary>
	<param name="Id">The content's ID</param>
	<param name="ItemType">The type of content</param>
	<returns>Ektron.Cms.ApprovalItemData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\approval\\deleteapproval.ascx.vb</c>.<p/>
 The following is a code snippet from that page.<p/>
		<code>
    Private Sub Display_DeleteApproval()
        If (ItemType = "folder") Then
            folder_data = m_refContentApi.GetFolderById(m_intId)
        Else
            content_data = m_refContentApi.GetContentById(m_intId)
        End If
        Dim approval_data() As ApprovalItemData
        approval_data = m_refContentApi.GetItemApprovals(m_intId, ItemType)
        security_data = m_refContentApi.LoadPermissions(m_intId, ItemType)
        DeleteApprovalToolBar()
        Populate_DeleteApproval(approval_data)
    End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetPermissionsByItem(System.Int64,System.String,System.Int64,System.String,Ektron.Cms.ContentAPI.PermissionUserType,Ektron.Cms.ContentAPI.PermissionRequestType,Ektron.Cms.PagingInfo)">
	<summary>
 Loads the permissions for the given item. (content, folder or library)
 </summary>
	<param name="Id">The item's ID</param>
	<param name="ItemType">The item's Type</param>
	<param name="UserId">The user's ID</param>
	<param name="UserGroupList">The user group's ID</param>
	<param name="PermissionType">Enumeration of All, Content, Folder, etc., (Reference PermissionUserType)</param>
	<param name="PermissionRequest">PermissionRequest (Assigned or Unassigned)</param>
	<returns>Ektron.Cms.UserGroupData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\permission\\selectpermission.ascx.vb</c>.
 </example>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetUserPermissions(System.Int64,System.String,System.Int64,System.String,Ektron.Cms.ContentAPI.PermissionUserType,Ektron.Cms.ContentAPI.PermissionRequestType)">
	<summary>
 Loads the user permissions as a array of UserPermissionData.
 </summary>
	<param name="Id">the item's ID</param>
	<param name="ItemType">The item's type</param>
	<param name="UserId">The user's ID</param>
	<param name="UserGroupList">the group list</param>
	<param name="PermissionType">PermissionUserType</param>
	<param name="PermissionRequest">PermissionRequestType</param>
	<returns>Ektron.Cms.UserPermissionData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\permission\\viewpermissions.ascx.vb</c>.
 </example>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetUserPermissionsForContent(System.Int64)">
	<summary>
 Given a content ID, returns an integer bitmask representing the userPermsissions options that are
 available on that content for the currently logged in user
 </summary>
	<param name="contentID">The content ID</param>
	<returns>Integer bitmask of userPermissions values</returns>
	<remarks>
 If the content does not exist, this routine returns 0 (userPermissions.none)  The routine attempts to look
 at the current status of the piece of content to figure out which users can do what.
 </remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetStyleSheetByFolderID(System.Int64)">
	<summary>
 Loads all of the style sheets for the given folder ID.
 </summary>
	<param name="Id">The folder's ID</param>
	<returns>String</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\folder\\addfolder.ascx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetContentForEditing(System.Int64)">
	<summary>
 Loads the content details with checkout mode.
 </summary>
	<param name="Id">The content ID.</param>
	<returns>Ektron.Cms.ContentEditData</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\edit.aspx.vb</c>.
 </example>
	<remarks>Edit permission required.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetPathByFolderID(System.Int64)">
	<summary>
 Find's a parent ID by using a given folder ID.
 </summary>
	<param name="Id">The folder's ID</param>
	<returns>Integer</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\content.aspx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllForms">
	<summary>
 Returns all of the forms as an array of FormData.
 </summary>
	<returns>Ektron.Cms.FormData()</returns>
	<remarks>User login required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllFormsByFolder(System.Int64,System.String,System.Int32,Ektron.Cms.ContentAPI.FormResultType)">
	<summary>
 Retrieves an array of all the forms contained with the specified folder.
 Forms may be limited to a single language and type.
 </summary>
	<param name="Id">Specifies the folder.</param>
	<param name="OrderBy">Specifies how to sort the forms</param>
	<param name="LanguageId">Specifies a language or EkConstants.g_AllContentLanguages (-1) for all languages.</param>
	<param name="Type">Specifies whether only active forms or archived forms should be returned.</param>
	<returns></returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\FormApi.aspx.vb</c>.<p/>
 The following is a code snippet from that page.<p/>
		<code>
    Private Sub ShowFormList()
        Dim aryFormList As FormData()
        Dim nFolderId As Integer
        Dim nLanguageId As Integer
        nFolderId = txtFolderID.Text
        nLanguageId = LanguageSelect.LanguageID
        aryFormList = m_ContentApi.GetAllFormsByFolder(nFolderId, "title", nLanguageId, FormResultType.Form)
        If Not IsNothing(aryFormList) AndAlso aryFormList.Length &gt; 0 Then
            lblNumForms.Text = aryFormList.Length
            dgForm.DataSource = CreateFormDataSource(aryFormList)
            If Not IsNothing(dgForm.DataSource) Then
                dgForm.DataBind()
            End If
        End If
    End Sub
 </code>
	</example>
	<remarks>
 Requires authentication.
 </remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFormDataHistogramById(System.Int64)">
	<summary>
 Retrieves histogram data of the specified form.
 </summary>
	<param name="FormId">Form's Id</param>
	<returns>ArrayList</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFormByHistoryId(System.Int64)">
	<summary>
 Retrieves history information about the specified form.
 </summary>
	<param name="hId">Returns history information about the form.</param>
	<returns>Returns information about the form.</returns>
	<remarks>require authentication.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFormById(System.Int64)">
	<summary>
 Retrieves information about the specified form.
 </summary>
	<param name="Id">Specifies the form.</param>
	<returns>Returns information about the form.</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\FormApi.aspx.vb</c>.
 </example>
	<remarks>
 Does not require authentication.
 </remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFormTitleById(System.Int64)">
	<summary>
 Same as GetFormById, but returns only the form's title.
 </summary>
	<param name="Id">Specifies the form.</param>
	<returns>The title of the specified form.</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\FormApi.aspx.vb</c>.
 </example>
	<remarks>
 Does not require authentication.
 </remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetHistoryList(System.Int64)">
	<summary>
 Loads the history list.
 </summary>
	<param name="Id">The content or form ID</param>
	<returns>Ektron.Cms.ContentHistoryData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\historylist.aspx.vb</c>.
 </example>
	<remarks>Read permission is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.SearchAssetHistory(System.Int64,System.String,System.String)">
	<summary>
 Returns all history versions containing text matching the passed in search text.
 </summary>
	<param name="Id">The content ID</param>
	<param name="assetId">The asset Id of the content</param>
	<param name="SearchText">The string containing the text to search on</param>
	<returns>Ektron.Cms.ContentHistoryData()</returns>
	<remarks>Read permission is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.ShowContentById(System.Int64,System.Boolean,System.Boolean)">
	<summary>
 Loads content for viewers.
 </summary>
	<param name="Id">The content's ID</param>
	<param name="Preview">True or False flag</param>
	<returns>ContentData</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\showcontent.aspx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetContentByHistoryId(System.Int64)">
	<summary>
 Retrieves the corresponding content by the history ID.
 </summary>
	<param name="Id">The history ID</param>
	<returns>Ektron.Cms.ContentData</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\compare.aspx.vb</c>.
 </example>
	<remarks>Read permission required.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFontConfigList">
	<summary>
 Returns all of the font details in a drop down control.
 </summary>
	<returns>String</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\ewebeditpro\\cms_config.aspx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetLibrarySettings(System.Int64)">
	<summary>
 Loads the library settings.
 </summary>
	<param name="Id">The folder's ID</param>
	<returns>Ektron.Cms.LibraryConfigData</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\library.aspx.vb</c>.
 </example>
	<remarks>Login required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetExpireContent(Microsoft.VisualBasic.Collection)">
	<summary>
 Loads all of the expired content.
 </summary>
	<param name="pagedata">Required data for the report as a value, key pair</param>
	<returns>Ektron.Cms.ContentData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\reports.aspx.vb</c>.
 </example>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetSiteActivityReport(Microsoft.VisualBasic.Collection)">
	<summary>
 Loads the site activity report.
 </summary>
	<param name="pagedata">report data (Required)</param>
	<returns>Ektron.Cms.FolderData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\reports.aspx.vb</c>.
 </example>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetSiteActivityReportv2_0(Microsoft.VisualBasic.Collection)">
	<summary>
 Loads the site activity report.
 </summary>
	<param name="pagedata">report data (Required)</param>
	<returns>Ektron.Cms.ContentData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\reports.aspx.vb</c>.
 </example>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetContentReport(Microsoft.VisualBasic.Collection)">
	<summary>
 Loads the content data for the given constraints.
 </summary>
	<param name="pagedata">required report data</param>
	<returns>Ektron.Cms.ContentData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\reports.aspx.vb</c>.
 </example>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetContentReport(Ektron.Cms.ContentReportData)">
	<summary>
 Loads the content data for the given constraints.
 </summary>
	<param name="ContReportData">required report data</param>
	<returns>Ektron.Cms.ContentData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Developer\\Workarea\\reports.aspx.vb</c>.
 </example>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAssetSupertypes">
	<summary>
 Loads all of the asset supertypes supported by documents add-in.
 </summary>
	<returns>Ektron.Cms.AssetInfoData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\folder\\viewfolder.ascx.vb</c>.<p/>
 The following is a code snippet from that page.<p/>
		<code>
 Public Function GetAddMultiType() As Long
     ' gets ID for "add multiple" asset type
     GetAddMultiType = 0
     Dim count As Integer
     asset_data = m_refContentApi.GetAssetSupertypes()
     If (Not asset_data Is Nothing) Then
         For count = 0 To asset_data.Length - 1
             If (ManagedAsset_Min &lt;= asset_data(count).TypeId And asset_data(count).TypeId &lt;= ManagedAsset_Max) Then
                 If "*" = asset_data(count).PluginType Then
                     GetAddMultiType = asset_data(count).TypeId
                 End If
             End If
         Next
     End If
 End Function
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.RestoreHistoryContent(System.Int64)">
	<summary>
 Restores the content to a particular version of content.
 </summary>
	<param name="Id">The content's history ID</param>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\history\\ViewHistory.ascx.vb</c>.
 </example>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetXmlConfiguration(System.Int64)">
	<summary>
 Loads an XML configuration based on its ID.
 </summary>
	<param name="Id">The XML configuration ID</param>
	<returns>Ektron.Cms.XmlConfigData</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\controls\\xmlconfig\\editxml_config.ascx.vb</c>.<p/>
 The following is a code snippet from that page.<p/>
		<code>
    Private Sub Display_EditXmlConfig()
        cXmlCollection = m_refContentApi.GetXmlConfiguration(m_intId)
        If (cXmlCollection Is Nothing) Then
            cXmlCollection = New XmlConfigData
        End If
        EditXmlConfigToolBar()
        m_strTitle = cXmlCollection.Title
        pkDisplay = cXmlCollection.PackageDisplayXslt
    End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.InternalContentTitleSearch(Microsoft.VisualBasic.Collection)">
	<summary>
 Search using the content title.
 </summary>
	<param name="pagedata">Search criteria details as value key pair</param>
	<returns>Ektron.Cms.SearchResultData()</returns>
	<remarks>User login is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.InternalLibrarySearch(Microsoft.VisualBasic.Collection,Ektron.Cms.Common.SearchAssetRequest)">
	<summary>
 Searches library items.
 </summary>
	<param name="pagedata">Search criteria</param>
	<param name="sar">Search asset criteria</param>
	<returns>Ektron.Cms.SearchResultData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\isearch.aspx.vb</c>.
 </example>
	<remarks>User login is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllComments(System.Int64,System.Int64,System.Int64,System.String,System.Int64,System.String)">
	<summary>
 Loads all of the comments.
 </summary>
	<param name="KeyId">key ID</param>
	<param name="CommentId">Comment ID</param>
	<param name="RefId">Reference ID, (content or forms)</param>
	<param name="RefType">Reference type, C = content or T = Task</param>
	<param name="UserId">The user ID</param>
	<param name="OrderBy">The order of the comments</param>
	<returns>Ektron.Cms.CommentData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\ewebeditpro\\changecomment.aspx</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetChildFoldersByFolderId(System.Int64,System.Boolean,System.String)">
	<summary>
 Loads all the subfolders for a given folder ID.
 </summary>
	<param name="Id">The folder ID</param>
	<param name="Recursive">True = recursive look up. False = none</param>
	<param name="OrderBy">An order by clause</param>
	<returns>Ektron.Cms.FolderData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\WorkAreaTrees.aspx.vb</c>.<p/>
 The following is a code snippet from that page.<p/>
		<code>
 ' Implement the callback interface
 Private Function RaiseCallbackEvent() As String
     Dim result As String = ""
     Dim folder_arr_data As FolderData()
     Dim folder_data As FolderData
     Dim m_intId As Integer
     If (Request.QueryString("method").ToLower = "get_folder") Then
         m_intId = Convert.ToInt32(Request.Params.Item("id"))
         folder_data = m_refContentApi.GetFolderById(m_intId)
         result = SerializeAsXmlData(folder_data, folder_data.GetType)
     ElseIf (Request.QueryString("method").ToLower = "get_child_folders") Then
         m_intId = Convert.ToInt32(Request.Params.Item("folderid"))
         folder_arr_data = m_refContentApi.GetChildFoldersByFolderId(m_intId)
         result = SerializeAsXmlData(folder_arr_data, folder_arr_data.GetType)
     End If
     Return (result)
 End Function
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetChildFolders(System.Int64,System.Boolean,Ektron.Cms.Common.EkEnumeration.FolderOrderBy)">
	<summary>
 Loads all the subfolders for a given folder ID.
 </summary>
	<param name="Id">The folder ID</param>
	<param name="Recursive">True = recursive look up. False = none</param>
	<param name="OrderBy">The field to order the results by</param>
	<returns>Ektron.Cms.FolderData()</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source code file: <p/>
		<c>CMS400Example\\Workarea\\WorkAreaTrees.aspx.vb</c>.<p/>
 The following is a code snippet from that page.<p/>
		<code>
 ' Implement the callback interface
 Private Function RaiseCallbackEvent() As String
     Dim result As String = ""
     Dim folder_arr_data As FolderData()
     Dim folder_data As FolderData
     Dim m_intId As Integer
     If (Request.QueryString("method").ToLower = "get_folder") Then
         m_intId = Convert.ToInt32(Request.Params.Item("id"))
         folder_data = m_refContentApi.GetFolderById(m_intId)
         result = SerializeAsXmlData(folder_data, folder_data.GetType)
     ElseIf (Request.QueryString("method").ToLower = "get_child_folders") Then
         m_intId = Convert.ToInt32(Request.Params.Item("folderid"))
         folder_arr_data = m_refContentApi.GetChildFoldersByFolderId(m_intId, false, FolderOrderBy.Name)
         result = SerializeAsXmlData(folder_arr_data, folder_arr_data.GetType)
     End If
     Return (result)
 End Function
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetChildContentByFolderId(System.Int64,System.Boolean,System.String,System.Int32,System.Int32@,System.Int32)">
	<summary>
 Loads all of the contents for the given folder.
 </summary>
	<param name="Id">the folders ID</param>
	<param name="Recursive">True = recursive look up. False = none.   Note:  This parameter is not functional.  Please use ContentApi.GetList() api for recursive support. </param>
	<param name="OrderBy">An order by clause</param>
	<param name="currentPage">Optional, An integer value. The current page to look up. Default is 0, the first page</param>
	<param name="totalPages">Optional, An integer ref value. Returns the total number of pages based on page size. Default is 1</param>
	<param name="pageSize">Optional, An integer value. Number of items returned per page. Default is 300</param>
	<returns>Ektron.Cms.ContentData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddXmlConfiguration(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds an XML configuration for XML oriented content.
 </summary>
	<param name="pagedata">XML configuration data</param>
	<returns>Integer</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.RelicateXmlConfiguration(System.Int64,System.String)">
	<summary>
 Replicate the XML configuration.
 </summary>
	<param name="Id">The inherited XML ID</param>
	<param name="Title">Title</param>
	<returns>Integer</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.ReplicateXmlConfiguration(System.Int64,System.String)">
	<summary>
 Replicate the XML configuration.
 </summary>
	<param name="Id">The inherited XML ID</param>
	<param name="Title">Title</param>
	<returns>Integer</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateXmlConfiguration(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the XML configuration details.
 </summary>
	<param name="pagedata">The XML configuration details</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteXmlConfiguration(System.Int64)">
	<summary>
 Deletes an XML configuration.
 </summary>
	<param name="Id">XML configuration ID</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.SetXpathLabels(System.Int64,Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the XPath labels.
 </summary>
	<param name="Id">The XML configuration ID</param>
	<param name="items">The item data.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdatexmlCollectionPackage(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the XML collection package.
 </summary>
	<param name="package">The XML details</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetJustTeaserByContentId(System.Int64,System.Int32)">
	<summary>
 Returns the teaser by using the content's ID.
 </summary>
	<param name="Id">The content's ID</param>
	<param name="intContentLanguage">The content language</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetJustMetaDataByContIdMetaId(System.Int64,System.Int64)">
	<summary>
 Retrieves the metadata by using the content's ID and the metadata ID.
 </summary>
	<param name="ContId">The content's ID</param>
	<param name="MetaId">The metadata's ID</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetJustFolderIdByContentId(System.Int64)">
	<summary>
 Finds the folder ID by using the a content's ID.
 </summary>
	<param name="Id">The content's ID</param>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetJustFolderId(System.String,System.Int64)">
	<summary>
	</summary>
	<param name="FolderName"></param>
	<param name="ParentId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetParentIdByFolderId(System.Int64)">
	<summary>
 Finds a parent ID by using the folder's ID.
 </summary>
	<param name="FolderId">The folder's ID</param>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetDomainByContentId(System.Int64)">
	<summary>
 Gets web domain for a piece of content.
 </summary>
	<param name="ContentId">The content's ID</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.SaveContent(Ektron.Cms.ContentEditData)">
	<summary>
 Updates the checked out content block.
 Only following properties can be updated:
      contentData.Title
      contentData.Teaser
      contentData.Comment
      contentData.GoLive
      contentData.Html
      contentData.EndDate
      contentData.EndDateAction
      contentData.ManualAlias
 </summary>
	<param name="contentEditData"></param>
	<returns>False if successful</returns>
	<remarks>Content must be in the checkedout state.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetLibraryTypes(System.Int64,System.String)">
	<summary>
 Loads the library types.
 </summary>
	<param name="Id">The folder's ID</param>
	<param name="OrderBy">Order by clause</param>
	<returns>Object</returns>
	<remarks>Library read permission is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllChildLibItemsByType(System.String,System.Int64,System.String,System.Int32,System.Int32,System.Int32@)">
	<summary>
 Loads all of the library items by type.
 </summary>
	<param name="Type">The type (Required)</param>
	<param name="ParentId">The folder's ID</param>
	<param name="OrderBy">The order to load the library items</param>
	<param name="currentPageNum">The current page number</param>
	<param name="pageSize">The page size</param>
	<param name="totalPages">The total pages</param>
	<returns>Ektron.Cms.LibraryData()</returns>
	<remarks>User login required to perform this operation</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetLibraryItemByID(System.Int64,System.Int64)">
	<summary>
 Loads the library item's data.
 </summary>
	<param name="Id">The library's ID</param>
	<param name="ParentId">The folder's ID</param>
	<returns>Ektron.Cms.LibraryData</returns>
	<remarks>Read permission to the folder is required to perform this operation</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetLibraryItemByUrl(System.String)">
	<summary>
 Loads the library item's data given the URL path to the item
 </summary>
	<param name="ItemUrl">The library's Item's URL</param>
	<returns>Ektron.Cms.LibraryData</returns>
	<remarks>Read permission to the folder is required to perform this operation</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetLibraryItemByID_UnAuth(System.Int64)">
	<summary>
 Loads the library item data.
 </summary>
	<param name="LibID">The library ID</param>
	<returns>Ektron.Cms.LibraryData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllLoadBalancePathsExtn(System.Int64,System.String)">
	<summary>
 Returns an array of LoadBalanceData.
 </summary>
	<param name="Id">Load balance ID</param>
	<param name="Type">Use images or files</param>
	<returns>Ektron.Cms.LoadBalanceData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllLoadBalancePaths(System.String)">
	<summary>
 Returns all the load balance paths as a array of LoadBalanceData.
 </summary>
	<param name="Type">Type (images or files)</param>
	<returns>Ektron.Cms.LoadBalanceData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetLBPathByID(System.Int64)">
	<summary>
 Gets the load balance path by ID.
 </summary>
	<param name="Id">th load balance path's ID</param>
	<returns>Ektron.Cms.LoadBalanceData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteLibraryItemById(Microsoft.VisualBasic.Collection)">
	<summary>
 Deletes the library items from the system.
 </summary>
	<param name="pagedata">Library item data</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteLibraryItemForImageTool(System.String)">
	<summary>
 Deletes library item that was being modified by image tool and user clicks on cancel
 </summary>
	<param name="url">URL of temp image</param>
	<remarks>User login with delete library privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddAssetForImageTool(System.String,System.String)">
	<summary>
 Adds asset info for image being modified by image tool
 </summary>
	<param name="OldFilename">filename of previous asset item</param>
	<param name="NewFilename">filename of new asset item</param>
	<remarks>Changes AssetDataTable so asset handler will serve updated image</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteAssetForImageTool(System.String)">
	<summary>
 Deletes asset info for image being modified by image tool and user clicks on cancel
 </summary>
	<param name="Filename">filename of previous asset item</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateQlinkTemplates(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the Quicklink template.
 </summary>
	<param name="pagedata">Quicklink template data</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddLibraryItem(Ektron.Cms.LibraryData@)">
	<summary>
 Adds a library item.
 </summary>
	<param name="libraryData">Details of the new libray item</param>
	<returns>Id of the newly added library item</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddLibraryItemForImageTool(Ektron.Cms.LibraryData@)">
	<summary>
 Adds a library item for edit by ImageTool
 </summary>
	<param name="libraryData">Details of the new libray item</param>
	<returns>Id of the newly added library item</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateLibrarySettings(Microsoft.VisualBasic.Collection)">
	<summary>
 Update the library settings.
 </summary>
	<param name="pagedata">Library settings data</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateLibraryItemByID(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates a library item.
 </summary>
	<param name="pagedata">Library item data</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateLibraryMetadataByID(System.Int64,Ektron.Cms.ContentMetaData[])">
	<summary>
 Updates metadata into a library item
 </summary>
	<param name="libraryID">library item's ID</param>
	<param name="metadata">array of metadata to write</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteLoadBalanceItemByID(System.Int64)">
	<summary>
 Deletes the load balance item from the system.
 </summary>
	<param name="Id">The load balance item ID</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddLoadBalanceItem(System.String,Microsoft.VisualBasic.Collection)">
	<summary>
 Adds a load balance path for files and images.
 </summary>
	<param name="Type">The path type, either images or files</param>
	<param name="pagedata">Load balance item values for path and relative</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateLoadBalanceSettingsByID(System.String,Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the load balance settings.
 </summary>
	<param name="Id">The load balance data</param>
	<param name="pagedata">The load balance items</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteLibraryItemByIDExt(Microsoft.VisualBasic.Collection)">
	<summary>
 Deletes the library item by extension.
 </summary>
	<param name="pagedata">Library item data</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFontById(System.Int64)">
	<summary>
 Loads the required font using the font's ID.
 </summary>
	<param name="Id">The font's ID</param>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllFonts">
	<summary>
 Loads all of the fonts as a array of FontData.
 </summary>
	<returns>Ektron.Cms.FontData()</returns>
	<remarks>User login is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddFont(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds a new font to the system.
 </summary>
	<param name="data">Font data as a value key pair</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateFont(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the font.
 </summary>
	<param name="data">The font's data</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteFont(Microsoft.VisualBasic.Collection)">
	<summary>
 Deletes a font from the system.
 </summary>
	<param name="data">Required font data (for example, font ID)</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetMyAssetMgtID">
	<summary>
 Retrieves the Document Management functionality client ID.
 </summary>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAssetMgtInfo">
	<summary>
 Loads all of the registered plug-in type details.
 </summary>
	<returns>Ektron.Cms.AssetInfoData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAssetMgtConfigInfo">
	<summary>
 Loads all of the registered plug-in configuration details.
 </summary>
	<returns>Ektron.Cms.AssetConfigInfo()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.SetAssetMgtConfigInfo(Ektron.Cms.AssetConfigInfo[])">
	<summary>
 Updates the Document Management configuration information.
 </summary>
	<param name="asset_config">The Document Management configuration data</param>
	<returns>Boolean</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetViewUrl(System.String,System.Int32)">
	<summary>
 Get Url associated with the document
 </summary>
	<param name="AssetId">The document's ID (Required)</param>
	<param name="ContentType">The type of the content, such as office documents or managed files or * (all).</param>
	<returns>String</returns>
	<remarks>The Document Management functionality with a valid license is required to perfrom this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetEditSnippet(System.String,System.Int32)">
	<summary>
 Loads the edit snippet for the given document. Used with the Document Management functionality.
 </summary>
	<param name="AssetId">The document's ID (Required)</param>
	<param name="ContentType">The type of the content, such as office documents or managed files or * (all).</param>
	<returns>String</returns>
	<remarks>The Document Management functionality with a valid license is required to perfrom this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddAsset(System.IO.Stream,Ektron.Cms.AssetUpdateData)">
	<summary>
 Adds an asset to the CMS.
 </summary>
	<param name="assetdata">Asset details in AssetUpdateData</param>
	<param name="inputStream">Input Stream pointing to the file to be uploaded</param>
	<returns>Content Id</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.EditAsset(System.IO.Stream,Ektron.Cms.AssetUpdateData)">
	<summary>
 Edits an asset that was uploaded into the CMS.
 </summary>
	<param name="assetdata">Asset details in AssetUpdateData</param>
	<param name="inputStream">Input Stream pointing to the file to be uploaded if file is being overwritten</param>
	<returns>A Boolean indicating success, False for success</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetMetadataByFolder(System.Int64)">
	<summary>
 Returns a collection of ContentMetadata assigned to a folder.
 </summary>
	<param name="folderId">folder to retrieve metadata for</param>
	<returns>array of Ektron.Cms.ContentMetadata objects</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetContentMetadataList(System.Int64)">
	<summary>
 Loads all of the metadata for the given content.
 </summary>
	<param name="ContentId">The contents ID.</param>
	<returns>Ektron.Cms.CustomAttributeList</returns>
	<remarks>Read permissions required.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetContentMetadataList(System.Int64,System.Boolean)">
	<summary>
 Loads all of the metadata for the given content.
 </summary>
	<param name="ContentId">The contents ID.</param>
	<param name="preview">True implies get metadata from staging content, else use published content</param>
	<returns>Ektron.Cms.CustomAttributeList</returns>
	<remarks>Read permissions required.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetMetaDataTypes(System.String)">
	<summary>
 Loads all the metadata types.
 </summary>
	<param name="OrderBy">Order by clause</param>
	<returns>Ektron.Cms.ContentMetaData()</returns>
	<remarks>User login is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetMetadataTypeByID(System.Int64)">
	<summary>
 Loads all content metadata.
 </summary>
	<param name="Id">The metadata type ID</param>
	<returns>Ektron.Cms.ContentMetaData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateMetadataTypeByID(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the metadata type.
 </summary>
	<param name="pagedata">Metadata types</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddMetaDataType(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds a new metadata type to the system
 </summary>
	<param name="pagedata">Metadata items as value key pair</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddMetaDataType(Ektron.Cms.ContentMetaData@)">
	<summary>
 Adds a new metadata type to the system
 </summary>
	<param name="metaDataItem">ContentMetadata object containing metadata definition details</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteMetadataType(System.Int64)">
	<summary>
 Deletes a metadata type from the system.
 </summary>
	<param name="Id">Metatype ID</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetIntegratedFolders">
	<summary>
 Loads all the metadata types.
 </summary>
	<returns>Ektron.Cms.IntegratedFolderData()</returns>
	<remarks>User login is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetIntegratedFolderByID(System.Int64)">
	<summary>
 Loads all content metadata.
 </summary>
	<param name="Id">The metadata type ID</param>
	<returns>Ektron.Cms.ContentMetaData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateIntegratedFolderByID(Ektron.Cms.IntegratedFolderData)">
	<summary>
 Updates the metadata type.
 </summary>
	<param name="integratedFolder">IntegratedFolderData</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddIntegratedFolder(Ektron.Cms.IntegratedFolderData)">
	<summary>
 Adds a new IntegratedFolder to the system
 </summary>
	<param name="integratedFolder">IntegratedFolder object containing integrated folder data definition details</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteIntegratedFolder(System.Int64)">
	<summary>
 Deletes a metadata type from the system.
 </summary>
	<param name="Id">Integrated Folder ID</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFormFieldDataById(System.Int64,System.String,System.String)">
	<summary>
 Retrieves the submitted data for all fields from a specified form. 
 All the data may be retrieved or just data submitted within a given date range.
 </summary>
	<param name="FormId">
 	Specifies the form. 
 	Value Type: <see cref="T:System.Int32"/> (System.Int32)
 </param>
	<param name="StartDate">
 	Optionally limit the data returned to include only those submitted on or after the given date. 
 	Value Type: <see cref="T:System.String"/> (System.String)
 </param>
	<param name="EndDate">
 	Optionally limit the data returned to include only those submitted on or before the given date. 
 	Value Type: <see cref="T:System.String"/> (System.String)
 </param>
	<returns>Returns an array of submitted data.	<see cref="T:Ektron.Cms.FormSubmittedData"/> (Ektron.Cms.FormSubmittedData)</returns>
	<remarks>
 Does not require authentication.
 </remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFormFieldDataByDataId(System.Int64,System.Int64)">
	<summary>
 Retrieves a single instance of submitted data, as specified by FormDataId, 
 for all fields from a specified form. 
 </summary>
	<param name="FormId">
 	Specifies the form. 
 	Value Type: <see cref="T:System.Int32"/> (System.Int32)
 </param>
	<param name="FormDataId">
 	Specifies the instance of submitted data. 
 	Value Type: <see cref="T:System.Int32"/> (System.Int32)
 </param>
	<returns>Returns the submitted data or null/Nothing, if none found.	<see cref="T:Ektron.Cms.FormSubmittedData"/> (Ektron.Cms.FormSubmittedData)</returns>
	<remarks>
 Does not require authentication.
 </remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateFormFieldData(System.Int64,System.Int64,Ektron.Cms.FormSubmittedData)">
	<summary>
 Updates a single instance of submitted data, as specified by FormDataId, 
 for all fields from a specified form.
 </summary>
	<param name="FormId">
 	Specifies the form. 
 	Value Type: <see cref="T:System.Int32"/> (System.Int32)
 </param>
	<param name="FormDataId">
 	Specifies the instance of submitted data. 
 	Value Type: <see cref="T:System.Int32"/> (System.Int32)
 </param>
	<param name="SubmittedData">
 	The field data values to be updated. 
 	Value Type: <see cref="T:Ektron.Cms.FormSubmittedData"/> (Ektron.Cms.FormSubmittedData)
 </param>
	<remarks>
 Does not require authentication.
 </remarks>
</member><member name="M:Ektron.Cms.ContentAPI.SubmitFormFieldData(System.Int64,Ektron.Cms.FormSubmittedData,System.Boolean,System.String@)">
	<summary>
 Adds form data as if it was submitted during a browser post to the web server.
 </summary>
	<param name="FormId">
 	Specifies the form that corresponds to the data. 
 	Value Type: <see cref="T:System.Int32"/> (System.Int32)
 </param>
	<param name="Data">
 	The data to submit. 
 	Value Type: <see cref="T:Ektron.Cms.FormSubmittedData"/> (Ektron.Cms.FormSubmittedData)
 </param>
	<param name="SendNotification">
 	(Optional) Specifies whether to send notifications that a form submission has occurred or not.
     For example, whether to send an email or assign a form submission task as configured for the form. 
 	Value Type: <see cref="T:System.Boolean"/> (System.Boolean)
 </param>
	<param name="SubmittedDataXml">
 	(Optional) XML packet of submitted data.
 	Reference Type: <see cref="T:System.String"/> (System.String)
 </param>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.EmailFormFieldData(Ektron.Cms.FormData,System.String)">
	<summary>
 Sends an email, as specified in FormInfo, of the SubmittedDataXml.
 </summary>
	<param name="FormInfo">
 The properties of the form associated with the data. This information may be 
 retrieved by calling GetFormById. 
 Value Type: <see cref="T:Ektron.Cms.FormData"/> (Ektron.Cms.FormData)
 </param>
	<param name="SubmittedDataXml">
 The form data submitted in XML format. 
 Value Type: <see cref="T:System.String"/> (System.String)
 </param>
	<remarks>
 This routine is called automatically when calling SubmitFormFieldData 
 if SendNotification is True and the form is configured to send an email 
 notification when data is submitted. The SubmittedDataXml is typically
 retrieved by calling SubmitFormFieldData.
 </remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AssignFormTask(Ektron.Cms.FormData,System.String)">
	<summary>
 Assigns a form submission task, as specified in FormInfo, of the SubmittedDataXml.
 </summary>
	<param name="FormInfo">
 The properties of the form associated with the data. This information may be 
 retrieved by calling GetFormById. 
 Value Type: <see cref="T:Ektron.Cms.FormData"/> (Ektron.Cms.FormData)
 </param>
	<param name="SubmittedDataXml">
 The form data submitted in XML format. Value Type: <see cref="T:System.String"/> (System.String)
 </param>
	<returns>Returns True if the task was successfully assigned.	<see cref="T:System.Boolean"/> (System.Boolean)</returns>
	<remarks>
 This routine is called automatically when calling SubmitFormFieldData 
 if SendNotification is True and the form is configured to assign a task 
 when data is submitted. The SubmittedDataXml is typically
 retrieved by calling SubmitFormFieldData.
 </remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFormFieldList(System.Int64)">
	<summary>
 Retrieves the list of form fields defined in the specified form.
 </summary>
	<param name="FormId">
 	Specifies the form. 
 	Value Type: <see cref="T:System.Int32"/> (System.Int32)
 </param>
	<returns>The list for defined fields in the given form.	<see cref="T:Ektron.Cms.FormFieldList"/> (Ektron.Cms.FormFieldList)</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFormFieldList(System.String)">
	<summary>
 Retrieves the list of form fields defined in the given form.
 </summary>
	<param name="Html">
 	The XHTML of the form. 
 </param>
	<returns>The list for defined fields in the given form.	<see cref="T:Ektron.Cms.FormFieldList"/> (Ektron.Cms.FormFieldList)</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFormFieldQuestionsById(System.Int64)">
	<summary>
 Retrieves the table of form fields and their questions in a specified form.  
 In a CMS form, the form question is defined by the user in the tool tips text field
 in the form element dialog during design time.
 </summary>
	<param name="FormId">
 Specifies the form. 
 	Value Type: <see cref="T:System.Int32"/> (System.Int32)
 </param>
	<returns>a table of defined fields with the corresponding questions in a given form.</returns>
	<remarks>these questions is mainly used for reporting.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateRule(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the rule.
 </summary>
	<param name="pagedata">Rule data as a collection</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddRule(Microsoft.VisualBasic.Collection)">
	<summary>
 Add forms validation rule to the system.
 </summary>
	<param name="pagedata">Rule related information as a value key pair</param>
	<returns>Integer</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetRuleToEdit(System.Int64,System.Int64)">
	<summary>
 Retrieves the required rule in edit mode.
 </summary>
	<param name="FormId">The form's ID</param>
	<param name="RuleId">The rule's ID</param>
	<returns>Ektron.Cms.FormValidationData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllValidationEnum(System.String,System.String,System.Boolean)">
	<summary>
 Lists all of the available validation functions from the system.
 </summary>
	<param name="Element">html element</param>
	<param name="ElementType">html type such as text or password</param>
	<param name="Logic">flag to true or false</param>
	<returns>Microsoft.VisualBasic.Collection</returns>
	<remarks>User login required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFormWithValidation(System.Int64)">
	<summary>
 returns form details including validations
 </summary>
	<param name="Id">form id</param>
	<returns>formdata</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFormSubmissionCountById(System.Int64,System.String)">
	<summary>
 return the sumbission count
 </summary>
	<param name="cID">form id</param>
	<param name="pollFieldName">optional Poll field name</param>
	<returns>long</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllSubscriptions">
	<summary>
 Loads all the subscriptions.
 </summary>
	<returns>Ektron.Cms.SubscriptionData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllActiveSubscriptions">
	<summary>
 Loads all of the active subscriptions.
 </summary>
	<returns>Ektron.Cms.SubscriptionData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetSubscriptionsForContent(System.Int64)">
	<summary>
 Loads the subscriptions for the given content. 
 </summary>
	<param name="ContentId">The content's ID</param>
	<returns>Ektron.Cms.SubscriptionData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetSubscriptionPropertiesForContent(System.Int64)">
	<summary>
 Retrieves the subscription properties for content using the content's ID.
 </summary>
	<param name="ContentId">The content's ID</param>
	<returns>Ektron.Cms.SubscriptionPropertiesData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetSubscriptionPropertiesForFolder(System.Int64)">
	<summary>
 Retrieves the subscription properties for a given folder.
 </summary>
	<param name="FolderId">The folder's ID</param>
	<returns>Ektron.Cms.SubscriptionPropertiesData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetSubscriptionsForFolder(System.Int64)">
	<summary>
 Loads the subscriptions for a given folder.
 </summary>
	<param name="FolderId">The folder's ID</param>
	<returns>Ektron.Cms.SubscriptionData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFolderInheritedFrom(System.Int64)">
	<summary>
 Retrieves the inherited parent ID
 </summary>
	<param name="FolderId">The folder's ID</param>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetSubscriptionById(System.Int64)">
	<summary>
 Retrieves a subscription by using its ID.
 </summary>
	<param name="Id">The subscription's ID</param>
	<returns>Ektron.Cms.SubscriptionData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddSubscription(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds a subscription.
 </summary>
	<param name="data">Subscription name</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateSubscription(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the subscription.
 </summary>
	<param name="data">The subscription details</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteSubscription(Microsoft.VisualBasic.Collection)">
	<summary>
 Deletes a subscription from the system.
 </summary>
	<param name="data">Subscription data</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllSubscriptionMessages">
	<summary>
 Loads all the subscription messages.
 </summary>
	<returns>Ektron.Cms.EmailMessageData()</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetSubscriptionMessagesForType(Ektron.Cms.Common.EkEnumeration.EmailMessageTypes)">
	<summary>
 Retrieve subscription message for type.
 </summary>
	<param name="MessageType">The message type</param>
	<returns>Ektron.Cms.EmailMessageData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetDefaultSubscriptionMessageForType(Ektron.Cms.Common.EkEnumeration.EmailMessageTypes)">
	<summary>
 Retrieve default subscription message for type.
 </summary>
	<param name="MessageType">The message type</param>
	<returns>Ektron.Cms.EmailMessageData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetSubscriptionMessageById(System.Int64)">
	<summary> 
 Retrieves a subscription message by using the subscription ID  
 </summary>
	<param name="Id">The subscription's ID</param>
	<returns>Ektron.Cms.EmailMessageData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddSubscriptionMessage(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds subscription message(s)
 </summary>
	<param name="data">Subscription message data</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateSubscriptionMessage(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the subscription message.
 </summary>
	<param name="data">The subscription message details.</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteSubscriptionMessage(Microsoft.VisualBasic.Collection)">
	<summary>
 Deletes the subscription message from the system.
 </summary>
	<param name="data">Subscription message data</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetAllEmailFrom">
	<summary>
 Returns all of the email as an array of EmailFromData.
 </summary>
	<returns>Ektron.Cms.EmailFromData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetEmailFromById(System.Int64)">
	<summary>
 Loads the email for the given user.
 </summary>
	<param name="Id">The user's ID</param>
	<returns>Ektron.Cms.EmailFromData</returns>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddEmailFrom(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds a subscription email address.
 </summary>
	<param name="data">Email address as a collection</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateEmailFrom(Microsoft.VisualBasic.Collection)">
	<summary>
 Update the email address.
 </summary>
	<param name="data">email data</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteEmailFrom(Microsoft.VisualBasic.Collection)">
	<summary>
 Deletes a subscription email address from system.
 </summary>
	<param name="data">Email data</param>
	<remarks>User login with administrator privileges are required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.ContentRatingAddRating(System.Int64,System.Int64,System.Int32,System.String)">
	<summary>
 Adds a content rating to the database. Internally a check is done to ensure the user has not already rated the content, and passes down the rating and
 any comments the user supplied. 
 </summary>
	<param name="contentid">The numeric ID associated with the content block being rated.</param>
	<param name="userid">The unique global identifier stored as a cookie by the user.</param>
	<param name="userRating">The rating the user supplies (1-9)</param>
	<param name="userComments">Optional comments that the user provides.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetContentRatingStatistics(System.Int64,System.DateTime,System.DateTime)">
	<summary>
 Returns a collection with keys as ordinal numbers and frequency as the value. That is, {1=&gt;3,2=&gt;7,...,9=&gt;12}. Rating results are bounded by startDate and endDate.<p></p>
 This function is overloaded. See Also:<p/>
 GetContentRatingStatistics(Integer Integer String)
 </summary>
	<param name="contentID">The numeric ID associated with the content block being rated.</param>
	<param name="startDate">Bounds the result set by only ratings that occurred after this date.</param>
	<param name="endDate">Bounds the result set by only ratings that occurred before this date.</param>
	<returns>Returns a collection of data with keys "total" =&gt; number of ratings, "sum" =&gt; sum of all ratings, "r1, "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9". </returns>
	<remarks>Note that average rating = sum/total.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetContentRatingStatistics(System.Int64,System.Int64,System.String)">
	<summary>
 Returns a collection with keys as ordinal numbers and frequency as the value. That is, {1=&gt;3,2=&gt;7,...,9=&gt;12}. Rating results are bounded by startDate and endDate.<p></p>
 This function is overloaded. See Also:<p/>
 GetContentRatingStatistics(Integer DateTime DateTime)
 </summary>
	<param name="contentid">The numeric ID associated with the content block being rated.</param>
	<returns>Returns a collection of data with keys "total" =&gt; number of ratings, "sum" =&gt; sum of all ratings, "r1, "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9". </returns>
	<remarks>Note that average rating = sum/total.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.PurgeContentRatings(System.Int64,System.DateTime,System.DateTime)">
	<summary>
 Purges all ratings of a particular content block over a defined date/time range. 
 </summary>
	<param name="contentid">The ID of the content that is having its ratings purged.</param>
	<param name="startDate">The beginning of the date range of content to be purged.</param>
	<param name="endDate">The end of the date range of content to be purged.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.ecmContentRating(System.Int64,System.Web.UI.Page,System.String,Ektron.Cms.ContentRatingLabels,Ektron.Cms.ContentAPI.RatingGraphDisplayType,Ektron.Cms.ContentAPI.RatingGraphDisplayType,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
	<summary>
 Constructs a string that represents a content rating element on a web site. This is composed of a rating dialog and a graph representing current ratings. Note that the content rating server control wraps this functionality.
 </summary>
	<param name="contentID">The numeric ID associated with the content block being rated.</param>
	<param name="currentPage">A reference to the System.Web.UI.Page object representing the active web page.</param>
	<param name="key">Specifies a unique ID of this element. No two content rating controls on the same page should specify the same key.</param>
	<param name="Labels">Specifies the labels of the control to be displayed. See Ektron.Cms.ContentRatingLabels</param>
	<param name="initialGraph">Specifies to show the initial (non-rated) graph to be horizontal to the control, below it, or not at all.</param>
	<param name="ratingCompleteGraph">Specifies to show the complete (rated) graph to be horizontal to the control, below it, or not at all.</param>
	<param name="padding">Specifies the number of pixels between the rating control and the graph.</param>
	<param name="bgColor">Specifies the background color of the graph.</param>
	<param name="barColor">Specifies the bar color of the graph.</param>
	<param name="TextColor">Specifies the text color of the graph.</param>
	<returns>Returns a string representing the final control.</returns>
	<remarks>Note that the ContentRating server control nicely wraps this function.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.BlogObject(System.Int64,System.DateTime)">
	<summary>
 Overloaded Method to obtain a BlogData Class.
 Accepts the integer ID of the blog, as well as the StartDate (as DateTime) for the posts.
 Returns either a populated BlogData class or null (nothing). <p></p> 
 This function is overloaded. See Also:<p></p>BlogObject(Integer)<p></p>  
 BlogObject(Integer DateTime Integer Integer)<p></p> 
 BlogObject(FolderData)
 </summary>
	<param name="BlogID">Integer ID of the blog. This corresponds to the id of the blog folder.</param>
	<param name="StartDate">The DateTime value to get posts from. You can obtain historical posts with this property, or leave it blank to begin now.</param>
	<returns>Either a populated BlogData class or null (nothing).</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.BlogObject(System.Int64)">
	<summary>
 Overloaded Method to obtain a BlogData Class.
 Accepts the integer ID of the blog.
 Returns either a populated BlogData class or null (nothing). <p></p> 
 This function is overloaded. See Also:<p></p>BlogObject(Integer DateTime)<p></p> 
 BlogObject(Integer DateTime Integer Integer)<p></p>
 BlogObject(FolderData)
 </summary>
	<param name="BlogID">Integer ID of the blog. This corresponds to the id of the blog folder.</param>
	<returns>Either a populated BlogData class or null (nothing).</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.BlogObject(System.Int64,System.DateTime,System.Int32,System.Int32)">
	<summary>
 Overloaded Method to obtain a BlogData Class.
 Accepts the integer ID of the blog, the StartDate (as DateTime) for the posts, the number of posts visible and the language ID.
 Returns either a populated BlogData class or null (nothing).<p></p> 
 This function is overloaded. See Also:<p></p>BlogObject(Integer)<p></p> 
 BlogObject(Integer DateTime)<p></p>
 BlogObject(FolderData)
 </summary>
	<param name="BlogID">Integer ID of the blog. This corresponds to the id of the blog folder.</param>
	<param name="StartDate">The DateTime value to get posts from. You can obtain historical posts with this property, or leave it blank to begin now.</param>
	<returns>Either a populated BlogData class or null (nothing).</returns>
	<param name="Postsvisible">Integer number of posts to return. Leave as 0 to use the blog setting, or -1 to return none.</param>
	<param name="LanguageID">Integer ID of the language.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.BlogObject(Ektron.Cms.FolderData)">
	<summary>
 Returns the corresponding blog (if applicable) for a complete folderData object.
 If there is code that already leverages our FolderData class, this can piggyback atop it.
 <b>Returns only if the folder is a blog.</b><p></p> 
 This function is overloaded. See Also:<p></p>BlogObject(Integer DateTime)<p></p> 
 BlogObject(Integer DateTime Integer Integer)<p></p>
 BlogObject(Integer)
 </summary>
	<param name="folder_data">A populated FolderData class. (see FolderData)</param>
	<returns>A populated BlogData class or nothing</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetBlogPostCategoryForContent(System.Int64)">
	<summary>
 returns blogpost data categories for the given content block
 </summary>
	<param name="contentId">contentid</param>
	<returns>returns categories as comman separated value.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetBlogDataForPost(System.Int64)">
	<summary>
 Returns the blog information for a blog post. 
 This contains information about categories, whether comments are enabled, etc.
 Accepts the post ID.
 </summary>
	<param name="post_id">Integer value of the post ID</param>
	<returns>BlogData class</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetBlogPostData(System.Int64)">
	<summary>
 Gets the Post data for a specific blog post.
 Accepts the ID of the post.
 Will return tags, trackback, pingback, and categories for the post.
 </summary>
	<param name="id">Integer value of the post ID</param>
	<returns>BlogPostData Class.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetBlankBlogPostData">
	<summary>
 Returns a blank BlogPostData class.
 Used Primarily in the Workarea.
 </summary>
	<returns>A blank, but not null, BlogPostData class.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.BlogRoll(System.Int64)">
	<summary>
 Returns a populated blog roll class.
 Accepts a blog ID integer value.
 See the blogroll class for more information.
 </summary>
	<param name="blog_id">Integer ID of the blog. This corresponds to the 
 folder ID of the blog.</param>
	<returns>A populated BlogRoll class or a null (nothing).</returns>
	<remarks>Developers are advised to check for null prior to using this class.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetMultiTemplateASPX(System.Object)">
	<summary>
	</summary>
	<param name="contentid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFolderBreadcrumbPath(System.Int64,System.Boolean)">
	<summary>
 Get breadcrumb path of the folder in which content block  exists.
 </summary>
	<param name="id">Content or Folder Id</param>
	<param name="isFolder">set it true if the id is folder id</param>
	<returns>Array of node in the path</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.RenderFolderBreadcrumbHtml(Ektron.Cms.Common.SitemapPath[],System.String,System.Boolean,System.String,System.Boolean,System.String)">
	<summary>
 Render folder breadcrumb HTML
 </summary>
	<param name="nodes"></param>
	<param name="pathSeparator"></param>
	<param name="linkNodes"></param>
	<param name="linkTarget"></param>
	<param name="displayVertical"></param>
	<returns>HTML</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetWebsiteMap(System.Int64,System.Boolean)">
	<summary>
 Creates the site map from folder breadcrumb.
 </summary>
	<param name="folderId">Build the web sitemap from the folder specified.</param>
	<param name="getSameLevelNodes">Includes site node from the parent folder but not recursively.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.RenderWebsiteMap(Ektron.Cms.Common.WebsiteMap,System.String,System.String,System.Int32,System.Int32,System.String)">
	<summary>
 Create HTML to render on the page.
 </summary>
	<param name="webSitemap">GetWebSiteMap()</param>
	<param name="displayType">Determines how to produce HTML.</param>
	<param name="className">Stylesheet class to format the HTML. It must exists in [site]/workarea/csslib/sitemap.css. Leave blank to accept default.</param>
	<param name="maxLevel">Set the max level of the sitemap. Set it to 0 for unlimited.</param>
	<param name="startLevel">Set the starting level of the sitemap. Set it to 0 for start from root.</param>
	<returns>HTML/XML</returns>
	<remarks>Supported displayType: ListWithDescription | List </remarks>
</member><member name="M:Ektron.Cms.ContentAPI.RenderWebsiteMap(Ektron.Cms.Common.WebsiteMap,System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
	<summary>
 Create HTML to render on the page.
 </summary>
	<param name="stylesheet">Path to the stylesheet, if empty HTML link tags are not added</param>
	<param name="webSitemap">GetWebSiteMap()</param>
	<param name="displayType">Determines how to produce HTML.</param>
	<param name="className">Stylesheet class to format the HTML. It must exists in [site]/workarea/csslib/sitemap.css. Leave blank to accept default.</param>
	<param name="maxLevel">Set the max level of the sitemap. Set it to 0 for unlimited.</param>
	<param name="startLevel">Set the starting level of the sitemap. Set it to 0 for start from root.</param>
	<returns>HTML/XML</returns>
	<remarks>Supported displayType: ListWithDescription | List </remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddFolder(Ektron.Cms.FolderRequest)">
	<summary>
 Creates CMS folder
 </summary>
	<param name="request">folder properties</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateFolderApprovalMethod(Ektron.Cms.FolderData)">
	<summary>
 Update the approval method on an existing folder
 </summary>
	<param name="request"></param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateFolder(Ektron.Cms.FolderRequest)">
	<summary>
 Update CMS folder
 </summary>
	<param name="request">folder properties</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.LoadTaxonomy(Ektron.Cms.TaxonomyRequest@)">
	<summary>
 returns the TaxonomyData with all its subcategory and its items.
 </summary>
	<param name="request">TaxonomyRequest</param>
	<returns>TaxonomyData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.CreateTaxonomy(Ektron.Cms.TaxonomyData)">
	<summary>
 creates new taxonomy
 </summary>
	<param name="request">taxonomy data</param>
	<returns>new taxonomy id</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.ImportTaxonomy(System.String,System.String)">
	<summary>
 imports taxonomy using xml file.
 </summary>
	<param name="TaxonomyXml">taxonomy xml file</param>
	<param name="Title">title for the taxonomy</param>
	<returns>taxonomy id</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.CloneTaxonomy(System.Int64,System.Int64,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 creates new copy from the source category to destination category
 </summary>
	<param name="sourceId">source category</param>
	<param name="destinationId">target id</param>
	<param name="LanguageId">languageid</param>
	<param name="Depth">-1:all sub categories otherwise specified level</param>
	<param name="WithItems">moves all items from the source structure</param>
	<param name="DeleteSource">delete the source categroy once after clone the node</param>
	<returns>int</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.ImportTaxonomy(System.String,System.String,System.Collections.Generic.List{Ektron.Cms.Common.EkEnumeration.TaxonomyType})">
	<summary>
 imports taxonomy using xml file.
 </summary>
	<param name="TaxonomyXml">taxonomy xml file</param>
	<param name="Title">title for the taxonomy</param>
	<param name="config">Configuration list that can be used</param>
	<returns>taxonomy id</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.UpdateTaxonomy(Ektron.Cms.TaxonomyData)">
	<summary>
 updates the existing taxonomy
 </summary>
	<param name="request">taxonomydata</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DeleteTaxonomy(Ektron.Cms.TaxonomyRequest)">
	<summary>
 deletes the existing taxonomy
 </summary>
	<param name="request">taxonomy request</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.ReadTaxonomy(Ektron.Cms.TaxonomyRequest@)">
	<summary>
 read the taxonomy data
 </summary>
	<param name="request">taxonomyrequest</param>
	<returns>taxonomydata</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddTaxonomyItem(Ektron.Cms.TaxonomyRequest)">
	<summary>
 inserts item into taxonomy
 </summary>
	<param name="request">taxonomyrequest</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.RemoveTaxonomyItem(Ektron.Cms.TaxonomyRequest)">
	<summary>
 removes item from the taxonomy
 </summary>
	<param name="request">taxonomyrequest</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddTaxonomySyncFolder(Ektron.Cms.TaxonomySyncRequest)">
	<summary>
 adds folder entry into taxonomy
 </summary>
	<param name="request">taxonomyrequest</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.RemoveTaxonomyFolder(Ektron.Cms.TaxonomySyncRequest)">
	<summary>
 removes the sync up folder from taxonomy
 </summary>
	<param name="request">taxonomyrequest</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.ReadAllAssignedCategory(System.Int64)">
	<summary>
 returns all the assigned category for the content id
 </summary>
	<param name="contentid">contentid</param>
	<returns>array of taxonomybasedata</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.AddTaxonomyItem(Ektron.Cms.TaxonomyContentRequest)">
	<summary>
 inserts item into taxonomy
 </summary>
	<param name="request">taxonomycontentrequest</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.ReOrderTaxonomyItems(Ektron.Cms.TaxonomyRequest)">
	<summary>
 reorder display of taxonomy items
 </summary>
	<param name="request"></param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetTaxonomyIdByPath(System.String)">
	<summary>
 returns taxonomy id by given path
 </summary>
	<param name="path">path</param>
	<returns>taxonomy id</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetTaxonomyIdByPath(System.String,Ektron.Cms.Common.EkEnumeration.TaxonomyItemType)">
	<summary>
 returns taxonomy id by given path and type
 </summary>
	<param name="path">path</param>
	<param name="type">Type of taxonomy item to retrieve.</param>
	<returns>taxonomy id</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DisableFolderInheritance(System.Int64)">
	<summary>
 Disable permissions inheritance on the folder and copies current permissions to the folder.
 </summary>
	<param name="id">folder Id</param>
	<returns>False if successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.EnableFolderInheritance(System.Int64)">
	<summary>
 Deletes current permissions from the folder and enable permissions inheritance on the folder.
 </summary>
	<param name="id">folder Id</param>
	<returns>False if successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DisableContentInheritance(System.Int64)">
	<summary>
 Disable permissions inheritance on the content and copies current permissions to the content.
 </summary>
	<param name="id">Content Id</param>
	<returns>False if successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.EnableContentInheritance(System.Int64)">
	<summary>
 Deletes current permissions from the content and enable permissions inheritance on the content.
 </summary>
	<param name="id">Content Id</param>
	<returns>False if successful</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DistributeCommunityContent(System.Int64,System.Int64,System.Int32)">
	<summary>
 Distributes the source community contnet to a CMS folder.
 </summary>
	<param name="contentId">ContentId to distribute</param>
	<param name="targetFolderId">Folder to distribute content to.</param>
	<param name="languageId">Language of content to distribute</param>
	<returns>New Content Id</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.DistributeCommunityContent(System.Int64,System.Int64,System.Int32,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{Ektron.Cms.ContentMetaData})">
	<summary>
 Distributes the source community contnet to a CMS folder.
 </summary>
	<param name="contentId">ContentId to distribute</param>
	<param name="targetFolderId">Folder to distribute content to.</param>
	<param name="languageId">Language of content to distribute</param>
	<param name="metaDataCollection">Collection of metadata to add to new content.</param>
	<param name="taxonomyIdCollection">Collection Taxonomy Ids to add new content to.</param>
	<returns>New Content Id</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetDestinationContentId(System.Int64)">
	<summary>
 Gets the Id of a piece of community content that was distributed to a CMS Folder.
 </summary>
	<param name="sourceContentId">Id of the source community content</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetDestinationContentId(System.Guid,System.Int64)">
	<summary>
 Gets the Id of a piece of sharepoint content that was distributed to a CMS Folder.
 </summary>
	<param name="sharepointListId">Id of the source sharepoint list</param>
	<param name="sharepointItemId">Id of the source sharepoint content</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetSourceContentId(System.Int64)">
	<summary>
 Gets the Id of a piece of source content that was distributed to a CMS Folder.
 </summary>
	<param name="destinationContentId">Id of the destination CMS content</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetSourceSharepointId(System.Int64)">
	<summary>
 Gets the Id of a piece of source sharepoint content that was distributed to a CMS Folder.
 </summary>
	<param name="destinationContentId">Id of the destination CMS content</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetFolderIdForContentId(System.Int64)">
	<summary>
 Gets folder id associated with given content Id.
 </summary>
	<param name="contentId">Id of the CMS content</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.ContentProperty})">
	<summary>
 Returns a list of content based upon the supplied criteria.
 </summary>
	<param name="criteria">criteria used to restrict content retrieval.</param>
	<returns></returns>
	<remarks>Workarea Readable permissions are not enforced.  This function assumes site display.  Proviate content permissions are alway enforced.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.ContentProperty},System.Boolean)">
	<summary>
 Returns a list of content based upon the supplied criteria.
 </summary>
	<param name="criteria">criteria used to restrict content retrieval.</param>
	<param name="folderRecursive">If true, retrieves all recursive folders based upon folderId in criteria filter.  This parameter is only relative if the criteria includes a FolderId filter.</param>
	<returns></returns>
	<remarks>Workarea Readable permissions are not enforced.  This function assumes site display.  Proviate content permissions are alway enforced.</remarks>
</member><member name="M:Ektron.Cms.ContentAPI.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.ContentProperty},System.Boolean,System.Boolean)">
	<summary>
 Returns a list of content based upon the supplied criteria.
 </summary>
	<param name="criteria">criteria used to restrict content retrieval.</param>
	<param name="folderRecursive">If true, retrieves all recursive folders based upon folderId in criteria filter.  This parameter is only relative if the criteria includes a FolderId filter.</param>
	<param name="filterNonReadableContent">if true, will restrict content list to only content readable by current user in workarea based upon user permisisons.
 Private content is always filtered based upon permissions.</param>
	<returns></returns>
</member><member name="T:Ektron.Cms.ContentAPI">
	<summary>
 Used when working with Content, the Library, Fonts, Asset Management, Metadata,
 Forms, Subscriptions, Content Statistics, Content Rating, Roles and Blogs.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.AddMessageBoardEntry(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.String,System.Boolean,System.Int64)">
	<summary>
 Adds a message board entry to the database. 
 </summary>
	<param name="objectId">The id of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="messageText">The message text.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The userid of the member adding the message.</param>
	<returns>The messageboard data object with the new row and the computed fields.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.GetMessageBoardEntry(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Boolean,System.Int64)">
	<summary>
 Returns a single row for the requested parameters.
 </summary>
	<param name="MessageId">The unique id of the message.</param>
	<param name="objectId">The id of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The userid of the member requesting data.</param>
	<returns>The messageboard data object with the data from the database.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.GetAllMessageBoardEntries(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,Ektron.Cms.PagingInfo,System.Int64,System.Boolean)">
	<summary>
 Gets all messages for a particular object. 
 </summary>
	<param name="ObjectId">The id of the object.</param>
	<param name="ObjectType">The type of the object.</param>
	<param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
	<param name="callerUserId">The userid of the member requesting data.</param>
	<param name="isModerated">The moderation switch.</param>
	<returns>Returns a collection of messageboard data objects for each record retrieved from the database.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.GetAllMessageBoardEntriesByUser(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,Ektron.Cms.PagingInfo,System.Int64,System.Boolean)">
	<summary>
 Gets all messages entered by a user.
 </summary>
	<param name="ObjectId">The id of the object.</param>
	<param name="ObjectType">The type of the object.</param>
	<param name="UserIdToSelect">The userid of the for which to retrieve data for.</param>
	<param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
	<param name="callerUserId">The userid of the member requesting data.</param>
	<param name="isModerated">The moderation switch.</param>
	<returns>Returns a collection of messageboard data objects for each record retrieved from the database.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.DeleteMessageBoardEntry(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Boolean,System.Int64)">
	<summary>
 Deletes single message board record.
 </summary>
	<param name="messageId">The unique id of the message.</param>
	<param name="ObjectId">The id of the object that has the message board.</param>
	<param name="ObjectType">The type of object.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The userid of the member deleting the message.</param>
	<returns>Returns true when the message is deleted successfully.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.DeleteMessageBoardEntries(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Boolean,System.Int64)">
	<summary>
 Deletes all the message board records for a particular object.
 </summary>
	<param name="ObjectId">The id of the object that has the message board.</param>
	<param name="ObjectType">The type of object.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The userid of the member deleting the messages.</param>
	<returns>Returns true when all the messages are deleted successfully</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.DeleteMessageBoardEntriesByUser(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,System.Boolean,System.Int64)">
	<summary>
 Deletes all the message board records for a particular User.
 </summary>
	<param name="ObjectId">The id of the object that has the message board.</param>
	<param name="ObjectType">The type of object.</param>
	<param name="userId">The UserId's messages to delete.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The userid of the member deleting the messages.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.UpdateMessageText(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.String,System.Boolean,System.Int64)">
	<summary>
 Updates the Text of a message.
 </summary>
	<param name="messageId">The unique id of the message.</param>
	<param name="objectId">The id of the object.</param>
	<param name="objectType">The type of the object.</param>
	<param name="messageText">The new message text.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The userid of the member doing the update.</param>
	<returns>Returnes the updated row.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.ApproveMessage(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Boolean,System.Int64)">
	<summary>
 This function changes the flag of the message from pending to approve.
 </summary>
	<param name="messageId">The unique id of the message.</param>
	<param name="objectId">The id of the object.</param>
	<param name="objectType">The type of the object.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The userid of the member doing the update.</param>
	<returns>Returnes the updated row.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.IsUserMessageBoardAdmin(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
	<summary>
 This function determines if the user has administrative privileges for the message board.
 </summary>
	<param name="userId">The UserId of the user</param>
	<returns>Returns true if the user has administrative privileges.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.IsSpam(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,System.String,Ektron.Cms.Common.EkEnumeration.MessageBoardSpamControlType,System.Int32)">
	<summary>
 This function evaluates if the new message is spam or not based on the spam filter selected. 
 </summary>
	<param name="objectId">The id of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="userId">The Id of the user entering the message.</param>
	<param name="messageText">The text of the message.</param>
	<param name="spamControlType">The type of spam filter selected.</param>
	<param name="interval">The time interval for the spam filter.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.EnableModeration(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
	<summary>
 Switch on Moderation for the Object
 </summary>
	<param name="objectId">The id of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="callerUserId">The userid of the member requesting the change.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.DisableModeration(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
	<summary>
 Switch off Moderation for the Object
 </summary>
	<param name="objectId">The id of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="callerUserId">The userid of the member requesting the change.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.IsModerated(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType)">
	<summary>
 Check if the object is moderated or not.
 </summary>
	<param name="objectId">The id of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.MessageBoardAPI.Moderate(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,System.Boolean)">
	<summary>
 This is a single method for enabling and disabling moderation.
 </summary>
	<param name="objectId">The id of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="callerUserId">The userid of the member requesting the change.</param>
	<param name="value">Use 'True' to enable and 'False' to disable moderation.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.CommunityGroupAPI.GetUserApi">
	<summary>
 Returns a UserAPI object that uses the same user as the current object.  
 This should be used in case the current call has been routed through the API namespace and InternalAdmin needs to be used.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.CommunityGroupAPI.GetCommunityGroupApi">
	<summary>
 Returns a CommunityGroupAPI object that uses the same user as the current object.  
 This should be used in case the current call has been routed through the API namespace and InternalAdmin needs to be used.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.CommunityGroupAPI.AddUserToCommunityGroup(System.Int64,System.Int64,System.Boolean)">
	<summary>
 Adds a user to a community group.
 </summary>
	<param name="groupId">Id of the group</param>
	<param name="userId">Id of the user to add.</param>
	<param name="overridePending">supply true if you wish to bypass group enrollment moderation.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.CommunityGroupAPI.AddUserToCommunityGroup(System.Int64,System.Int64)">
	<summary>
 Adds a user to a community group.
 </summary>
	<param name="groupId">Id of the group</param>
	<param name="userId">Id of the user to add.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.CommunityGroupAPI.GetCommunityGroupsForUser(System.Int64,System.Int32,System.Int32,System.Int32@,System.Int32@)">
	<summary>
 Gets a list of community groups a user belongs to.
 </summary>
	<param name="ForUserId">Id of user to retrieve community groups for.</param>
	<param name="PageIndex">Current page.</param>
	<param name="PageSize">Number of results per page.</param>
	<param name="TotalPages">Total pages</param>
	<param name="TotalGroups">Total groups</param>
	<returns>An array of CommunityGroupData objects.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.CommunityGroupAPI.GetInvitedCommunityGroups(System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Returns a list CommunityGroups that a user has been invited to. 
 </summary>
	<param name="userId">Id of the user who was invited.</param>
	<param name="pagingInfo">Object to supply paging parameters.</param>
	<returns>array of CommunityGroupData objects</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.CommunityGroupAPI.GetCommunityGroupBlog(System.Int64)">
	<summary>
 returns the blog folder id associated to the community gorup
 </summary>
	<param name="groupId">community group id</param>
	<returns>blog folderid</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.Community.CommunityGroupAPI.InviteUsers(Ektron.Cms.Common.InvitationSendRequestData,System.Int64)">
	<summary>
 Invites the users to the community group.
 </summary>
	<param name="invitationData">InvitationSendRequestData containing information about the GroupInvitation to send.</param>
	<param name="groupId">Id of the group to invite people to.</param>
	<returns>A collection of Invitations that were sent out.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.QualifyUrlForServerTransfer(System.String)">
	<summary>
 For transfer to work, path must be relative and to an .aspx page.
 Returns empty string is not permitted.
 </summary>
	<param name="URL">The URL path.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetDaysInMonth(System.Object,System.Object)">
	<summary>
	</summary>
	<param name="iMonth"></param>
	<param name="iYear"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.WindowHeight">
	<summary>
 Returns the Workarea window height.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.WindowWidth">
	<summary>
 Returns the Workarea window width.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.MemberType">
	<summary>
 Returns the member type.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.DisplayTransText">
	<summary>
 Displays the translated text.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.ApplicationPath">
	<summary>
 Returns the application path.
 </summary>
	<value></value>
	<returns>String</returns>
	<example>
 An example of using this property can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\assetconfig.aspx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.UniqueId">
	<summary>
 Returns a dynamically generated unique ID.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<example>
 An example of using this property can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\editapprovalmethod.ascx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.AppName">
	<summary>
 Returns the application name.
 </summary>
	<value></value>
	<returns>String</returns>
	<example>
 An example of using this property can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\editareanavigation.aspx.vb</c>.<p/>
 A code snippet from that page appears below.
 <code>
 Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    StyleSheetJS.Text = m_refStyle.GetClientScript
    title.InnerHtml = (New SiteAPI).AppName
 End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.SyncEnabled">
	<summary>
 Returns the value of the eSyncEnabled key from web.config.
 True - Content and Folder sync are enabled if the eSync feature is available.
 False - Content and Folder sync are disabled if the eSync feature is available.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.HighlightTerm">
	<summary>
 Returns the value of the ek_termHighlight key from web.config.
 True - Highlighting text in content block is turned on if the terms key is provided through the querystring.
 False - Highlighting text in content block is turned off even if the terms key is provided through the querystring.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.SiteId">
	<summary>
 Returns the site ID.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.AppImgPath">
	<summary>
 Returns the AppImgPath.
 </summary>
	<value></value>
	<returns>String</returns>
	<example>
 An example of using this property can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\historylist.aspx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.AppXSLTPath">
	<summary>
 Returns the application XSLT path.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.AppPath">
	<summary>
 Returns the application path.
 </summary>
	<value></value>
	<returns>Sting</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.XmlPath">
	<summary>
 Returns the XML path.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.Version">
	<summary>
 Returns the version of the product.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.BuildNumber">
	<summary>
 Returns the build number of the product.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.AppeWebPath">
	<summary>
 Returns the current eWebPath.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.UseSsl">
	<summary>
 Returns whether SSL is forced or not.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.SslPort">
	<summary>
 Returns the SSL port value.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.AuthProtocol">
	<summary>
 Returns the protocol.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.CookieSite">
	<summary>
 Sets the site cookie value.
 </summary>
	<value></value>
	<remarks>String</remarks>
</member><member name="P:Ektron.Cms.CommonApi.FilterByLanguage">
	<summary>
 Use to filter the language based on the result.
 </summary>
	<value>Integer</value>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.ImageEk1">
	<summary>
 Returns the image 1 from the web.config.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.ImageEk2">
	<summary>
 Returns the image 2 from the web.config.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.ImageEk3">
	<summary>
 returns the image 3 from web.config.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkMailRef">
	<summary>
 Returns a reference to the EkMailService class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Common.EkMailService</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkUserRef">
	<summary>
 Returns a reference to the EkUser class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.User.EkUser</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkAdUserRef">
	<summary>
 Returns the reference to the EkAdUser class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.User.EkADUser</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EmailMessagesRef">
	<summary>
 Returns a reference to the Messaging class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.Messaging</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkContentRef">
	<summary>
 Returns a reference to the EkContent class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.EkContent</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkSiteRef">
	<summary>
 Returns a reference to the EkSite class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Site.EkSite</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkMsgRef">
	<summary>
 Returns a reference to the EkMessageHelper class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Common.EkMessageHelper</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkModuleRef">
	<summary>
 Returns a reference to the EkModule class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Modules.EkModule</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkTaskRef">
	<summary>
 Returns a reference to the EkTask class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.EkTask</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkTaskTypeRef">
	<summary>
 Returns a reference to the EkTaskType class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.EkTaskType</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkTaskhistoryRef">
	<summary>
 Returns a reference to the EkTaskHistory class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.EkTaskHistory</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkLibraryRef">
	<summary>
 Returns a reference to the EkLibrary class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Library.EkLibrary</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkFontRef">
	<summary>
 Returns a reference to the EkFont class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Font.EkFont</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkXmlIndexingRef">
	<summary>
 Returns a reference to EkXmlIndexing.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.EkXmlIndexing</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkDTSelectorRef">
	<summary>
 Returns a reference to the EkDtSelector class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.EkDTSelector</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.RemoteHost">
	<summary>
 Returns the address of a remote host.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.UserMenuType">
	<summary>
 Site preference of menu type. 
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EnableMultilingual">
	<summary>
 Returns True if Multilingual is enabled, otherwise returns False.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.DefaultContentLanguage">
	<summary>
 Default content language.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.RedirectorOn">
	<summary>
 Returns whether the redirector is on or not.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EnableReplication">
	<summary>
 Returns whether the dynamic replication is on or not.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.RedirectorManExt">
	<summary>
 Returns the redirector extension for manual URL aliasing.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.WorkareaSearchResultMode">
	<summary>
 Returns mode for Workarea search.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.LoginScreenWidth">
	<summary>
 Returns the login screen width.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.Debug_ShowHelpAlias">
	<summary>
 Returns a flag indicating the if debug messages are enabled 
 for Help-Alias strings (undocumented web.config option).
 </summary>
	<value>Boolean</value>
	<returns>Boolean</returns>
	<remarks>True to enable (will attempt to send messages to
 a pop-up window, otherwise will use javascript alerts.</remarks>
</member><member name="P:Ektron.Cms.CommonApi.EnableMessageBoardEmail">
	<summary>
 Returns true ot false indicating if MessageBoard emailing is on or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetLanguageByIDV48(System.Int32)">
	<summary>
 Returns the language detail.
 </summary>
	<param name="LanguageId">The language's ID</param>
	<returns>System.Collections.Hashtable</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.fetchhelpLink(System.String)">
	<summary>
 Returns the help link.
 </summary>
	<param name="MyAlias">The help alias. (Required)</param>
	<returns>String</returns>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\App_code\\VBCode\\StyleHelper.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.CreateFolder(System.String)">
	<summary>
 Creates a folder.
 </summary>
	<param name="Path">The path on the IIS server. (Required)</param>
	<returns>Boolean</returns>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\createxliff.aspx</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.InfoFolder(System.String)">
	<summary>
 Returns the folder detail.
 </summary>
	<param name="Path">The folder's path</param>
	<returns>String()</returns>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\mergeXliffToXhtml.aspx</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.WriteFile(System.String,System.String)">
	<summary>
 Writes into file.
 </summary>
	<param name="Path">The file's path.</param>
	<param name="value">The content of the file.</param>
	<returns>Boolean</returns>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\createxliff.aspx</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.ecmMemberLogin">
	<summary>
 Returns the member login script.
 </summary>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.ecmLogin(System.Boolean,System.Boolean,System.Boolean,System.Boolean,Ektron.Cms.Common.EkEnumeration.AutoAddUserTypes)">
	<summary>
 Returns the login script.
 </summary>
	<param name="OnlyMember">This changes the Login button so only membership users can log in. 
 This prevents someone from trying to login as an Ektron CMS400.NET user and gain access
 to the Ektron CMS400.NET Workarea. The default is False.<p/>
		<b>True</b> = Allow only membership users to login.<p/>
		<b>False</b> = Allow Ektron CMS400.NET users and membership users to login.<p/></param>
	<param name="SuppressLogin">Hides the Help button that appears below the Login button when set to true.
 The default is False.<p/>
		<b>True</b> = Do not display the Help button.<p/>
 &lt;image login button/&gt;<p/>
		<b>False</b> = Display Help button.<p/>
 &lt;image login and help buttons/&gt;<p/>
	</param>
	<param name="AutoLogin">When set to true, users are automatically logged in using Active Directory authentication. 
 Users do not need to enter a username or password. The default is False.<p/>
		<b>True</b> = Use Active Directory authentication when logging in.<p/>
		<b>False</b> = Do not use Active Directory authentication when logging in.</param>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\PLATFORMS\\ASP\\test.asp</c>.
 </example>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.LoadBlogRoll(System.Int64)">
	<summary>
 Loads a blog roll for a given ID. This blog roll is the list
 of links for the blog. See the BlogRoll class for the
 properties and usage of the blog roll.<para></para>
 This is an overloaded method. See Also: LoadBlogRoll (String)
 </summary>
	<param name="ID">The ID of the blog. This is an integer
                  value that corresponds to the folder ID for
                  the blog.</param>
	<returns>
 This method returns a populated BlogRoll class or null
 (nothing).
 </returns>
	<remarks>
 When using, developers are advised to check for null prior to
 using.
 </remarks>
</member><member name="M:Ektron.Cms.CommonApi.LoadBlogRoll(System.String)">
	<summary>
 Loads a blog roll for a given path. The path is a string of
 the blog path, ex: <c>"\\Media\\Blogs\\MyBlog"</c>.
 This blog roll is the list of links for the blog. See the
 BlogRoll class for the properties and usage of the blog roll.<para></para>
 This is an overloaded method. See Also: LoadBlogRoll (Integer)
 </summary>
	<param name="Path">The path of the blog. This is a string
                    value that corresponds to the folder path
                    of the blog.</param>
	<returns>
 This method returns a populated BlogRoll class or null
 (nothing).
 </returns>
	<remarks>
 When using, developers are advised to check for null prior to
 using.
 </remarks>
</member><member name="M:Ektron.Cms.CommonApi.LoadBlog(System.String,System.String,System.Int32,System.Int32)">
	<summary>
 Returns a BlogData class for a given path, with parameters.
 This class contains the content for a blog, the post info, the roll, and the categories information.
 See the BlogData class for more information.
 </summary>
	<param name="path">The path of the blog. This is a string value that corresponds to the 
  folder path of the blog.</param>
	<param name="StartDate">The date to get entries from. Used if you want to get historical information.</param>
	<param name="MaxEntries">The total number of posts to return. This is an integer value. <p></p>
 If set to 0, the <c>postsvisible</c> property of the blog is used.<p></p>
 If set to -1, the content is not returned, only the post info for the content.</param>
	<param name="LanguageID">The language ID for the content to get. An integer value.</param>
	<returns>For a given path, this returns either null or a BlogData class with the associated posts. This also includes the roll, categories, and post information.</returns>
	<remarks>Developers are advised to check for null prior to using.</remarks>
</member><member name="M:Ektron.Cms.CommonApi.LoadBlog(System.Int64,System.String,System.Int32,System.Int32)">
	<summary>
 Returns a BlogData class for a given blog id, with parameters.
 This class contains the content for a blog, the post info, the roll, and the categories information.
 See the BlogData class for more information.
 </summary>
	<param name="ID">The id of the blog. This is a integer value that corresponds to the 
  folder id of the blog.</param>
	<param name="StartDate">The date to get entries from. Used if you want to get historical information.</param>
	<param name="MaxEntries">The total number of posts to return. This is an integer value. <p></p>
 If set to 0, the <c>postsvisible</c> property of the blog is used.<p></p>
 If set to -1, the content is not returned, only the post info for the content.</param>
	<param name="LanguageID">The language ID for the content to get. An integer value.</param>
	<returns>For a given blog id, this returns either null or a BlogData class with the associated posts. This also includes the roll, categories, and post information.</returns>
	<remarks>Developers are advised to check for null prior to using.</remarks>
</member><member name="M:Ektron.Cms.CommonApi.LoadBlog(System.Int64,System.String,System.Int32,System.Int32,Ektron.Cms.Common.EkEnumeration.BlogStartDateRange)">
	<summary>
 Returns a BlogData class for a given blog id, with parameters.
 This class contains the content for a blog, the post info, the roll, and the categories information.
 See the BlogData class for more information.
 </summary>
	<param name="ID">The id of the blog. This is a integer value that corresponds to the 
  folder id of the blog.</param>
	<param name="StartDate">The date to get entries from. Used if you want to get historical information.</param>
	<param name="MaxEntries">The total number of posts to return. This is an integer value. <p></p>
 If set to 0, the <c>postsvisible</c> property of the blog is used.<p></p>
 If set to -1, the content is not returned, only the post info for the content.</param>
	<param name="LanguageID">The language ID for the content to get. An integer value.</param>
	<returns>For a given blog id, this returns either null or a BlogData class with the associated posts. This also includes the roll, categories, and post information.</returns>
	<remarks>Developers are advised to check for null prior to using.</remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetBlogEntries(Ektron.Cms.BlogData,System.DateTime,System.Int32,System.Boolean,System.Int64,System.String,System.Collections.Hashtable@)">
	<summary>
 Returns a string representing the rendered blogentries for a given blog id, with other parameters.
 This is the default view of the blog entries server control.
 The Stylesheet information is attached to the front of the string.
 </summary>
	<param name="_Blog">The blogdata associated with the blog.</param>
	<param name="DateToStart">The date to get entries from. Used if you want to get historical information.</param>
	<param name="MaxNumber">The total number of posts to return. This is an integer value. <p></p>
 If set to 0, the <c>postsvisible</c> property of the blog is used.<p></p>
 If set to -1, the content is not returned, only the post info for the content.</param>
	<param name="_ShowTitle">Boolean value which determines whether the title is shown or not.</param>
	<returns>A string of the rendered blog entries.</returns>
</member><member name="M:Ektron.Cms.CommonApi.GetBlogRoll(Ektron.Cms.BlogRoll,System.Int64)">
	<summary>
 Returns a full string of the Roll for a given Blog ID
 Used Primarily with the platform support.
 Blog ID corresponds to folder ID
 </summary>
	<param name="BlogID">Integer value of the Blog ID</param>
	<returns>String value of the formatted BlogRoll links. These also have the proper CSS classes attached to them.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetBlogRSS(System.Int64,System.Web.UI.HtmlControls.HtmlHead)">
	<summary>
 Returns a link to the Blog RSS feed
 Includes the RSS image.
 Accepts the blogID
 </summary>
	<param name="blogID">Integer value of the blog.</param>
	<returns>Returns an image linked to the blog RSS feed.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetBlogCategories(Ektron.Cms.BlogData,System.Int64,System.String)">
	<summary>
 Returns a string of the Blog Categories links for a given Blog ID
 Used Primarily with the platform support.
 Blog ID corresponds to folder ID
 </summary>
	<param name="BlogID">Integer value of the Blog ID</param>
	<param name="URLPath">String value representing the urlpath to use. This is pathed from the webroot, examples: /myblog.aspx, /products/reviews.aspx</param>
	<returns>String value of the formatted Blog Category links. These also have the proper CSS classes attached to them.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetBlogRecentPosts(Ektron.Cms.BlogData,System.Int64,System.Int32)">
	<summary>
 Returns a string of the Blog's Recent Posts links for a given Blog ID
 Used Primarily with the platform support.
 Blog ID corresponds to folder ID
 </summary>
	<param name="BlogID">Integer value of the Blog ID</param>
	<returns>String value of the formatted Blog Recent Post links. These also have the proper CSS classes attached to them.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.AddCommentForPost(Ektron.Cms.BlogComment)">
	<summary>
 Adds a post comment to a blog post.
 Accepts a BlogComment class as the input.
 Will return the result of that add action.
 False indicates the action was successful.
 </summary>
	<param name="bcComment">A populated BlogComment class. Title, DisplayName, Comment text, Email are required.</param>
	<returns>A Boolean value indicating whether there was a problem. False indicates the comment was added successfully.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.DeleteBlogPostComment(System.Int64)">
	<summary>
 Delete blog post comment
 </summary>
	<param name="postCommentId">post comment id</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.ecmGetPopupScript">
	<summary>
 Returns the JavaScript for a popup window. 
 </summary>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetInternationalDateOnly(System.Object)">
	<summary>
 Returns the international date.
 </summary>
	<param name="MyDate">date</param>
	<returns>Object</returns>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\dashboard.aspx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetEnglishMonthsAbbrev">
	<summary>
 Returns the English month abbreviation for the given month.
 </summary>
	<returns>String</returns>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\cmscalendar.aspx</c>.
 </example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.UserLanguage">
	<summary>
 Returns a user's language (used for locale).
 </summary>
	<value></value>
	<returns>Integer</returns>
	<example>
 An example of using this property can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\login.aspx.vb</c>.
 Here is a code snippet from that page.
 <code>
 Private Sub LogoutUser()
        If (Not (IsPostBack())) Then
           Dim language_data As LanguageData
           Dim m_refSiteApi As New SiteAPI
           language_data = m_refSiteApi.GetLanguageById(m_refSiteApi.UserLanguage)
           logoutmsg.InnerHtml = m_refMsg.GetMessage("Logout message")
           LogoutBtn.Src = language_data.ImagePath &amp; LogoutBtn.Src
           LogoutPanel.Visible = True
        Else
           Dim strCloser As New System.Text.StringBuilder
           ' Render script to close the Workarea:
           strCloser.Append("&lt;SCRIPT language='javascript'&gt;" &amp; vbCrLf)
           strCloser.Append("PopUpWindow('close.aspx?logout=true','Admin400',0,0,0,0);&lt;/SCRIPT&gt;" &amp; vbCrLf)
           strCloser.Append("&lt;/SCRIPT&gt;" &amp; vbCrLf)
           WorkareaCloserJS.Text = strCloser.ToString()
       End If
    End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.XSLTransform(System.String,System.String,System.Boolean,System.Boolean,System.Xml.Xsl.XsltArgumentList,System.Boolean)">
	<summary>
 Transforms a given XML document with a given XSLT document. 
 The documents may be either strings or URLs to a file. Specify which
 using the XsltAsFile and XmlAsFile parameters.
 </summary>
	<param name="XmlDoc">
 	The XML document to be transformed. The document may be either a string 
 or a URL to a file. Specify which using the XmlAsFile parameter.
 	Value Type: <see cref="T:System.String"/> (System.String)
 </param>
	<param name="XsltDoc">
 	The XSLT document to transform. The document may be either a string 
 or a URL to a file. Specify which using the XsltAsFile parameter.
  	Value Type: <see cref="T:System.String"/> (System.String)
 </param>
	<param name="XsltAsFile">
 	Specifies whether XsltDoc is a string or URL. 
 	Value Type: <see cref="T:System.Boolean"/> (System.Boolean)
 </param>
	<param name="XmlAsFile">
 	Specifies whether XmlDoc is a string or URL. 
 	Value Type: <see cref="T:System.Boolean"/> (System.Boolean)
 </param>
	<param name="XsltArgs">
 	Optional arguments to be applied to the transform. 
 	Value Type: <see cref="T:System.Xml.Xsl.XsltArgumentList"/> (System.Xml.Xsl.XsltArgumentList)
 	Additionally, the following arguments are supplied:
 		baseURL - The protocol and host and port, if non-standard, e.g., http://www.example.com
 		LangType - The locale ID of the selected content language, e.g., 1033 for 'English (US)'
 		userId - The ID of the current user, e.g., 1 for 'admin'
 </param>
	<param name="ReturnExceptionMessage">
 	Specifies whether errors encountered while processing the documents should be 
 returned as an error message (if true) or whether an exception should be thrown (if false). 
 	Value Type: <see cref="T:System.Boolean"/> (System.Boolean)
 </param>
	<returns>The resulting transformed document.	<see cref="T:System.String"/> (System.String)</returns>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\cmsformsreport.aspx.vb</c>.
 </example>
	<remarks>
 If no XsltDoc is provided, the XmlDoc will be returned. If no XmlDoc is provided, the XSLT 
 will be run on an empty XML document with just a root element.
 </remarks>
</member><member name="M:Ektron.Cms.CommonApi.TransformXsltPackage(System.String,System.String,System.Boolean)">
	<summary>
 Transforms XML using an XSLT as a string or file.
 </summary>
	<param name="XML">XML as a string. (Required)</param>
	<param name="DisplayXslt">The XSLT. (Required)</param>
	<param name="XsltFile">The XSLT file.</param>
	<returns>
 String
 </returns>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\compare.aspx.vb</c>.
 </example>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.CommonApi.TransformXSLT(System.String,System.String)">
	<summary>
 Transforms an XSLT.
 </summary>
	<param name="XML">An XML string.</param>
	<param name="XSLT">An XSLT string.</param>
	<returns>Object</returns>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\Collections.aspx</c>.
 </example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkUrlRewriteRef">
	<summary>
 Returns a reference to the EkUrlRewrite class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.ektUrlRewrite</returns>
	<example>
 An example of using this property can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\urlAlias.aspx</c>.
 </example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.EkToolbarRef">
	<summary>
 Returns a reference to the EkToolBar class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.ToolBar.EkWebMenu</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.CreateToolbarObj">
	<summary>
 This function creates the toolbar object and set default properties. Returns the reference to EkWebMenu class.
 </summary>
	<returns>Ektron.Cms.ToolBar.EkWebMenu</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.RenderHTML_RedirExtensionDD(System.String,System.String,System.String)">
	<summary>
 Renders the HTML based on the extension provided.
 </summary>
	<param name="DropDownName">The drop down name. (Required)</param>
	<param name="selectedExt">The selected extension.</param>
	<param name="CommaSeperateList">An array of values.</param>
	<returns>String</returns>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\edit.aspx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetXPaths(System.String)">
	<summary>
 Returns all XPaths from the specified package XSLT.
 </summary>
	<param name="XML">PackageXslt</param>
	<returns>Returns as a Microsoft.VisualBasic.Collection a collection of XPaths generated from the initial document. 
 </returns>
	<example>
 An example of using this function can be found in the Workarea source file <p/>
		<c>CMS400Demo\\Workarea\\controls\\xmlconfig\\viewxml_config.ascx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetFieldNameForXPath(System.Int64,System.String)">
	<summary>
 Returns the fieldname of an indexed field in a smart form.
 </summary>
	<param name="XmlConfigID">Smart Form Config ID</param>
	<param name="xpath">xpath</param>
	<returns>Field name. 
 </returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetFieldListXML(System.Int64)">
	<summary>
 Returns the field list XML for a smart form configuration.
 </summary>
	<param name="XmlConfigID">Smart Form Config ID</param>
	<returns>XML Document containing the field list. 
 </returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApi.TreeModel">
	<summary>
 Returns 1 if the AJAX tree is enabled, otherwise returns 0.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\workareanavigationtree.aspx.vb</c>.
 <code>
 Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    Response.CacheControl = "no-cache"
    Response.AddHeader("Pragma", "no-cache")
    Response.Expires = -1
    Dim m_refApi As New CommonApi
    If (m_refApi.TreeModel = 1) Then
        m_bAjaxTree = True
    End If
    m_refApi = Nothing
 End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.RandomNumber(System.Int64)">
	<summary>
 Returns a random number.
 </summary>
	<param name="intHighestNumber">The range the number begins with.</param>
	<returns>Object</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.IsARoleMember(System.Int64)">
	<summary>
 Roles provide the ability to offload/delegate some of the
 administrator's tasks onto other users, without giving full
 administration privileges to a user.<para></para>
 This function is overloaded. See Also:<p/>
 IsARoleMember (Ektron.Cms.Common.EkEnumeration.CmsRoleIds)<p/>
 IsARoleMember (Ektron.Cms.Common.EkEnumeration.CmsRoleIds Integer Boolean)<p/>
 IsARoleMember (Integer Integer Boolean).
 </summary>
	<param name="RoleId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.IsARoleMember(Ektron.Cms.Common.EkEnumeration.CmsRoleIds)">
	<summary>
 Roles provide the ability to offload/delegate some of the
 administrator's tasks onto other users, without giving full
 administration privileges to a user.<para></para>
 This function is overloaded. See Also:<p/>
 IsARoleMember (Ektron.Cms.Common.EkEnumeration.CmsRoleIds Integer Boolean)<p/>
 IsARoleMember (Integer Integer Boolean)<p/>
 IsARoleMember (Integer).
 </summary>
	<param name="RoleId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.IsARoleMember(System.Int64,System.Int64,System.Boolean)">
	<summary>
 Roles provide the ability to offload/delegate some of the administrator's tasks
 onto other users, without giving full administration privileges to a user.<para></para>
 This function is overloaded. See Also:<p/>
 IsARoleMember (Ektron.Cms.Common.EkEnumeration.CmsRoleIds Integer Boolean)<p/>
 IsARoleMember (Integer)<p/>
 IsARoleMember (Ektron.Cms.Common.EkEnumeration.CmsRoleIds)
 </summary>
	<param name="RoleId"></param>
	<param name="nUserId"></param>
	<param name="GroupFlag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.IsARoleMember(Ektron.Cms.Common.EkEnumeration.CmsRoleIds,System.Int64,System.Boolean)">
	<summary>
 Roles provide the ability to offload/delegate some of the administrator's tasks
 onto other users, without giving full administration privileges to a user.<para></para>
 This function is overloaded. See Also:<p/>
 IsARoleMember (Ektron.Cms.Common.EkEnumeration.CmsRoleIds)<p/>
 IsARoleMember (Integer Integer Boolean)<p/>
 IsARoleMember (Integer)
 </summary>
	<param name="RoleId"></param>
	<param name="nUserId"></param>
	<param name="GroupFlag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.IsARoleMemberForFolder(System.Int64,System.Int64,System.Int64,System.Boolean)">
	<summary>
 Determines whether a Role Member is allowed to work with a given folder as an administrator or not.
 Administrations privileges are for the given folder only.
 Roles provide the ability to offload/delegate some of the administrator's tasks
 onto other users, without giving full administration privileges to a user.
 </summary>
	<param name="RoleId"></param>
	<param name="FolderId">The numeric folder ID for which you are giving the Role Member privileges.</param>
	<param name="nUserId"></param>
	<param name="GroupFlag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.IsARoleMemberForContent(System.Int64,System.Int64,System.Int64,System.Boolean)">
	<summary>
 Determines whether a Role Member is allowed to work with a given piece of content as an administrator or not.
 Administrations privileges are for the given piece of content only.
 Roles provide the ability to offload/delegate some of the administrator's tasks
 onto other users, without giving full administration privileges to a user.
 </summary>
	<param name="RoleId"></param>
	<param name="ContentId">The numeric content ID for which you are giving the Role Member privileges.</param>
	<param name="nUserId"></param>
	<param name="GroupFlag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetRolePermissionSystem(System.String,System.Int64)">
 The CustomRolePermissions are for developers who want to implement the idea of roles
 into their own code. The two primary functions that will be used are GetRolePermissionSystem
 and GetRolePermissionFolder, to determine if the current user is a member of the designated
 system-wide or folder specific (repectievly) custom role. These can be maintained in the
 CMS settings section, under roles - Custom-Permissions, as well as by using the 
 following funtions.

</member><member name="M:Ektron.Cms.CommonApi.GetVisitorID(System.Web.UI.Page)">
	<summary>
 Returns a unique ID stored as EktGUID, used to track visitors to the site.
 </summary>
	<param name="page">A reference to the current active page object.</param>
	<returns>A unique identifier for the current visitor.</returns>
	<remarks>If the cookie value is not set, this function will set it and return the new GUID value. Otherwise it returns the cookie GUID.
 If the user does not have cookies enabled, it returns String.Empty.</remarks>
</member><member name="M:Ektron.Cms.CommonApi.GetVisitorID(System.Web.HttpRequest,System.Web.HttpResponse)">
	<summary>
 Returns a unique ID stored as EktGUID, used to track visitors to the site.
 </summary>
	<param name="request">A reference to the current active request object.</param>
	<param name="response">A reference to the current active response object.</param>
	<returns>A unique identifier for the current visitor.</returns>
	<remarks>If the cookie value is not set, this function will set it and return the new GUID value. Otherwise it returns the cookie GUID.
 If the user does not have cookies enabled, it returns String.Empty.</remarks>
</member><member name="M:Ektron.Cms.CommonApi.IsNewVisitor(System.Web.UI.Page)">
	<summary>
 Returns whether a current viewer of a particular web page is a first time visitor or not. This is accomplished by checking to see if a cookie is enabled or not.
 </summary>
	<param name="page">A reference to the current active page object.</param>
	<returns>True or false, indicating if a user is a new visitor or not.</returns>
	<remarks>Note, this treats users who do not have cookies enabled as first time visitors.</remarks>
</member><member name="T:Ektron.Cms.CommonApi">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CalendarEventAPI.LoadAllEvents(System.Int64,System.DateTime,System.DateTime)">
	<summary>
  Returns an Generic.List(Of CalendarEventData) with all the events specified in the range.
  This function is overloaded. See Also:
  LoadAllEvents(ByVal calendarID As Long)
 </summary>
	<param name="calendarID">The CalendarID associated with the calendar</param>
	<param name="startDate">The beginning of the date range of Events</param>
	<param name="endDate">The end of the date range of Events </param>
	<returns>A generic list of CalendarEventData for the specified range</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CalendarEventAPI.LoadAllEvents(System.Int64)">
	<summary>
 Returns an Generic.List(Of CalendarEventData) with all the events of a particular calendar
 </summary>
	<param name="calendarID">The CalendarID associated with the calendar</param>
	<returns>A generic list of CalendarEventData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApiBase.ecmCookie(System.String)">
	<summary>
 Returns the value for a given key.
 </summary>
	<param name="KeyName">The cookie key.</param>
	<returns>Object</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApiBase.SetCookieValue(System.String,System.String)">
	<summary>
 Resets the cookie value.
 </summary>
	<param name="Keyname">The Keyname. (Required)</param>
	<param name="CookieValue">Value</param>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\preview.aspx.vb</c>.<p/>
 Here is a code snippet from that page.
 <code>
 Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    Dim m_refAPI As New CommonApi
    Try
        If (m_refAPI.GetCookieValue("site_preview") = 1) Then
            m_refAPI.SetCookieValue("site_preview", 0)
        Else
            m_refAPI.SetCookieValue("site_preview", 1)
        End If
     Catch ex As Exception
     Finally
        m_refAPI = Nothing
     End Try
 End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApiBase.GetCookieValue(System.Web.HttpCookie@,System.String)">
	<summary>
 Reads the cookie value.
 </summary>
	<param name="Keyname">The Keyname. (Required)</param>
	<returns>String</returns>
	<example>
 An example of using this function can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\preview.aspx.vb</c>.<p/>
 Here is a code snippet from that page.
 <code>
 Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    Dim m_refAPI As New CommonApi
    Try
        If (m_refAPI.GetCookieValue("site_preview") = 1) Then
            m_refAPI.SetCookieValue("site_preview", 0)
        Else
            m_refAPI.SetCookieValue("site_preview", 1)
        End If
     Catch ex As Exception
     Finally
        m_refAPI = Nothing
     End Try
 End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.CommonApiBase.DeleteCookie">
	<summary>
 Removes the cookie from the site.
 </summary>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApiBase.SitePath">
	<summary>
 Returns the site path.
 </summary>
	<value></value>
	<returns>String</returns>
	<example>
 An example of using this property can be found in the Workarea source file<p/>
		<c>CMS400Demo\\Workarea\\isearch.aspx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApiBase.IsLoggedIn">
	<summary>
 Returns a flag indication that an user is logged in.
 </summary>
	<value>Boolean</value>
	<returns>Boolean</returns>
	<remarks>Returns true if a user is logged in to the cms and is not an internal admin.</remarks>
</member><member name="P:Ektron.Cms.CommonApiBase.UserId">
	<summary>
 Returns the currently logged in user ID.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApiBase.ContentLanguage">
	<summary>
 Returns the content language.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApiBase.OriginalLanguageId">
	<summary>
 Returns the original language ID.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApiBase.CmsPreview">
	<summary>
 Returns the value of preview mode.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.CommonApiBase.SitePreview">
	<summary>
 Returns 0 if the site preview is set to false, otherwise returns 1.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.CommonApiBase">
	<summary>
 Common base class for all internal Cms Api classes.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Utilities.LoadPermissions(System.Int64,System.String,Ektron.Cms.Content.EkContent.PermissionResultType)">
	<summary>
 Loads the permission for given object, such as content, folder, task, etc.
 </summary>
	<param name="Id">The object ID</param>
	<param name="RequestType">The object type := content | folder | collections | tasks </param>
	<param name="Type">The permission result type</param>
	<returns>Ektron.Cms.PermissionData</returns>
	<remarks>Use LoadPermissions from the Ektron.CMS.API.Permissions namespace.</remarks>
</member><member name="M:Ektron.Cms.API.User.User.ActivateUserAccount(System.String,System.String)">
	<summary>
 Verifies an unverified membership user using the Username and GUID (AccountID)
 parameter if two phase verification of membership users is enabled. Please see the settings document.
 IMPORTANT! You cannot use this method to return a deleted user to an active state.<para></para>
 This function is overloaded. See Also: ActivateUserAccount (Long)
 </summary>
	<param name="Username">The login name for the user.</param>
	<param name="AccountID">The GUID for the user.</param>
	<returns>
 Boolean
 </returns>
</member><member name="M:Ektron.Cms.API.User.User.ActivateUserAccount(System.Int64)">
	<summary>
 Verifies an unverified membership user using the UserId parameter if two phase verification of membership users is enabled. 
 Please see the settings document.
 IMPORTANT! You cannot use this method to return a deleted user to an active state.<para></para>
 This function is overloaded. See Also: ActivateUserAccount (String String)
 </summary>
	<param name="UserId">A unique ID for the required user.</param>
	<returns>Boolean</returns>
</member><member name="M:Ektron.Cms.API.User.User.LockUserAccount(System.Int64)">
	<summary>
 This function locks a user account.
 </summary>
	<param name="UserId">A unique ID for the required user.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.UnLockUserAccount(System.Int64)">
	<summary>
 This function Unlocks a user account.
 </summary>
	<param name="UserId">A unique ID for the required user.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.AddNewUser(Ektron.Cms.UserData)">
	<summary>
		<b>This method is obsolete. Please use the AddMembershipUser method.</b><para></para>
 Adds a new membership user to CMS.
 </summary>
	<param name="udUserData">An object of class which represents the corresponding user elements.</param>
	<returns>Ektron.Cms.UserData</returns>
</member><member name="M:Ektron.Cms.API.User.User.AddMembershipUser(Ektron.Cms.UserData)">
	<summary>
 Adds a new membership user to CMS.
 </summary>
	<param name="udUserData">An object of class which represents the corresponding user elements.</param>
	<returns>Ektron.Cms.UserData</returns>
	<example>
 The following example shows how to create a Web page from which a new membership user can be added.
 This example uses some standard drag and drop controls and a small section of VB code utilizing the 
 AddMembershipUser method. This method uses the InternalAdmin to add the Membership User. In 
 the first section, we will deal with the standard drag and drop controls. In the second, we'll deal 
 with the code behind.<para></para>
		<pre>
   1. Between the form tags, create a table with four rows and three columns.
   2. In the first row, first column, add a label that shows where to enter the membership user's Email address.
        <c>&lt;asp:Label ID="Label6" runat="server" Text="Email: " Width="76px"&gt;&lt;/asp:Label&gt;</c>
   3. In the first row, second column, add a text box to enter the Email address.
        <c>&lt;asp:TextBox ID="txtEmail" runat="server" Width="144px"&gt;&lt;/asp:TextBox&gt;</c>
   4. In the first row, third column, add a RequiredFieldValidator control from the Validation control menu. This validates that something appears in the Email address box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvEmail" runat="server" ErrorMessage="Please enter an Email address"</c>
			<c>ControlToValidate="txtEmail" Display="Dynamic"&gt;Please enter email address&lt;/asp:RequiredFieldValidator&gt;</c>
   5. In the same table cell, add a RegularExpressionValidator control. This validates the information entered is in the format of an Email address.
        <c>&lt;asp:RegularExpressionValidator ID="rfvEmailFormat" ControlToValidate="txtEmail" runat="server" ErrorMessage="Please enter a valid email address"</c>
			<c>ValidationExpression="\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*" Width="236px" &gt;&lt;/asp:RegularExpressionValidator&gt;</c>
   6. In the second row, first column, add a label to show where to enter a first name.
        <c>&lt;asp:Label ID="Label4" runat="server" Text="First name: " Width="76px"&gt;&lt;/asp:Label&gt;</c>
   7. In the second row, second column, add a text box to enter the fist name.
        <c>&lt;asp:TextBox ID="txtFirstName" runat="server" Width="144px"&gt;&lt;/asp:TextBox&gt;</c>
   8. In the second row, third column, add a RequiredFieldValidator control from the Validation control menu. This validates that something appears in the first name box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvFirstName" runat="server" ErrorMessage="Please enter first name" </c>
			<c>ControlToValidate="txtFirstName"&gt;Please enter first name&lt;/asp:RequiredFieldValidator&gt;</c>
   9. In the third row, first column, add a label to show where to enter a last name. 
        <c>&lt;asp:Label ID="Label7" runat="server" Text="Last Name:" Width="76px"&gt;&lt;/asp:Label&gt;</c>
  10. In the third row, second column, add a text box to enter the last name.
        <c>&lt;asp:TextBox ID="txtLastName" runat="server" Width="144px"&gt;&lt;/asp:TextBox&gt;</c>
  11. In the third row, third column, add a RequiredFieldValidator control from the Validation control menu. This validates that something appears in the last name box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvLastName" runat="server" ErrorMessage="Please enter last name"</c>
			<c>ControlToValidate="txtLastName"&gt;Please enter last name&lt;/asp:RequiredFieldValidator&gt;</c>
  12. In the fourth row, first column, add a label to show where to enter a password.
        <c>&lt;asp:Label ID="Label8" runat="server" Text="Password: " Width="76px"&gt;&lt;/asp:Label&gt;</c>
  13. In the fourth row, second column, add a text box to enter the password.
        <c>&lt;asp:TextBox ID="txtPassword" runat="server" TextMode="Password" Width="144px"&gt;&lt;/asp:TextBox&gt;</c>
  14. In the fourth row, third column,  add a RequiredFieldValidator control from the Validation control menu. This validates that something appears in the password box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvPassword" runat="server" ErrorMessage="Please enter password"</c>
			<c>ControlToValidate="txtPassword"&gt;Please enter password&lt;/asp:RequiredFieldValidator&gt;</c>
  15. After the table, add a break and then add a button to submit the membership user's information.
        <c>&lt;br /&gt;</c>
			<c>&lt;asp:Button ID="btnAdd" runat="server" Text="Add Membership User" Width="153px" /&gt;</c>
  16. Add two breaks for spacing purposes.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
  17. Add a results label to display a message stating the membership user was added and the new ID.
       <c>&lt;asp:Label ID="lblResult" runat="server"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add button click event.
 <code>
        Protected Sub btnAdd_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnAdd.Click
 </code>
   2. Create an object for the user data items.
 <code>
           Dim memDetails As New Ektron.Cms.UserData
 </code>
   3. Create an object for the new membership user information.
 <code>
           Dim newMemUser As New Ektron.Cms.UserData
 </code>
   4. Create an object for the User API.
 <code>
           Dim userAPI As New Ektron.Cms.API.User.User
 </code>
   5. Create an integer place holder for the new ID.
 <code>
           Dim newMemUserId As Integer
 </code> 
   6. Populate memDetails with the information from the text boxes.
 <code>
           memDetails.Username = txtEmail.Text
           memDetails.FirstName = txtFirstName.Text
           memDetails.LastName = txtLastName.Text
           memDetails.Password = txtPassword.Text
 </code>
   7. Create a Try/Catch around the AddMembershipUser method. This allows you to catch any exceptions and helps when debugging.
 <code>
           Try
               newMemUser = userAPI.AddMembershipUser(memDetails)
 </code>
   8. Assign newMemUserId a new ID.
 <code>
               newMemUserId = newMemUser.Id
 </code>
   9. Check to see if there is an ID returned. If so, display a message with the membership username and ID.
 <code>
            If (newMemUserId &gt; 0) Then
                lblResult.Text = "The membership user " &amp; txtEmail.Text &amp; " was added into CMS400.Net with UserID = " &amp; newMemUserId
            End If   
 </code>
   10. If there is an error, let the user know what happened.
 <code>
            Catch ex As Exception
               lblResult.Text = ex.Message
            End Try
 
     End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.AddUser(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds a new user to CMS.
 </summary>
	<param name="Users">User details as a value, key pair.</param>
	<returns>Ektron.Cms.UserData</returns>
</member><member name="M:Ektron.Cms.API.User.User.AddUser(Ektron.Cms.UserData)">
	<summary>
 Adds a new user to CMS.
 </summary>
	<param name="udUserData">User details as a value strongly typed UserData object.</param>
	<returns>Ektron.Cms.UserData</returns>
</member><member name="M:Ektron.Cms.API.User.User.AddUserGroup(System.String,System.String,System.String)">
	<summary>
 Creates new user group.
 </summary>
	<param name="GroupName">The name of the group.</param>
	<param name="GroupPath">Group path, usually required for Active Directory, otherwise CMS group assumed.</param>
	<param name="GroupDomain">Group domain, usually required for Active Directory.</param>
</member><member name="M:Ektron.Cms.API.User.User.AddUserToGroup(System.Int64,System.Int64)">
	<summary>
 Adds an existing user to an existing group.
 </summary>
	<param name="UserId">The user's ID.</param>
	<param name="GroupId">The required group's ID.</param>
</member><member name="M:Ektron.Cms.API.User.User.AutoLogInUser(System.String,System.String,System.String)">
	<summary>
 Login the given user credentials.
 </summary>
	<param name="SAMusername">user name</param>
	<param name="domain">domain</param>
	<param name="ServerName">server name</param>
	<returns>True if the user successfully logged in otherwise false.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.CreateBlankUserObject">
	<summary>
 Returns the instance of the user data. <para></para>
 This function is overloaded. See Also: CreateBlankUserObject (UserData)
 </summary>
	<returns>Ektron.Cms.UserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.CreateBlankUserObject(Ektron.Cms.UserData@)">
	<summary>
 Sets the given user data values into the UserData class.<para></para>
 This function is overloaded. See Also: <see cref="M:Ektron.Cms.API.User.User.CreateBlankUserObject" text="CreateBlankUserObject"/>
	</summary>
	<param name="udUserData">An Object of user properties.</param>
	<remarks>
 \ \ 
 </remarks>
</member><member name="M:Ektron.Cms.API.User.User.DeleteUserByID(System.Int64)">
	<summary>
 Removes the user from the system.  This will not purge the data, but it disables the user from further accessing the system.
 </summary>
	<param name="Id">The user’s ID.</param>
</member><member name="M:Ektron.Cms.API.User.User.DeleteUserByIds(System.String)">
	<summary>
 Removes the user from the system.  This will not purge the data, but it disables the user from further accessing the system.
 </summary>
	<param name="Ids">The selected user IDs (comma separated values).</param>
</member><member name="M:Ektron.Cms.API.User.User.DeleteUserFromGroup(System.Int64,System.Int64,System.Boolean)">
	<summary>
 Removes a user from the designated group.
 </summary>
	<param name="UserId">The user's ID.</param>
	<param name="GroupId">The group's ID.</param>
</member><member name="M:Ektron.Cms.API.User.User.DeleteUserGroup(System.Int64)">
	<summary>
 Removes the group from the system permanently.
 </summary>
	<param name="Id">The group's ID.</param>
</member><member name="M:Ektron.Cms.API.User.User.EditUserCustomProperties(System.Int64,System.Boolean)">
	<summary>
 This method creates the editable fields(UI) for user's custom properties.
 </summary>
	<param name="UserId">User's ID. If the user ID is not specified then it will return empty fields.</param>
	<param name="bReadOnly"></param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.GetActiveUser(System.Int64,System.Boolean)">
	<summary>
 Returns all of the user properties with or without preference.
 </summary>
	<param name="Id">The user's ID.</param>
	<param name="Preference">Preference is returned only if the value true, otherwise nothing is returned for preference.</param>
	<returns>Ektron.Cms.UserData</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetADMapping(System.Int64,System.String,System.Int32,System.Int32,System.Int32)">
	<summary>
 Loads the CMS and Active Directory name.
 </summary>
	<param name="CallerId">Who is calling this function.</param>
	<param name="MapType">Possible value is “userprop” (user properties).</param>
	<param name="Map">Ektron.Cms.Common.EkEnumeration.MapTypes (include, exclude and dontconsider are the possible values).</param>
	<param name="Exclude">Flag (0 – false, 1-true).</param>
	<param name="Editable">Flag (0-false, 1-true).</param>
	<returns>Ektron.Cms.AdMappingData()</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetAllCmsUsers(System.String)">
	<summary>
 Loads all the CMS users.
 </summary>
	<param name="OrderBy">Used to arrange data in a specific
                       order.<para></para>The string value
                       can be\:
                       * username
                       * firstname
                       * lastname
                       * userid
                       * language
                       * datecreated
                       * lastlogindate</param>
	<returns>
 Ektron.Cms.UserData()
 </returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.GetAllCustomProperties">
	<summary>
 Returns array of all the custom properties defined in the system.
 </summary>
	<returns>Ektron.Cms.CustomAttribute()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.GetAllUserByCustomProperty(Ektron.Cms.Common.EkEnumeration.ObjectPropertyValueTypes,System.String)">
	<summary>
 Returns all the users based on the given properties.
 </summary>
	<param name="PropType"></param>
	<param name="PropValues">Required property</param>
	<returns></returns>
</member><member name="M:Ektron.Cms.API.User.User.GetAllUserGroups(Ektron.Cms.Common.EkEnumeration.UserTypes,System.String,Ektron.Cms.PagingInfo@)">
	<summary>
 Loads all of the user groups from the system.<para></para>
 This function is overloaded.
 </summary>
	<param name="GroupType">GroupType\: 1 = Membership; 0 =
                         CMSUser</param>
	<param name="OrderBy">Arranges data in a specific order.
                       Possible values are <b>GroupName</b>
                       or <b>GroupID</b>.</param>
	<param name="paging">A PagingInfo object, used to select obtain only a portion of the data to display at any one time.</param>
	<returns>An array of UserGroupData.</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetAllUserGroups(Ektron.Cms.Common.EkEnumeration.UserTypes,System.String)">
	<summary>
 Loads all of the user groups from the system.<para></para>
 This function is overloaded. See Also: GetAllUserGroups (String)
 </summary>
	<param name="GroupType">GroupType\: 1 = Membership; 0 =
                         CMSUser</param>
	<param name="OrderBy">Arranges data in a specific order.
                       Possible values are <b>GroupName</b>
                       or <b>GroupID</b>.</param>
	<returns>
 Ektron.Cms.UserGroupData()
 </returns>
</member><member name="M:Ektron.Cms.API.User.User.GetAllUserGroups(System.String)">
	<summary>
 Loads all of the user groups from the system.<para></para>
 This function is overloaded. See Also: GetAllUserGroups (EkEnumeration.UserTypes String)
 </summary>
	<param name="OrderBy">Arranges data in a specific order.
                       Possible values are <b>GroupName</b>
                       or <b>GroupID</b>.</param>
	<returns>
 Ektron.Cms.UserGroupData()
 </returns>
</member><member name="M:Ektron.Cms.API.User.User.GetAllUsers(Ektron.Cms.UserRequestData@)">
	<summary>
 Returns the list of users from the database based on the UserRequestData class.
 </summary>
	<param name="userRequest">list of constraints to load users</param>
	<returns>An array of users as UserData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.GetAllUsers(System.Int64,System.Int64)">
	<summary>
 Gets the User Group Data of all the allowed users in the folder specified.
 </summary>
	<param name="CallerID">The user ID that is logged on to the system.</param>
	<param name="FolderId">The ID of the folder.</param>
	<returns>Ektron.Cms.UserGroupData()</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetMembershipUser(System.String)">
	<summary>
 Returns user data based on the user's login name (username).
 </summary>
	<param name="Username">User’s login name (username). This is required</param>
	<returns>Ektron.Cms.UserData</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetGroupsUserIsIn(System.Int64,System.String)">
	<summary>
 Loads all the groups by user.
 </summary>
	<param name="UserId">The user's ID.</param>
	<param name="OrderBy">The order in which the groups are displayed. The possible values are "GroupName" and "GroupID". (Required)</param>
	<returns>Ektron.Cms.GroupData()</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetGroupsUserIsIn(System.Int64,Ektron.Cms.Common.EkEnumeration.GroupOrderBy)">
	<summary>
 Loads all the groups by user.
 </summary>
	<param name="UserId">The user's ID.</param>
	<param name="OrderBy">The order in which the groups are displayed. The possible enumeration values are "GroupOrderBy.GroupName" and "GroupOrderBy.GroupID". (Required)</param>
	<returns>Ektron.Cms.GroupData()</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetUser(System.Int64,System.Boolean,System.Boolean)">
	<summary>
 Loads the user details for the given user.
 </summary>
	<param name="Id">The user ID.</param>
	<param name="Preference">Loads preference only if required (true = load preferences as a part of user data).</param>
	<returns>Ektron.Cms.UserData</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetNonVerifyUser(System.String)">
	<summary>
 Returns an array of user group data based on the username
 </summary>
	<param name="username">The user's name. (Required)</param>
	<returns>
 Ektron.Cms.UserGroupData()
 </returns>
</member><member name="M:Ektron.Cms.API.User.User.GetNonVerifyUser(System.String,System.Boolean)">
	<summary>
 Returns an array of user group data based on the username , userpreference
 </summary>
	<param name="username">The user's name.(Required)</param>
	<param name="Preference">Whether user preferences need to be returned (Required - Boolean)</param>
	<returns>
 Ektron.Cms.UserGroupData()
 </returns>
</member><member name="M:Ektron.Cms.API.User.User.GetUserByUsername(System.String)">
	<summary>
 Loads the user details for the given user.
 </summary>
	<param name="username">The username.</param>
	<returns>Ektron.Cms.UserData</returns>
	<example>
 The following example shows how to create a Web page that retrieves user details for a given username.
 This example uses some standard drag and drop controls and a small section of VB code utilizing the 
 GetUserByUsername method. This method uses the InternalAdmin to retrieve the user details. In 
 the first section, we will deal with the standard drag and drop controls. In the second, we'll deal 
 with the code behind.<para></para>
		<pre>
   1. Between the form tags, add a label to show where to enter a username.
        <c>&lt;asp:Label ID="Label1" runat="server" Text="Username: "&gt;&lt;/asp:Label&gt;</c>
   2. Add a text box to enter the username.
        <c>&lt;asp:TextBox ID="txtUserName" runat="server" Width="63px"&gt;&lt;/asp:TextBox&gt;</c>
   3. add a RequiredFieldValidator control from the Validation control menu. This validates that something appears in the username box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvUserId" runat="server" ControlToValidate="txtUserName"</c>
			<c>ErrorMessage="Please enter Username"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add two breaks for spacing purposes.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add a button to submit the username.
       <c>&lt;asp:Button ID="btnGetUser" runat="server" Text="Get Custom Properties" Width="148px" /&gt;</c>
   6. Add two more breaks for spacing purposes.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
   7. Add a label to display the given user's details.
       <c>&lt;asp:Label ID="lblResult" runat="server"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add button click event.
 <code>
         Protected Sub btnGetUser_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGetUser.Click
 </code>
   2. Create an object for the user API.
 <code>
             Dim userAPI As New Ektron.Cms.API.User.User
 </code>
   3. Create an object for the user data.
 <code>
             Dim userObj As Ektron.Cms.UserData
 </code>
   4. Create a Try/Catch around the GetUserByUsername method. This allows you to catch any exceptions and helps when debugging.
 <code>
             Try
                 userObj = userAPI.GetUserByUsername(txtUserName.Text.Trim)
 </code>
   5. Check to make sure the a user ID exists.
 <code>
                 If userObj.Id = 0 Then
                    lblResult.Text = "Invalid Username"
                    Exit Sub
                 End If
 </code>
   6. Create an integer place holder.
 <code>
                 Dim i As Integer
 </code>
   7. Check to make sure the attribute list is populated.
 <code>
                 If Not userObj.AttributeList Is Nothing Then
 </code>
   8. If the list is populated, display the results.
 <code>                   
                    lblResult.Text = "&lt;table&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Value&lt;/th&gt; &lt;th&gt;Type&lt;/th&gt;"
                    For i = 0 To userObj.AttributeList.Length - 1 Step 1
                        lblResult.Text &amp;= "&lt;tr&gt;"
                        lblResult.Text &amp;= "&lt;td&gt;" &amp; userObj.AttributeList(i).Name &amp; "&lt;/td&gt;"
                        lblResult.Text &amp;= "&lt;td&gt;" &amp; userObj.AttributeList(i).Value &amp; "&lt;/td&gt;"
                        lblResult.Text &amp;= "&lt;td&gt;" &amp; userObj.AttributeList(i).ValueType.ToString() &amp; "&lt;/td&gt;"
                        lblResult.Text &amp;= "&lt;/tr&gt;"
                    Next
                    lblResult.Text &amp;= "&lt;/table&gt;"
 </code>
   9. If nothing is contained in the list, display a message.
 <code>
                 Else
                    lblResult.Text &amp;= "No custom properties set-up for this user"
                End If
 </code>
  10. If there is an error, let the user know what happened.
 <code>
             Catch ex As Exception
                lblResult.Text = ex.Message
             End Try 
         End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.GetUserForFolderAdmin(System.Int64,System.Int64,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="FolderId"></param>
	<param name="Id"></param>
	<param name="Preference"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.GetUserCustomProperties(System.Int64)">
	<summary>
 Returns an array of custom properties for a given user's ID.
 </summary>
	<param name="UserId">User's ID</param>
	<returns>Ektron.Cms.CustomAttribute()</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetUserEmailInfo(System.Int64)">
	<summary>
 Returns user data for a given user's ID.
 </summary>
	<param name="Id">The user's ID.</param>
	<returns>Object of UserData</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetUserGroup(System.Int64)">
	<summary>
 Loads a given group's details.
 </summary>
	<param name="Id">The group's ID.</param>
	<returns>Ektron.Cms.UserGroupData</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetUserGroupByName(System.String)">
	<summary>
 Loads a given group's details.
 </summary>
	<param name="name">The group's name.</param>
	<returns>Ektron.Cms.UserGroupData</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetUserGroupForFolderAdmin(System.Int64,System.Int64)">
	<summary>
 Returns all the group's data for the administrator.
 </summary>
	<param name="FolderId">Folder ID</param>
	<param name="Id">User ID</param>
	<returns>UserGroupData</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetUserPreference(System.Int64)">
	<summary>
 Loads the preferences for the given user.
 </summary>
	<param name="Id">The user's ID.</param>
	<returns>Ektron.Cms.UserPreferenceData</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetUsers(System.Int64,System.String)">
	<summary>
 Loads the all the users from the given group.
 </summary>
	<param name="GroupId">The group's ID</param>
	<param name="OrderBy">The order of the users. The string
                       value can be\:
                       * username
                       * firstname
                       * lastname
                       * userid
                       * language
                       * datecreated
                       * lastlogindate</param>
	<returns>
   * Ektron.Cms.UserData() 
 </returns>
</member><member name="M:Ektron.Cms.API.User.User.GetUsers(System.String,System.String)">
	<summary>
 \Returns an array of user group data based on the userName
 and userNameType.
 </summary>
	<param name="userNames">The user's name. (Required)</param>
	<param name="userNameTypes">The user type possible values
                             are <b>user</b> or
                            <b>membership user</b>.</param>
	<returns>
 Ektron.Cms.UserGroupData()
 </returns>
</member><member name="M:Ektron.Cms.API.User.User.GetUsersForTask(System.Int64,System.Int64)">
	<summary>
 Loads the users that have permissions to the given content.
 </summary>
	<param name="CallerID">The user ID that is logged on to the system.</param>
	<param name="ContentID">The ID of the content. (Required)</param>
	<returns>Ektron.Cms.UserGroupData()</returns>
</member><member name="M:Ektron.Cms.API.User.User.GetUsersNotInGroup(System.Int64,System.String,System.Int32)">
	<summary>
 Loads all the users that are not in the given group.
 </summary>
	<param name="Id">The group ID.</param>
	<param name="OrderBy">The order of the users. The string
                       value can be\:
                       * username
                       * firstname
                       * lastname
                       * userid
                       * language
                       * datecreated
                       * lastlogindate</param>
	<returns>
 Ektron.Cms.UserData()
 </returns>
</member><member name="M:Ektron.Cms.API.User.User.LogInUser(System.String,System.String,System.String)">
	<summary>
 This method allows you to log a user into a server by passing their username and password. 
 </summary>
	<param name="username">The system username.</param>
	<param name="Password">The system password.</param>
	<param name="ServerName">The system server name. When using Active Directory, this parameter needs to be an empty string "".</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.LogInUser(System.String,System.String,System.String,System.String)">
	<summary>
 This method allows you to log a user into a server by passing their username, password, and server name. 
 </summary>
	<param name="username">The system username.</param>
	<param name="Password">The system password.</param>
	<param name="ServerName">The system server name. When using Active Directory, this parameter needs to be an empty string "".</param>
	<param name="Domain">The user's domain, required only when users login using Active Directory. If your domain is <b>intra.example.com</b>, it is entered in the following format: <b>"DC=intra,DC=example,DC=com"</b>.</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.LogInUser(System.String,System.String,System.String,System.String,Ektron.Cms.Common.EkEnumeration.AutoAddUserTypes)">
	<summary>
 Used to force log in the user and no password required.
 Note: When using Active Directory/LDAP, this method will log the user only after first successfull LDAP/AD User Login into CMS. 
 when using Active Directory, the ServerName and Protocol parameters are set to empty strings (""). 
 </summary>
	<param name="username">The system username.</param>
	<param name="ServerName">The system server name. When using Active Directory, this parameter needs to be an empty string "".</param>
	<param name="Domain">The user's domain, required only when users login using Active Directory. If your domain is <b>intra.example.com</b>, it is entered in the following format: <b>"DC=intra,DC=example,DC=com"</b>.</param>
	<param name="Protocol">Required only when using a secure login or when you are using any valid Active Directory protocols.</param>
	<param name="AutoAddType">The desired EkEnumeration.AutoAddUserTypes type</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks>Using this method may increase security risk</remarks>
</member><member name="M:Ektron.Cms.API.User.User.LogInUser(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 This method allows you to log a user into a server by passing their username, password, and server name. 
 You can also log in an Active Directory user by providing the username, password and domain. Note: When 
 when using Active Directory, the ServerName and Protocol parameters are set to empty strings (""). 
 </summary>
	<param name="username">The system username.</param>
	<param name="Password">The system password.</param>
	<param name="ServerName">The system server name. When using Active Directory, this parameter needs to be an empty string "".</param>
	<param name="Domain">The user's domain, required only when users login using Active Directory. If your domain is <b>intra.example.com</b>, it is entered in the following format: <b>"DC=intra,DC=example,DC=com"</b>.</param>
	<param name="Protocol">This property is always set to an empty string "". This parameter is only required when using Active Directory.</param>
	<returns>Ektron.Cms.UserData</returns>
	<example>
 The following example shows how to create a Web page that programmatically logs a user into CMS400.NET.
 Please note that the code-behind in this example does not login a new user if someone is already logged 
 into the Workarea. This example uses some standard drag and drop controls and a small section of VB code 
 utilizing the LogInUser method. This method uses the InternalAdmin to log the user into CMS400.NET. In 
 the first section, we will deal with the standard drag and drop controls. In the second, we'll deal 
 with the code behind.<para></para>
		<pre>
   1. Between the form tags, add a label to show where the Username is entered.
        <c>&lt;asp:Label ID="Label6" runat="server" Text="Username: " Width="76px"&gt;&lt;/asp:Label&gt;</c>
   2. Add a text box to enter the Username.
        <c>&lt;asp:TextBox ID="txtUserName" runat="server" Width="134px"&gt;&lt;/asp:TextBox&gt;</c>
   3. Add a RequiredFieldValidator control from the Validation control menu. This validates that something appears in the Username box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvUserName" runat="server" ErrorMessage="Please enter user name"</c>
			<c>ControlToValidate="txtUserName"&gt;Please enter user name&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add two breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add a label to show where the Password is entered.
        <c>&lt;asp:Label ID="Label8" runat="server" Text="Password: " Width="76px"&gt;&lt;/asp:Label&gt;</c>
   6. Add a text box to enter the Password.
        <c>&lt;asp:TextBox ID="txtPassword" runat="server" TextMode="Password" Width="134px"&gt;&lt;/asp:TextBox&gt;</c>
   7. Add a RequiredFieldValidator control from the Validation control menu. This validates that something appears in the password box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvPassword" runat="server" ErrorMessage="Please enter password"</c>
			<c>ControlToValidate="txtPassword"&gt;Please enter password&lt;/asp:RequiredFieldValidator&gt;</c>
   8. Add two breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   9. Add a button to submit the user's login information. We will add a button click event in the code behind.
        <c>&lt;asp:Button ID="btnLogin" runat="server" Text="Login" Width="57px" /&gt;</c>
   10. Add two last breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   11. Add a results label to display a message that states whether the user is logged in.
        <c>&lt;asp:Label ID="lblResult" runat="server" Width="432px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a page load event that checks to see if a user is logged into CMS400.NET.
 <code>
        Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
            Dim api As New Ektron.Cms.CommonApi
            If (api.RequestInformationRef.CallerId &gt; 0) Then
                lblResult.Text = api.RequestInformationRef.LoggedInUsername &amp; " is logged in." &amp; &lt;"br/&gt;"
            End If
        End Sub
 </code>
   2. Add a button click event.
 <code>
        Protected Sub btnLogin_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnLogin.Click
 </code>
   3. Create an object for the user API.
 <code>
            Dim userAPI As New Ektron.Cms.API.User.User
 </code>
   4. Create an object for the common API.
 <code>
            Dim api As New Ektron.Cms.CommonApi
 </code>
   5. Create an object to store the user data.
 <code>          
            Dim userObj As UserData
 </code>
   6. Create a Try/Catch around the LogInUser method. This allows you to catch any exceptions and helps when debugging.
   7. Check to see if the user is already logged in.
 <code>
            Try
                If (api.RequestInformationRef.CallerId &gt; 0) Then
                    lblResult.Text = api.RequestInformationRef.LoggedInUsername &amp; " is already logged in."
 </code>
   8. If the user is not logged in, proceed with the login.
 <code>
                Else
                    userObj = userAPI.LogInUser(txtUserName.Text.Trim, txtPassword.Text.Trim, "localhost", "", "")   
 </code>
   9. Check to see whether the login was successful. If it was unsuccessful, display a message.
 <code>
                    If userObj.Id = 0 Then
                        lblResult.Text = "Login failed."
                        Exit Sub
                    End If 
 </code>
   10. Set the authentication cookie and Response.Redirect.
 <code>
                    userAPI.SetAuthenticationCookie(userObj)
                    Response.Redirect(Request.Url.ToString)
                End If
 </code>
   11. If there is an error, let the user know what happened.
 <code>
             Catch ex As Exception
                lblResult.Text = ex.Message
             End Try 
         End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.SetAuthenticationCookie(Ektron.Cms.UserData)">
	<summary>
 This method sets the authentication cookie.
 </summary>
	<param name="userInfo">Returned value of the logInUser method.</param>
	<remarks>First, you must call the logInUser method to login the user.</remarks>
</member><member name="M:Ektron.Cms.API.User.User.ReadCustomProperties(System.Collections.Specialized.NameValueCollection)">
	<summary>
 Returns the custom properties as a Visual Basic collection. Importing the Microsoft.VisualBasic name space might be required.
 </summary>
	<param name="form">A collection of user properties.</param>
	<returns>Microsoft.VisualBasic.Collection</returns>
</member><member name="M:Ektron.Cms.API.User.User.ResetMembershipUserPassword(System.String)">
	<summary>
 Reset the password for the given membership user.
 </summary>
	<param name="Username">User’s username to be reset.</param>
	<returns>String</returns>
</member><member name="M:Ektron.Cms.API.User.User.ResetMembershipUserPassword(System.String,System.String)">
	<summary>
 Reset the password for the given membership user.
 </summary>
	<param name="Username">User’s username to be reset.</param>
	<param name="AccountId">If verification is turned on, specify verification id(email to a user).</param>
	<returns>String</returns>
</member><member name="M:Ektron.Cms.API.User.User.UnsubscribeUser(System.String,System.String)">
	<summary>
 Unsubscribes a user from the system.
 </summary>
	<param name="Username">The user's username.</param>
	<param name="Password">The user's password.</param>
	<returns>Boolean</returns>
</member><member name="M:Ektron.Cms.API.User.User.AddSubscription(System.Int64,System.Int64)">
	<summary>
 Assigns the identified subscription to the user.
 </summary>
	<param name="userId">The CMS user or membership ID</param>
	<param name="subscriptionId">The subscription ID</param>
	<remarks>Must supply a valid user ID and subscription ID, or will throw, 
 will also throw if user does not exist (or has been deleted). Will not error 
 if the user already has the given subscription.</remarks>
</member><member name="M:Ektron.Cms.API.User.User.RemoveSubscription(System.Int64,System.Int64)">
	<summary>
 Removes a users existing subscription assignment.
 </summary>
	<param name="userId">The CMS user or membership ID</param>
	<param name="subscriptionId">The subscription ID</param>
	<remarks>Must supply a valid user ID and subscription ID, or will throw, 
 will also throw if user does not exist (or has been deleted). Will not error 
 if the user does not have the given subscription.</remarks>
</member><member name="M:Ektron.Cms.API.User.User.UpdateCustomPropertiesItemOrder(System.String)">
	<summary>
 Updates the order of available custom properties.
 </summary>
	<param name="ItemOrder">Order of the properties applicable to the user.</param>
	<returns>Boolean</returns>
</member><member name="M:Ektron.Cms.API.User.User.UpdateUser(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the user details.
 </summary>
	<param name="data">A collection of user data.</param>
</member><member name="M:Ektron.Cms.API.User.User.UpdateUser(Ektron.Cms.UserData)">
	<summary>
 Updates the user details. If you do not wish to update the user's password, 
 leave the UserData.Password property blank.
 </summary>
	<param name="data">A UserData object of user data.</param>
</member><member name="M:Ektron.Cms.API.User.User.UpDateUserGroup(Ektron.Cms.UserData)">
	<summary>
 Updates the user group details.
 </summary>
	<param name="data">data As UserData)</param>
</member><member name="M:Ektron.Cms.API.User.User.UpDateUserGroup(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the user group details.
 </summary>
	<param name="Group">A list of group details as a collection.</param>
</member><member name="M:Ektron.Cms.API.User.User.UserObject(System.Int64)">
	<summary>
 Returns user data based on the user's ID. <para></para>
 This function is overloaded. See Also: UserObject (String)
 </summary>
	<param name="Id">The user's ID.</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.UserObject(System.String)">
	<summary>
 Returns user data based on the user's login or username.<para></para>
 This function is overloaded. See Also: UserObject (Long)
 </summary>
	<param name="sUserName">User's login or username.</param>
	<returns>Ektron.Cms.UserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.UpdateUserPreferences(System.Int64,Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the given user’s preference data.
 </summary>
	<param name="Id">The user’s ID.</param>
	<param name="data">A collection of user preferences.</param>
</member><member name="M:Ektron.Cms.API.User.User.IsAGroupMember(System.Int64,System.Int64)">
	<summary>
 For a given userId, returns whether that user is a member of the group.
 </summary>
	<param name="userId">Long value of the user Id.</param>
	<param name="groupId">Long value of the group Id.</param>
	<returns>Boolean of whether the user is a member of the group.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.IsAdmin">
	<summary>
 Determines the if the current user is an Administrator.
 </summary>
	<returns>True if the logged in user is administrator. Otherwise, returns false.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.IsARoleMember(System.Int64)">
	<summary>
 Roles provide the ability to offload/delegate some of the
 administrator's tasks onto other users, without giving full
 administration privileges to a user.<para></para>
 This function is overloaded. See Also:
   * IsARoleMember (Ektron.Cms.Common.EkEnumeration.CmsRoleIds)
   * IsARoleMember (Ektron.Cms.Common.EkEnumeration.CmsRoleIds Long Boolean)
   * IsARoleMember (Long Long Boolean)
 </summary>
	<param name="RoleId">_nt_</param>
	<returns>
	</returns><remarks>
 \ \ 
 </remarks>
</member><member name="M:Ektron.Cms.API.User.User.IsARoleMember(Ektron.Cms.Common.EkEnumeration.CmsRoleIds)">
	<summary>
 Roles provide the ability to offload/delegate some of the
 administrator's tasks onto other users, without giving full
 administration privileges to a user.<para></para>
 This function is overloaded. See Also:
   * IsARoleMember (Ektron.Cms.Common.EkEnumeration.CmsRoleIds Long Boolean)
   * IsARoleMember (Long Long Boolean)
   * IsARoleMember (Long)
 </summary>
	<param name="RoleId">_nt_</param>
	<returns>
	</returns><remarks>
 \ \ 
 </remarks>
</member><member name="M:Ektron.Cms.API.User.User.IsARoleMember(System.Int64,System.Int64,System.Boolean)">
	<summary>
 Roles provide the ability to offload/delegate some of the
 administrator's tasks onto other users, without giving full
 administration privileges to a user.<para></para>
 This function is overloaded. See Also:
   * IsARoleMember (Ektron.Cms.Common.EkEnumeration.CmsRoleIds Long Boolean)
   * IsARoleMember (Long)
   * IsARoleMember (Ektron.Cms.Common.EkEnumeration.CmsRoleIds)
 </summary>
	<param name="RoleId">_nt_</param>
	<param name="nUserId">_nt_</param>
	<param name="GroupFlag">_nt_</param>
	<returns>
	</returns><remarks>
 \ \ 
 </remarks>
</member><member name="M:Ektron.Cms.API.User.User.IsARoleMember(Ektron.Cms.Common.EkEnumeration.CmsRoleIds,System.Int64,System.Boolean)">
	<summary>
 Roles provide the ability to offload/delegate some of the
 administrator's tasks onto other users, without giving full
 administration privileges to a user.<para></para>
 This function is overloaded. See Also:
   * IsARoleMember (Ektron.Cms.Common.EkEnumeration.CmsRoleIds)
   * IsARoleMember (Long Long Boolean)
   * IsARoleMember (Long)
 </summary>
	<param name="RoleId">_nt_</param>
	<param name="nUserId">_nt_</param>
	<param name="GroupFlag">_nt_</param>
	<returns>
	</returns><remarks>
 \ \ 
 </remarks>
</member><member name="M:Ektron.Cms.API.User.User.IsARoleMemberForContent(System.Int64,System.Int64,System.Int64,System.Boolean)">
	<summary>
 Determines whether a Role Member is allowed to work with a given piece of content as an administrator or not.
 Administrations privileges are for the given piece of content only.
 Roles provide the ability to offload/delegate some of the administrator's tasks
 onto other users, without giving full administration privileges to a user.
 </summary>
	<param name="RoleId"></param>
	<param name="ContentId">The numeric content ID for which you are giving the Role Member privileges.</param>
	<param name="nUserId"></param>
	<param name="GroupFlag"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.IsARoleMemberForContent_FolderUserAdmin(System.Int64,System.Int64,System.Boolean)">
	<summary>
 Determines whether a Role Member is allowed to work with a given conatent as an administrator or not.
 Roles provide the ability to offload/delegate some of the administrator's tasks
 onto other users, without giving full administration privileges to a user.
 </summary>
	<param name="ContentId">required content id</param>
	<param name="nUserId">user id</param>
	<param name="GroupFlag">flag</param>
	<returns>True if granted otherwise false</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.IsARoleMemberForFolder(System.Int64,System.Int64,System.Int64,System.Boolean)">
	<summary>
 Determines whether a Role Member is allowed to work with a given folder as an administrator or not.
 Administrations privileges are for the given folder only.
 Roles provide the ability to offload/delegate some of the administrator's tasks
 onto other users, without giving full administration privileges to a user.
 </summary>
	<param name="RoleId"></param>
	<param name="FolderId">The numeric folder ID for which you are giving the Role Member privileges.</param>
	<param name="nUserId"></param>
	<param name="GroupFlag"></param>
	<returns>True if granted otherwise false</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.IsARoleMemberForFolder_FolderUserAdmin(System.Int64,System.Int64,System.Boolean)">
	<summary>
 Determines whether a Role Member is allowed to work with a given folder as an administrator or not.
 Administrations privileges are for the given folder only.
 Roles provide the ability to offload/delegate some of the administrator's tasks
 onto other users, without giving full administration privileges to a user.
 </summary>
	<param name="FolderId">required folder id</param>
	<param name="nUserId">user id</param>
	<param name="GroupFlag">group id</param>
	<returns>True if granted otherwise false</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.IsARoleMemberForFolder_MetadataAdmin(System.Int64,System.Int64,System.Boolean)">
	<summary>
 Determines whether a Role Member is allowed to work with a given folder as an meta data administrator or not.
 </summary>
	<param name="FolderId">required folder id</param>
	<param name="nUserId">user id</param>
	<param name="GroupFlag">group id</param>
	<returns>True if granted otherwise false</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.AddRolePermission(System.String)">
	<summary>
 Adds permission for the given role.
 </summary>
	<param name="RoleName">Required role name.</param>
	<returns>True if successfully added. Otherwise, returns false</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.User.GetUserPermissions(System.Int64,System.String,System.Int64,System.String,Ektron.Cms.Content.EkContent.PermissionUserType,Ektron.Cms.Content.EkContent.PermissionRequestType)">
	<summary>
 Loads the user permissions as a array of UserPermissionData.
 </summary>
	<param name="Id">The item's ID (content or
                  folder id whose permissions
                  you are seeking).</param>
	<param name="ItemType">The item's type (valid
                        values \- content or
                        folder).</param>
	<param name="UserId">The user's ID (when you are
                      getting permissions for a
                      group set this to zero).</param>
	<param name="UserGroupList">The group list (comma
                             separated list of group ids,
                             blank when you are getting
                             permissions for a specific
                             user).</param>
	<param name="PermissionType">PermissionUserType (Use a
                              value from enum
                              Ektron.Cms.Content.EkContent.PermissionResultType).</param>
	<param name="PermissionRequest">PermissionRequestType (Use a
                                 value from enum
                                 Ektron.Cms.Content.EkContent.PermissionRequestType).</param>
	<returns>
 Ektron.Cms.UserPermissionData()
 </returns>
</member><member name="P:Ektron.Cms.API.User.User.UserIdAuthenticated">
	<summary>
 Returns the id of the currently logged in user.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.DeSynchUsers(System.Boolean)">
	<summary>
 Update the user with new user details.
 </summary>
	<param name="Flag">If set to true, updates the user with new user information. Otherwise, nothing is updated.</param>
	<returns>Ektron.Cms.AdDeSyncUserData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.DeSynchUserGroups(System.Boolean)">
	<summary>
 Updates the group with a new group name.
 </summary>
	<param name="Flag">If set to true, updates the user group with the new group information. Otherwise, nothing is updated.</param>
	<returns>Ektron.Cms.AdDeSyncGroupData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.AddADGroupToCMS(System.Object)">
	<summary>
 This function allows you add Active Directory groups to the CMS.
 </summary>
	<param name="GroupPaths">A collection of Active Directory group paths.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.AddADUsersToCMSByUsername(Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection)">
	<summary>
 Adds Active Directory users to the CMS by their user name and domain.
 </summary>
	<param name="UserNames">A collection of user names.</param>
	<param name="UserDomains">A collection of domain names.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.GetADMapping(System.Int64,System.String,System.Int32,System.Int32,System.Int32)">
	<summary>
 Loads the CMS and Active Directory name.
 </summary>
	<param name="CallerId">The ID of the who is calling this function.</param>
	<param name="MapType">Possible value is “userprop” (user properties).</param>
	<param name="Map">Ektron.Cms.Common.EkEnumeration.MapTypes (include, exclude and dontconsider are the possible values).</param>
	<param name="Exclude">Flag (0 – false, 1- true).</param>
	<param name="Editable">Flag (0 - false, 1 - true).</param>
	<returns>Ektron.Cms.AdMappingData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.GetADStatus">
	<summary>
 Loads the required Synch, Desynch and relationship flags of the configured Active Directory.
 </summary>
	<returns>Ektron.Cms.AdSyncData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.GetAvailableADGroups(System.String,System.String)">
	<summary>
 Loads all of the Active Directory groups for a given domain and filter.
 </summary>
	<param name="Filter">Filter by complete or a specific group name.</param>
	<param name="Domain">The domain name. (Required)</param>
	<returns>Ektron.Cms.GroupData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.GetAvailableADUsers(System.Object,System.Object,System.String,System.String)">
	<summary>
 Loads all available Active Directory users.
 </summary>
	<param name="Attributes">Possible attributes are firstname, lastname, username or any(*).</param>
	<param name="Filter">Possible filters are firstname, lastname, username or any(*).</param>
	<param name="OrderBy">Any specific order such as username, firstname, lastname and domain.</param>
	<param name="Domain">The active directory domain. (Required)</param>
	<returns>Ektron.Cms.UserData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.GetDomains(System.Int32,System.Int32)">
	<summary>
 Loads a list of domains from Active Directory.
 </summary>
	<param name="ShowAll">flag (1 = show all).</param>
	<param name="CheckIntegration">Check whether CMS is configured to integrate Active Directory. 
 Enter <b>1</b> to check integration. Otherwise, the method continues without checking.</param>
	<returns>Ektron.Cms.DomainData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.MapCMSUserGroupToAD(System.Int64,System.String,System.String)">
	<summary>
 Updates the given CMS group corresponding to the Active Directory group.
 </summary>
	<param name="GroupId">The CMS group ID to update.</param>
	<param name="GroupName">The CMS group name to update.</param>
	<param name="Domain">The Active Directory domain.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.MapCMSUserToAD(System.Int64,System.String,System.String,System.Int32)">
	<summary>
 Maps the given user ID to the corresponding Active Directory entry.
 </summary>
	<param name="UserId">The user’s ID to map.</param>
	<param name="UserName">The user’s name to map.</param>
	<param name="Domain">The user’s domain.</param>
	<param name="PullInfo">Flag to load Active Directory information. (1 = Load Active Directory information, otherwise none.)</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.SynchCMSGroupsToAD(Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection)">
	<summary>
 Synchronizes the CMS group data to the Active Directory group data. This updates the CMS data with the corresponding to Active Directory changes.
 </summary>
	<param name="GroupIds">A collection of group IDs.</param>
	<param name="UserNames">A collection of usernames.</param>
	<param name="Domains">A collection of domains.</param>
	<param name="Actions">Possible actions are “delete” or “map”.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.SynchCMSRelationshipsToAD(Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection)">
	<summary>
 Synchronizes the CMS relations, such as groups, to the Active Directory for the given users.
 </summary>
	<param name="UserIds">A collection of user IDs.</param>
	<param name="GroupIds">A collection of group IDs.</param>
	<param name="Actions">A collection of actions (possible action is “delete”).</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.SynchCMSUsersToAD(Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,System.Int32)">
	<summary>
 Synchronize the CMS user data to the Active Directory data.
 </summary>
	<param name="UserIds">A collection of user IDs.</param>
	<param name="UserNames">A collection of usernames.</param>
	<param name="Domains">A collection of domains.</param>
	<param name="Actions">A collection of actions corresponding to items added to the collection. The possible collection values are “delete” or “map”.</param>
	<param name="PullInfo">Retrieves the Active Directory information when the value is 1, otherwise none.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.UpdateADMapping(System.Int64,System.Object)">
	<summary>
 Updates the Active directory information into the CMS based on the user ID and user data.
 </summary>
	<param name="UserId">The user’s ID.</param>
	<param name="pagedata">Key, value pair for given user ID.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.UpdateADUsersGroups(System.String,System.String)">
	<summary>
 Updates Active Directory users in a CMS group.
 </summary>
	<param name="UserName">The user’s username.</param>
	<param name="Domain">The user’s Domain.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.GetCMSUsersToSync(System.Int32)">
	<summary>
 Loads all the CMS users that need to be synchronized with Active Directory.
 </summary>
	<param name="MaxReturn">The maximum number of users that should be displayed.</param>
	<returns>Ektron.Cms.UserData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.GetCMSRelationshipsToSync(System.Int32)">
	<summary>
 Loads all the CMS relationships that need to be synchronized with Active Directory.
 </summary>
	<param name="MaxReturn">The maximum number of results that should be displayed.</param>
	<returns>Ektron.Cms.UserGroupData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.GetCMSGroupsToSync(System.Int32)">
	<summary>
 Loads all the CMS groups that need to be synchronized.
 </summary>
	<param name="MaxReturn">The maximum number of groups that should be displayed.</param>
	<returns>Ektron.Cms.GroupData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.User.ADUser.UpdateUsersInfoFromAD(System.String,System.String)">
	<summary>
 Updates the user details from the Active Directory details.
 </summary>
	<param name="UserName">The user’s username.</param>
	<param name="Domain">The user’s Domain.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.LoadTaxonomy(Ektron.Cms.TaxonomyRequest@)">
	<summary>
 Returns the TaxonomyData with all of its subcategory and its items.
 </summary>
	<param name="request">TaxonomyRequest</param>
	<returns>TaxonomyData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.ImportTaxonomy(System.String,System.String)">
	<summary>
 Creates a taxonomy using XML file.
 </summary>
	<param name="TaxonomyXml">The XML being used to create a taxonomy.</param>
	<param name="Title">The title for the new taxonomy.</param>
	<returns>Returns a numeric ID for the newly created taxonomy.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.ImportTaxonomy(System.String,System.String,System.Collections.Generic.List{Ektron.Cms.Common.EkEnumeration.TaxonomyType})">
	<summary>
 Creates a taxonomy using an XML file.
 </summary>
	<param name="TaxonomyXml">The XML being used to create a taxonomy.</param>
	<param name="Title">The title for the new taxonomy.</param>
	<param name="config">Configuration list that can be used.</param>
	<returns>Returns a numeric ID for the newly created taxonomy.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.CreateTaxonomy(Ektron.Cms.TaxonomyData)">
	<summary>
 Creates a new taxonomy.
 </summary>
	<param name="request">TaxonomyData</param>
	<returns>Returns an ID for the newly created Taxonomy.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.UpdateTaxonomy(Ektron.Cms.TaxonomyData)">
	<summary>
 Updates an existing taxonomy.
 </summary>
	<param name="request">TaxonomyData</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.DeleteTaxonomy(Ektron.Cms.TaxonomyRequest)">
	<summary>
 Deletes the existing taxonomy.
 </summary>
	<param name="request">TaxonomyRequest</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.ReadTaxonomy(Ektron.Cms.TaxonomyRequest@)">
	<summary>
 Read the taxonomy data.
 </summary>
	<param name="request">TaxonomyRequest</param>
	<returns>Returns Taxonomydata</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.AddTaxonomyItem(Ektron.Cms.TaxonomyRequest)">
	<summary>
 Inserts an item into the taxonomy.
 </summary>
	<param name="request">TaxonomyRequest</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.RemoveTaxonomyItem(Ektron.Cms.TaxonomyRequest)">
	<summary>
 Removes an item from the taxonomy.
 </summary>
	<param name="request">TaxonomyRequest</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.AddTaxonomySyncFolder(Ektron.Cms.TaxonomySyncRequest)">
	<summary>
 Adds a folder entry into taxonomy.
 </summary>
	<param name="request">TaxonomyRequest</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.RemoveTaxonomyFolder(Ektron.Cms.TaxonomySyncRequest)">
	<summary>
 Removes the sync up folder from taxonomy.
 </summary>
	<param name="request">TaxonomyRequest</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.ReadAllAssignedCategory(System.Int64)">
	<summary>
 Returns all the assigned categories for the content ID.
 </summary>
	<param name="contentid">A content's numeric ID.</param>
	<returns>An array of TaxonomyBaseData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.AddTaxonomyItem(Ektron.Cms.TaxonomyContentRequest)">
	<summary>
 Inserts an item into taxonomy.
 </summary>
	<param name="request">TaxonomyContentRequest</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.ReOrderTaxonomyItems(Ektron.Cms.TaxonomyRequest)">
	<summary>
 Reorder the display of the taxonomy items.
 </summary>
	<param name="request">TaxonomyReqeust</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.GetTaxonomyIdByPath(System.String)">
	<summary>
 Returns the taxonomy ID by a given path.
 </summary>
	<param name="path">The path of the taxonomy category. For example, "\\New Hampshire\\Restaurants\\Pizza"</param>
	<returns>Taxonomy ID</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Taxonomy.CloneTaxonomy(System.Int64,System.Int64,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Copy or move a group of taxonomy categories from one taxonomy to another. For example, you want move 
 categories one, two and three from taxonomy A to taxonomy B. Copying or moving a taxonomy 
 category depends on whether the DeleteSource parameter is set True or False. If DeleteSouce is set to 
 True, the taxonomy category is deleted. You can specify how many node levels are included by setting 
 the Depth parameter. You can also choose whether to move/copy items in the category or just clone 
 the category's structure.
 </summary>
	<param name="sourceId">The ID of the source category being moved or copied.</param>
	<param name="destinationId">The target ID where the category will be moved or copied.</param>
	<param name="LanguageId">The category's language ID.</param>
	<param name="Depth">Specify an integer that represents the amount of category sub levels to be copied or moved. 
 For example, if you want to copy two category levels below the source category, enter <b>2</b>.<para></para> 
 To copy or move all sub categories enter <b>-1</b>.</param>
	<param name="WithItems">Enter True to copy or move all items from the source structure. If you enter false, 
 copy/move only the taxonomy category's structure.</param>
	<param name="DeleteSource">Enter True to move the source category. This deletes the source category after the node is cloned.
 Set to false to copy the source category. This leaves the original category in its structure.</param>
	<returns>int</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.TaskCategoryType.GetTaskType(System.Int64)">
	<summary>
 Gets the task type information for a specified ID.
 </summary>
	<param name="taskTypeId">The numeric ID of the task type.</param>
	<returns>Returns TaskTypeData information.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.TaskCategoryType.DeleteTaskType(System.Int64)">
	<summary>
 Deletes the task type by providing its ID.
 </summary>
	<param name="taskTypeId">The task type numeric ID to be deleted.</param>
	<returns>Returns False if the task type is successfully deleted. Otherwise, it returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.TaskCategoryType.UpdateTaskType(System.Int64,System.String,System.String,System.Boolean)">
	<summary>
 Updates task type information by providing its ID. You can update the Title, Description and set
 whether the type is active or not.
 </summary>
	<param name="taskTypeId">The numeric ID of the task type.</param>
	<param name="title">The title of the task type.</param>
	<param name="description">A description for the task type.</param>
	<param name="active">Set to True to make the task type active. Otherwise, set to false.</param>
	<returns>Returns False if the task type is successfully updated. Otherwise, it returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.TaskCategoryType.AddTaskType(System.String,System.String,System.Int64,System.Boolean)">
	<summary>
 Adds a new task type to a category by providing the new task type's title and description, the 
 category's ID and whether to make the type active. Once the new task type has been added, an
 new ID is returned.
 </summary>
	<param name="title">A title for the new task type.</param>
	<param name="description">A description for the new task type.</param>
	<param name="categoryId">The ID of the category with which the new task type will be associated.</param>
	<param name="active">Set to True to make the new task type active. Otherwise, set to false.</param>
	<returns>Returns the task type's numeric ID.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.TaskCategory.GetAllCategories">
	<summary>
 Gets All Task categories and all of the task types that belong to those categories.
 </summary>
	<returns>Returns an array of TaskCategoryData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.TaskCategory.GetTaskCategory(System.Int64)">
	<summary>
 Gets the specified task category and all the task types that belong to it by providing the numeric ID of the category.
 </summary>
	<param name="categoryID">The numeric ID of the category.</param>
	<returns>Returns TaskCategoryData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.TaskCategory.UpdateTaskCategory(System.Int64,System.String)">
	<summary>
 Updates the category title by providing its ID and a new title.
 </summary>
	<param name="categoryId">The numeric ID of the Category.</param>
	<param name="title">The new title of the category.</param>
	<returns>Returns False if successfully updated. Otherwise, it returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.TaskCategory.AddTaskCategory(System.String)">
	<summary>
 Adds a task category by providing a title.
 </summary>
	<param name="title">The new category title.</param>
	<returns>Returns a numeric ID assigned to the new task Category. The data type is Long.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.TaskCategory.DeleteTaskCategory(System.Int64)">
	<summary>
 Deletes the task category by providing its numeric ID.
 </summary>
	<param name="categoryId">The numeric ID of the task category.</param>
	<returns>Returns False if successfully deleted. Otherwise, it returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.AddTask(Ektron.Cms.TaskData@)">
	<summary>
 Adds a task in the system.
 </summary>
	<param name="data">TaskData</param>
	<returns>Returns False if successfully added, otherwise returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.UpdateTask(Ektron.Cms.TaskData@)">
	<summary>
 Updates the task
 </summary>
	<param name="data">Task Data.</param>
	<returns>Returns False if successfully updated, otherwise returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.DeleteTask(System.Int64)">
	<summary>
 Mark the task deleted.
 </summary>
	<param name="taskId">Task ID.</param>
	<returns>Returns False if successfully deleted, otherwise returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.DeleteTask(System.Int64,System.Boolean)">
	<summary>
 Mark the task deleted or delete the task permanently.
 </summary>
	<param name="taskId">Task ID.</param>
	<param name="Permanently">True=Delete the task.</param>
	<returns>Returns False if successfully deleted otherwise returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.DeleteTasks(System.Int64[])">
	<summary>
 Mark tasks deleted.
 </summary>
	<param name="taskId">Array of Task ID.</param>
	<returns>Returns False if successfully deleted, otherwise returns True.</returns>
	<remarks>When an error occurs the method will quit without deleting rest of the tasks.</remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.DeleteTasks(System.Int64[],System.Boolean)">
	<summary>
 Mark tasks deleted or delete tasks permanently.
 </summary>
	<param name="taskId">Array of Task ID.</param>
	<param name="Permanently">True=Delete tasks.</param>
	<returns>Returns False if successfully deleted, otherwise returns True.</returns>
	<remarks>When an error occurs the method will quit without deleting rest of the tasks.</remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.GetTask(System.Int64)">
	<summary>
 Get the task information.
 </summary>
	<param name="taskId">The task's numeric ID.</param>
	<returns>TaskData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.GetTasks">
	<summary>
 Get All tasks from the system.
 </summary>
	<returns>Array of task data.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.GetTasks(System.Int64[])">
	<summary>
 Get All tasks from the system.
 </summary>
	<param name="folderId">Array of FolderIDs</param>
	<returns>Array of task data.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.GetTaskState(System.Int64)">
	<summary>
 Get the task state.
 </summary>
	<param name="taskId">Task ID.</param>
	<returns>If successful returns task state. Otherwise, it will throw an error.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.SetStateForTask(System.Int64,Ektron.Cms.Common.EkEnumeration.TaskState)">
	<summary>
 Set the task state.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="newTaskState">New Task State</param>
	<returns>Returns False if the state is successfully changed. Otherwise, it returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.AssignTaskToUser(System.Int64,System.Int64)">
	<summary>
 Assign a task to a user.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="assignToUserId">User's ID</param>
	<returns>Returns False if the task is successfully assigned to a user. Otherwise, it returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.AssignTaskToUser(System.Int64,System.Int64,System.Int64)">
	<summary>
 Assign a task to a user by a specified user.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="assignToUserId">Assign to User's ID</param>
	<param name="assignByUserId">Assign by User's ID</param>
	<returns>Returns False if the task is successfully assigned to a user. Otherwise, it returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.AssignTaskToUsergroup(System.Int64,System.Int64)">
	<summary>
 Assign a task to a usergroup.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="assignToUsergroup">Assign to Usergroup's ID</param>
	<returns>Returns False if the task is successfully assigned to a usergroup. Otherwise, it returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.AssignTaskToUsergroup(System.Int64,System.Int64,System.Int64)">
	<summary>
 Assign a task to a usergroup by a specified user.
 </summary>
	<param name="taskId">Task ID</param>
	<param name="assignToUsergroup">Numeric ID of the Usergroup to which the task is being assigned.</param>
	<param name="assignByUserId">Numeric ID of the User who's assigning the task.</param>
	<returns>Returns False if the task is successfully assigned to a usergroup. Otherwise, it returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.GetTasksAssignedToUser(System.Int64)">
	<summary>
 Get all tasks assigned to the user and returns them as array of TaskData.
 </summary>
	<param name="userId">The numeric value of the User ID.</param>
	<returns>Returns an array of tasks assigned to the user.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.GetTasksAssignedToUser(System.Int64,Ektron.Cms.Common.EkEnumeration.TaskState)">
	<summary>
 Get all tasks assigned to the user by a specified task state and returns them as array of TaskData.
 </summary>
	<param name="userId">Numeric value of the User's ID.</param>
	<param name="taskState">The state of the task. Choices are:<para></para>
   * NotStarted
   * Active
   * AwaitingData
   * OnHold
   * Pending
   * Reopened
   * Completed
   * Archived
   * Deleted</param>
	<returns>Returns an array of TaskData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.GetTasksAssignedToUsergroup(System.Int64)">
	<summary>
 Get all tasks assigned to the usergroup and returns them as array of TaskData.
 </summary>
	<param name="groupId">The numeric value of the usergroup's ID.</param>
	<returns>Returns an array of tasks.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.GetTasksAssignedToUsergroup(System.Int64,Ektron.Cms.Common.EkEnumeration.TaskState)">
	<summary>
 Get all tasks assigned to the usergroup by a specified task state and returns them as array of TaskData.
 </summary>
	<param name="groupId">Numeric value of the Usergroup's ID.</param>
	<param name="taskState">The state of the task. Choices are:<para></para>
   * NotStarted
   * Active
   * AwaitingData
   * OnHold
   * Pending
   * Reopened
   * Completed
   * Archived
   * Deleted</param>
	<returns>Returns an array of tasks.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.GetTasksAssignedByUser(System.Int64)">
	<summary>
 Get all tasks assigned by the user.
 </summary>
	<param name="userId">Numeric value of the user's ID.</param>
	<returns>Array of tasks.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Task.Task.GetTasksAssignedByUser(System.Int64,Ektron.Cms.Common.EkEnumeration.TaskState)">
	<summary>
 Get all tasks assign by a user with a specified task state and returns them as array of TaskData.
 </summary>
	<param name="userId">Numeric value of the user's ID.</param>
	<param name="taskState">The state of the task. Choices are:<para></para>
   * NotStarted
   * Active
   * AwaitingData
   * OnHold
   * Pending
   * Reopened
   * Completed
   * Archived
   * Deleted</param>
	<returns>Array of tasks.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.AddEmailFrom(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds a subscription email address.
 </summary>
	<param name="data">Email address as a collection.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.AddSubscription(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds a subscription.
 </summary>
	<param name="data">The subscription's name.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.AddSubscriptionMessage(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds subscription message(s).
 </summary>
	<param name="data">Subscription message data.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.DeleteEmailFrom(Microsoft.VisualBasic.Collection)">
	<summary>
 Deletes a subscription email address from system.
 </summary>
	<param name="data">Email data.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.DeleteSubscriptionMessage(Microsoft.VisualBasic.Collection)">
	<summary>
 Deletes the subscription message from the system.
 </summary>
	<param name="data">Subscription message data</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.DeleteSubscription(Microsoft.VisualBasic.Collection)">
	<summary>
 Deletes a subscription from the system.
 </summary>
	<param name="data">Subscription data</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.GetAllActiveSubscriptions">
	<summary>
 Loads all of the active subscriptions.
 </summary>
	<returns>Ektron.Cms.SubscriptionData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.GetAllEmailFrom">
	<summary>
 Returns all of the email as an array of EmailFromData.
 </summary>
	<returns>Ektron.Cms.EmailFromData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.GetAllSubscriptionMessages">
	<summary>
 Loads all the subscription messages.
 </summary>
	<returns>Ektron.Cms.EmailMessageData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.GetAllSubscriptions">
	<summary>
 Loads all the subscriptions.
 </summary>
	<returns>Ektron.Cms.SubscriptionData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.GetFolderInheritedFrom(System.Int64)">
	<summary>
 Retrieves the inherited parent ID.
 </summary>
	<param name="FolderId">The current folder's numeric ID.</param>
	<returns>The numeric ID of parent folder from which the folder is inherited.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.GetSubscription(System.Int64)">
	<summary>
 Retrieves a subscription by using its ID.
 </summary>
	<param name="Id">The subscription's ID.</param>
	<returns>Ektron.Cms.SubscriptionData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.GetSubscriptionMessage(System.Int64)">
	<summary>
 Retrieves a subscription message by using the subscription ID.  
 </summary>
	<param name="Id">The subscription's ID.</param>
	<returns>Ektron.Cms.EmailMessageData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.GetSubscriptionMessagesForType(Ektron.Cms.Common.EkEnumeration.EmailMessageTypes)">
	<summary>
 Retrieve subscription message for type.
 </summary>
	<param name="MessageType">The message type.</param>
	<returns>Ektron.Cms.EmailMessageData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.GetSubscriptionPropertiesForContent(System.Int64)">
	<summary>
 Retrieves the subscription properties for content using the content's ID.
 </summary>
	<param name="ContentId">The content's ID</param>
	<returns>Ektron.Cms.SubscriptionPropertiesData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.GetSubscriptionPropertiesForFolder(System.Int64)">
	<summary>
 Retrieves the subscription properties for a given folder.
 </summary>
	<param name="FolderId">The folder's ID.</param>
	<returns>Ektron.Cms.SubscriptionPropertiesData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.GetSubscriptionsForContent(System.Int64)">
	<summary>
 Loads the subscriptions for the given content. 
 </summary>
	<param name="ContentId">The content's ID.</param>
	<returns>Ektron.Cms.SubscriptionData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.GetSubscriptionsForFolder(System.Int64)">
	<summary>
 Loads the subscriptions for a given folder.
 </summary>
	<param name="FolderId">The folder's ID.</param>
	<returns>Ektron.Cms.SubscriptionData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.UpdateEmailFrom(Microsoft.VisualBasic.Collection)">
	<summary>
 Update the email address.
 </summary>
	<param name="data">email data</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.UpdateSubscription(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the subscription.
 </summary>
	<param name="data">The subscription details.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.UpdateSubscriptionMessage(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the subscription message.
 </summary>
	<param name="data">The subscription message details.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.UpdateSubscriptionPropertiesForContent(System.Int64,Ektron.Cms.SubscriptionPropertiesData)">
	<summary>
 Sets the subscription properties for a single piece of content.
 </summary>
	<param name="contentId">The ID of the content to set the subscription properties on.</param>
	<param name="subscriptionProperties">The subscription properties class.</param>
	<returns>Boolean.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.UpdateSubscriptionPropertiesForFolder(System.Int64,Ektron.Cms.SubscriptionPropertiesData)">
	<summary>
 Sets the subscription properties for a single folder.
 </summary>
	<param name="folderId">The ID of the folder to set the subscription properties on.</param>
	<param name="subscriptionProperties">The subscription properties class.</param>
	<returns>Boolean.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Subscription.SendWebAlert(System.Int64)">
	<summary>
 Triggers the web alert subsystem.
 Requires that the subscription properties be set for the content first.
 </summary>
	<param name="contentId">The ID of the content to set the subscription properties on.</param>
	<returns>Boolean.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.SiteMap.GetWebsiteMap(System.Int64,System.Boolean)">
	<summary>
 Creates the site map from folder breadcrumb.
 </summary>
	<param name="folderId">Build the web sitemap from the folder specified.</param>
	<param name="getSameLevelNodes">Do you want to retrieve all nodes at the same level as the one you specify?<para></para>
		<b>True</b> = include all sites at the same level as the <c>folderId</c> property.<para></para>
		<b>False</b> = Do not include the same level nodes.
 </param>
	<returns></returns>
	<example>
 The following example shows how to create a Web page that displays the site map for a given folder.
 This example uses some standard drag and drop controls and a small section of VB code utilizing the GetWebsiteMap method.
 This method uses the InternalAdmin to access and return the site map information. In the first section, we will deal with the standard drag and drop controls.
 In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, add the following label:
        <c>&lt;asp:Label ID="Label6" runat="server" Text="Folder ID:" Width="66px"&gt;&lt;/asp:Label&gt;</c>
   2. Add text box where the folder ID can be entered.
        <c>&lt;asp:TextBox ID="txtFolderId" runat="server" Width="55px"&gt;&lt;/asp:TextBox&gt;</c> 
   3. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the Folder ID box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvId" runat="server" ControlToValidate="txtFolderId"</c>
			<c>ErrorMessage="Please enter folder ID" Width="179px"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add two breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add a button to submit the folder ID and retrieve the site map information. We will set the button click event in the code behind.
        <c>&lt;asp:Button ID="btnGet" runat="server" Text="Get site map" Width="91px" /&gt;</c>
   6. Add two more breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   7. Add a label to display the site map.
        <c>&lt;asp:Label ID="lblResult" runat="server" Width="502px" Height="100px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
 <code>
        Protected Sub btnGet_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGet.Click
 </code>
   2. Check to make sure the folder ID is numeric.
 <code>
             If Not IsNumeric(txtFolderId.Text) Then
                 lblResult.Text = "Invalid Folder ID"
                 Exit Sub
             End If
 </code>
   3. Create an object for the site map API.
 <code>
             Dim sitemapApi As New Ektron.Cms.API.SiteMap 
 </code>
   4. Create an object for the map data.
 <code>
             Dim mapData As Ektron.Cms.Common.WebsiteMap
 </code>
   5. Create a Try/Catch around the GetWebsiteMap method. This allows you to catch any exceptions and helps when debugging.
 <code>
             Try
                 mapData = sitemapApi.GetWebsiteMap(CInt(txtFolderId.Text), False)
 </code>
   6. Check to make sure child nodes are returned. If child nodes are returned, display the information.
 <code>
                If (Not mapData.childrenNodes Is Nothing) Then
                    lblResult.Text = sitemapApi.RenderWebsiteMap(mapData, "")
 </code>
   7. If no child nodes are returned, display a message.
 <code>
                Else
                    lblResult.Text = "No breadcrumb path found"
                End If
 </code>
   8. Display a message if there is an error.
 <code>
               Catch ex As Exception
                  lblResult.Text = ex.Message
               End Try
        End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.SiteMap.GetFolderBreadcrumbPath(System.Int64,System.Boolean)">
	<summary>
 Get breadcrumb path of the folder in which content block exists.
 </summary>
	<param name="id">Content or Folder ID.</param>
	<param name="isFolder">Set to True if the ID is a folder ID.</param>
	<returns>Array of nodes in the path.</returns>
	<example>
 The following example shows how to create a Web page from which the breadcrumb path for a given folder can be retrieved. In this
 This example uses some standard drag and drop controls and a small section of VB code utilizing the GetFolderBreadcrumbPath method.
 The GetFolderBreadcrumbPath method allows you to use a folder ID or a content's ID to retrieve the information. 
 This method uses the InternalAdmin to retrieve the breadcrumb path. In the first section, we will deal with the standard drag and drop controls.
 In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, add a radio button list. We will populate the radio buttons in the code behind.
        <c>&lt;asp:RadioButtonList ID="rblItem" runat="server" Height="64px"&gt;&lt;/asp:RadioButtonList&gt;</c>
   2. Add two breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   3. Add a label to show where the ID goes.
        <c>&lt;asp:Label ID="Label6" runat="server" Text="ID:" Width="76px"&gt;&lt;/asp:Label&gt;</c>
   4. Add a text box for the ID.
        <c>&lt;asp:TextBox ID="txtId" runat="server" Width="55px"&gt;&lt;/asp:TextBox&gt;</c>
   5. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the ID box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvId" runat="server" ControlToValidate="txtId"</c>
			<c>ErrorMessage="Please enter a content/folder ID" Width="179px"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   6. Add two more breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   7. Add a button to submit the ID to be queried. We will set the button click event in the code behind.
        <c>&lt;asp:Button ID="btnGet" runat="server" Text="Get Breadcrumb" Width="105px" /&gt;</c>
   8. Add two last breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   9. Add a label to display the breadcrumb path.
        <c>&lt;asp:Label ID="lblResult" runat="server" Width="502px" Height="100px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. In the page load event, populate the radio buttons.
 <code>
        Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load  
          If Not IsPostBack() Then 
              rblItem.Items.Add(New ListItem("Folder", "true"))
              rblItem.Items.Add(New ListItem("Content", "false"))
              rblItem.Items(0).Selected = True
          End If
        End Sub
 </code>
   2. Add a button click event.
 <code>
        Protected Sub btnGet_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGet.Click
 </code>
   3. Check to make sure the ID is numeric.
 <code>
            If Not IsNumeric(txtId.Text) Then
                lblResult.Text = "Invalid content/folder ID"
                Exit Sub
            End If
 </code>
   4. Create an object for the Site Map API.
 <code>
            Dim sitemapApi As New Ektron.Cms.API.SiteMap
 </code>
   5. Create an object for the site map data.
 <code>
            Dim mapData As Ektron.Cms.Common.SitemapPath()
 </code>
   6. Create a Try/Catch around the GetFolderBreadcrumbPath method. This allows you to catch any exceptions and helps when debugging.
 <code>
            Try
                mapData = sitemapApi.GetFolderBreadcrumbPath(CInt(txtId.Text), CBool(rblItem.SelectedValue))
 </code>
   7. Check to make sure map data is returned. If map data is returned, display the information.
 <code>
                If (Not mapData Is Nothing) AndAlso (mapData.Length &gt; 0) Then
                    lblResult.Text = sitemapApi.RenderFolderBreadcrumbHtml(mapData, "&gt;", True, "", False, "")
 </code>        
   8. If no map data exists, display a message.       
 <code>
                Else
                    lblResult.Text = "No breadcrumb path found"
                End If
 </code>
   9. Display a message if there is an error.
 <code>
               Catch ex As Exception
                  lblResult.Text = ex.Message
               End Try
        End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.SiteMap.RenderWebsiteMap(Ektron.Cms.Common.WebsiteMap,System.String,System.String,System.Int32,System.Int32,System.String)">
	<summary>
 Create HTML to render on the page.
 </summary>
	<param name="webSitemap">GetWebSiteMap()</param>
	<param name="displayType">Determines how to produce HTML.</param>
	<param name="className">Stylesheet class to format the HTML. It must exists in [site]/workarea/csslib/sitemap.css. Leave blank to accept default.</param>
	<param name="maxLevel">Set the max level of the sitemap. Set it to 0 for unlimited.</param>
	<param name="startLevel">Set the starting level of the sitemap. Set it to 0 for start from root.</param>
	<returns>HTML/XML</returns>
	<remarks>Supported displayType: ListWithDescription | List | RawXml </remarks>
</member><member name="M:Ektron.Cms.API.SiteMap.RenderFolderBreadcrumbHtml(Ektron.Cms.Common.SitemapPath[],System.String,System.Boolean,System.String,System.Boolean,System.String)">
	<summary>
 Render folder breadcrumb HTML.
 </summary>
	<param name="nodes">The items contained in the breadcrumb path. Ektron.Cms.Common.SitemapPath</param>
	<param name="pathSeparator">a special character that separates the items in a breadcrumb trail.</param>
	<param name="linkNodes">Should the items in the breadcrumb path be Hyperlinked?<para></para>
		<b>True</b> = hyperlink breadcrumb items.<para></para>
		<b>False</b> = breadcrumb items appear as plain text.</param>
	<param name="linkTarget">
 Determines the type of window that appears on this Web form when a user clicks an item in the breadcrumb trail. The default is _self.
   * <b>_Self</b> - opens link in the same window.
   * <b>_Top</b> - opens link in a parent window.
   * <b>_Blank</b> - opens link in a new window.
   * <b>_Parent</b> - opens link in the parent frame. 
 </param>
	<param name="displayVertical">Do you want the breadcrumb path to display vertically?<para></para>
		<b>True</b> = display the breadcrumb trail vertically.<para></para>
		<b>False</b> = display the breadcrumb trail horizontally.</param>
	<param name="pageUrl">The current page URL. Usually Request.Url.</param>
	<returns>HTML</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.BreakTaskPermissionInherit(System.Int64)">
	<summary>
 Removes the task permissions for a given user.
 </summary>
	<param name="Id">User ID</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.GetAllActiveLanguages">
	<summary>
 Gets all languages that have been activated in the CMS400 Workarea, Settings, Configuration, Language or Settings area.
 </summary>
	<returns>Array of Ektron.Cms.LanguageData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.GetAllLanguages(Ektron.Cms.LanguageDataSet.SortBy,Ektron.Cms.LanguageDataSet.SortDirection)">
	<summary>
 Gets a list of all the available languages.
 </summary>
	<param name="orderBy">Determines the sort order.</param>
	<param name="direction">Determines the sort direction.</param>
	<returns>Array of  Ektron.Cms.LanguageData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.GetAllLanguages">
	<summary>
 Gets a list of all the available languages sorted by language name in ascending order.
 </summary>
	<returns>Array of  Ektron.Cms.LanguageData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.GetClientDayNames">
	<summary>
 Returns the day name of a given content language (or site language).
 </summary>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.GetClientMonthNames">
	<summary>
 Returns the month name of a given content language (or site language)
 </summary>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.GetLanguage(System.Int64)">
	<summary>
 Returns the details about the given language ID.
 </summary>
	<param name="Id">Valid non negative language ID (refer to the language_type table for all the languages)</param>
	<returns>Ektron.Cms.LanguageData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.GetLanguages(Ektron.Cms.LanguageDataSet.LanguageState,Ektron.Cms.LanguageDataSet.SortBy,Ektron.Cms.LanguageDataSet.SortDirection)">
	<summary>
 Gets a list of all languages that meet a given state, for example, active.
 </summary>
	<param name="State">The state that the language must meet. For example, defined, active, site enabled.</param>
	<param name="SortBy">The field on which to sort the languages in the data table.</param>
	<param name="SortDirection">The direction, ascending or descending, in which to sort the field values.</param>
	<returns>LanguageDataTable of languages that meet the given state.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.GetSiteVariables(System.Int64)">
	<summary>
 Returns all of the settings data.
 </summary>
	<param name="Id">User ID</param>
	<returns>Ektron.Cms.SettingsData</returns>
	<remarks>If user ID is passed it returns the additional value of MaxUsersAllowed, AdInstalled and AdAllowed properties.</remarks>
</member><member name="M:Ektron.Cms.API.Site.GetTaskPermission(System.Int64,System.Int32)">
	<summary>
 Returns 1 if the user has one of the task permissions, otherwise 0.
 </summary>
	<param name="Id">User or group ID</param>
	<param name="Type">User or group (1 = user, 2 = group).</param>
	<returns>Returns 1 if the user has one of the task permissions. Otherwise, it returns 0.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.IsTaskPermissionInherited(System.Int64)">
	<summary>
 Returns true if a user has already granted one of the task permissions.
 </summary>
	<param name="Id">User ID</param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.SetTaskPermission(System.Int64,System.Int32,System.Int32)">
	<summary>
 Updates the task permission(s) for the given user or group.
 </summary>
	<param name="Id">User ID or Group ID</param>
	<param name="UserType">User (1) or Group (2)</param>
	<param name="PermissionType">Ektron.Cms.Common.TaskPermission (1 = Create Task, 2 = Redirect Task, 3 = Delete Task, 4 = Edit Alias)</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.UpdateSiteEnabledLanguages(System.String)">
	<summary>
 Updates the languages in the given list to be enabled on the site. Languages not in the list are disabled.
 </summary>
	<param name="LanguageIDs">Comma-separated list of language IDs. For example, "1033,1031"</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.UpdateSiteVariables(System.Collections.Hashtable)">
	<summary>
 Update the site settings
 </summary>
	<param name="item">Set of settings data as key, value pair.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.DeleteCookie">
	<summary>
 Removes the cookie from the site.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.GetCookieValue(System.String)">
	<summary>
 Reads the cookie value.
 </summary>
	<param name="Keyname">The Keyname. (Required)</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Site.SetCookieValue(System.String,System.String)">
	<summary>
 Resets the cookie value.
 </summary>
	<param name="Keyname">The Keyname. (Required)</param>
	<param name="CookieValue">Value</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.Execute(Ektron.Cms.UserSearchCondition)">
	<summary>
 Returns the array of UserData based on the criteria UserSearchCondition.
 </summary>
	<param name="condition">UserSearchCondition</param>
	<returns>Array of UserData</returns>
	<example>
		<code>
 Dim isMemberShip As UserSearchCondition = New UserSearchCondition
 isMemberShip.setType = SearchType.EQUAL
 isMemberShip.setValue = 1 'The value can be integer,string,date and boolean should be match with db type
 isMemberShip.setVariable = users.membership_user
 
 Dim isInEktron As UserSearchCondition = New UserSearchCondition
 isInEktron.setType = SearchType.EQUAL
 isInEktron.setValue = "03031"  'The value can be integer,string,date and boolean should be match with dynamic_data_tbl labels type
 isInEktron.setVariable = "customproperties.zip code"
 
 Dim condition As UserSearchCondition = New UserSearchCondition
 condition.setType = SearchType.AND
 condition.AddCondition(isInEktron)
 condition.AddCondition(isMemberShip)
 
 Dim search As New SearchManager
 Dim result As userdata() = search.Execute(condition)
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.Execute(Ektron.Cms.ContentSearchCondition)">
	<summary>
 Returns the array of ContentData based on the criteria ContentSearchCondition.
 </summary>
	<param name="condition">ContentSearchCondition</param>
	<returns>Array of ContentData</returns>
	<example>
		<code>
 Dim isContentLanguage As ContentSearchCondition = New ContentSearchCondition
 isContentLanguage.setType = SearchType.EQUAL
 isContentLanguage.setValue = 1033 'The value can be integer,string,date and boolean should be match with db type
 isContentLanguage.setVariable = content.content_language
 
 Dim isInEktron As ContentSearchCondition = New ContentSearchCondition
 isInEktron.setType = SearchType.EQUAL
 isInEktron.setValue = "03031"  'The value can be integer,string,date and boolean should be match with dynamic_data_tbl labels type
 isInEktron.setVariable = "customproperties.zip code"
 
 Dim condition As ContentSearchCondition = New ContentSearchCondition
 condition.setType = SearchType.AND
 condition.AddCondition(isInEktron)
 condition.AddCondition(isMemberShip)
 
 Dim search As New SearchManager
 Dim result As userdata() = search.Execute(condition)
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.Search(System.String,System.Web.HttpContext,System.Int32@)">
	<summary>
 Search the site for occurrence(s) of search text.<para></para>
 This function has an additional overload.
 </summary>
	<param name="searchText">The text for which you are searching.</param>
	<param name="context">The current Http request.</param>
	<param name="resultCount">Number of records returned.</param>
	<returns>Array of SearchResponseData - content satisfying search criteria</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.Search(System.String,System.Web.HttpContext,System.Int32@,System.Data.DataTable@,System.Data.DataTable@)">
	<summary>
 Search the site for occurrence(s) of search text.<para></para>
 This function has an additional overload.
 </summary>
	<param name="searchText">The text for which you are searching.</param>
	<param name="context">The current Http request.</param>
	<param name="resultCount">Number of records returned.</param>
	<param name="suggestedResultTable">Datatable passed by reference in which suggested results are returned.</param>
	<param name="privateResultTable">Datatable passed by reference in which private results are returned.</param>
	<returns>Array of SearchResponseData - content satisfying search criteria</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.Search(Ektron.Cms.WebSearch.SearchData.MapRequestData,System.Web.HttpContext,System.Int32,System.Int32,System.Int32@)">
	<summary>
 Map search for retrieving geographical content from CMS400.Net site.<para></para>
 This function has two additional overloads.
 </summary>
	<param name="mapReqData">Search criteria bundled in a MapRequestData object.</param>
	<param name="context">The current Http request.</param>
	<param name="index">Page number.</param>
	<param name="count">Page size.</param>
	<param name="resultCount">Number of records returned.</param>
	<returns>Array of MapResponseData - content satisfying location criteria</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.Search(Ektron.Cms.WebSearch.SearchData.MapRequestData,System.Web.HttpContext,System.Int32,System.Int32,System.Int32@,System.Data.DataTable@,System.Data.DataTable@)">
	<summary>
 Map search for retrieving geographical content from CMS400.Net site.<para></para>
 This function has two additional overloads.
 </summary>
	<param name="mapReqData">Search criteria bundled in a MapRequestData object.</param>
	<param name="context">The current Http request.</param>
	<param name="index">Page number.</param>
	<param name="count">Page size.</param>
	<param name="resultCount">Number of records returned.</param>
	<returns>Array of MapResponseData - content satisfying location criteria</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.Search(Ektron.Cms.WebSearch.SearchData.SearchRequestData,System.Web.HttpContext,System.Int32@)">
	<summary>
 Search HTML, content, images, multimedia and documents based on content or metadata.<para></para>
 This function has two additional overloads.
 </summary>
	<param name="searchReqData">Search criteria bundled in a SearchRequestData object.</param>
	<param name="context">The current Http request.</param>
	<param name="resultCount">Number of records returned.</param>
	<returns>Array of SearchResponseData - content satisfying search criteria</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.Search(Ektron.Cms.WebSearch.SearchData.SearchRequestData,System.Web.HttpContext,System.Int32@,System.Data.DataTable@)">
	<summary>
 Search HTML, content, images, multimedia and documents based on content or metadata.<para></para>
 This function has two additional overloads.
 </summary>
	<param name="searchReqData">Search criteria bundled in a SearchRequestData object.</param>
	<param name="context">The current Http request.</param>
	<param name="resultCount">Number of records returned.</param>
	<param name="suggestedResultTable">Datatable passed by reference in which suggested results are returned.</param>
	<returns>Array of SearchResponseData - content satisfying search criteria</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.Search(Ektron.Cms.WebSearch.SearchData.SearchRequestData,System.Web.HttpContext,System.Int32@,System.Data.DataTable@,System.Data.DataTable@)">
	<summary>
 Search HTML, content, images, multimedia and documents based on content or metadata.<para></para>
 This function has two additional overloads.
 </summary>
	<param name="searchReqData">Search criteria bundled in a SearchRequestData object.</param>
	<param name="context">The current Http request.</param>
	<param name="resultCount">Number of records returned.</param>
	<param name="suggestedResultTable">Datatable passed by reference in which suggested results are returned.</param>
	<param name="privateResultTable">Datatable passed by reference in which private results are returned.</param>
	<returns>Array of SearchResponseData - content satisfying search criteria</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.SearchForCategories(Ektron.Cms.WebSearch.SearchData.SearchRequestData,System.Web.HttpContext,System.Int32,System.Int32,System.Int32@)">
	<summary>
 Search based on taxonomy category.<para></para>
	</summary>
	<param name="searchReqData">Search criteria bundled in a SearchRequestData object.</param>
	<param name="context">The current Http request.</param>
	<param name="index">Page number.</param>
	<param name="count">Page size.</param>
	<param name="resultCount">Number of records returned.</param>
	<returns>Array of String - List of categories</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.SearchForCategories(Ektron.Cms.WebSearch.SearchData.SearchRequestData,System.Web.HttpContext,System.Int32,System.Int32,System.Int32@,System.Data.DataTable@,System.Data.DataTable@)">
	<summary>
 Search based on taxonomy category.<para></para>
	</summary>
	<param name="searchReqData">Search criteria bundled in a SearchRequestData object.</param>
	<param name="context">The current Http request.</param>
	<param name="index">Page number.</param>
	<param name="count">Page size.</param>
	<param name="resultCount">Number of records returned.</param>
	<param name="suggestedResultTable">Datatable passed by reference in which suggested results are returned.</param>
	<param name="privateResultTable">Datatable passed by reference in which private results are returned.</param>
	<returns>Array of String - List of categories</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.SearchTable(Ektron.Cms.WebSearch.SearchData.SearchRequestData,System.String,System.Web.HttpContext,System.Int32@)">
	<summary>
 This API is used internally by the Ektron Windows Service to update catalogs when a taxonomy category is updated<para></para>
 This ensures that subsequent searches function correctly.
 </summary>
	<param name="searchReqData">Search criteria bundled in a SearchRequestData object.</param>
	<param name="searchParams">Database columns to be included in search.</param>
	<param name="context">The current Http request.</param>
	<param name="resultCount">Number of records returned.</param>
	<returns>DataSet with a single DataTable which contains content whose taxonomy was updated.</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.SearchTable(Ektron.Cms.WebSearch.SearchData.SearchRequestData,System.String,System.Web.HttpContext,System.Int32@,System.Data.DataTable@,System.Data.DataTable@)">
	<summary>
 This API is used internally by the Ektron Windows Service to update catalogs when a taxonomy category is updated<para></para>
 This ensures that subsequent searches function correctly.
 </summary>
	<param name="searchReqData">Search criteria bundled in a SearchRequestData object.</param>
	<param name="searchParams">Database columns to be included in search.</param>
	<param name="context">The current Http request.</param>
	<param name="resultCount">Number of records returned.</param>
	<param name="suggestedResultTable">Datatable passed by reference in which suggested results are returned.</param>
	<param name="privateResultTable">Datatable passed by reference in which private results are returned.</param>
	<returns>DataSet with a single DataTable which contains content whose taxonomy was updated.</returns>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.API.Search.SearchManager.Search(Ektron.Cms.WebSearch.SearchData.IndexSearchRequestData,System.Web.HttpContext,System.Int32@)">
	<summary>
 Search smart form content based on indexed fields.<para></para>
 The IndexSearchFieldList property (an array of IndexSearchFieldData) of the IndexSearchRequestData object is used to specify the XPATH and their values.
 </summary>
	<param name="indexSearchReqData">Search criteria bundled in a IndexSearchRequestData object.</param>
	<param name="context">The current Http request.</param>
	<param name="resultCount">Number of records returned.</param>
	<returns>Array of SearchResponseData - content satisfying search criteria</returns>
	<remarks>
	</remarks>
</member><member name="T:Ektron.Cms.API.Search.SearchManager">
	<summary>
 The Search Developer API enables searching a CMS400.NET website programmatically based on custom criteria.
 The Demo Developers Site, if you chose to install it, has excellent examples of programmatically using the 
 SearchManager. It is installed at http://~YourSite~/CMS400Developer/Developer/Websearch/WebsearchApi.aspx. 
 Examples are in VB and C#.<para></para>
 Here is a list of some of the examples.
   * Retrieve a document or HTML content that contains the word <i>cms</i>.
   * Retrieve content that contains <i>research</i> and has a searchable metadata <i>wellness</i> set to Cancer.
   * Retrieve images that contain <i>RotatingGraphic1</i> in their title.
   * Retrieve geo-content from CMS400.Net.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Metadata.AddMetaDataType(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds a new metadata type to the system.
 </summary>
	<param name="pagedata">Metadata items as value key pair.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Metadata.AddMetaDataType(Ektron.Cms.ContentMetaData@)">
	<summary>
 Adds a new metadata type to the system.
 </summary>
	<param name="metaDataItem">ContentMetadata object containing metadata definition details.</param>
	<example>
 The following example shows how to create a Web page from which you can add a new metadata definition.
 This example uses some standard drag and drop controls and a small section of VB code utilizing the 
 AddMetaDataType(ByRef metaDataItem As ContentMetaData) method. This method uses the InternalAdmin to 
 add the metadata definition. In the first section, we will deal with the standard drag and drop controls.
 In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Create a table with four rows and three columns.
   2. In the first row, first column, add a label that shows where to enter the name of the metadata definition.
        <c>&lt;asp:Label ID="Label1" runat="server" Text="Name: "&gt;&lt;/asp:Label&gt;</c>
   3. In the first row, second column, add a text box for the user to enter the metadata definition name.
        <c>&lt;asp:TextBox ID="txtMetaName" runat="server" Width="86px"&gt;&lt;/asp:TextBox&gt;</c>
   4. In the first row, third column, add a RequiredFieldValidator control from the Validation control menu. This validates that something appears in the name box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvMetaName" runat="server" ControlToValidate="txtMetaName"</c>
			<c>ErrorMessage="Please enter metadata definition name" Width="237px"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   5. In the second row, first column, add a label that show where to select the type.
        <c>&lt;asp:Label ID="Label4" runat="server" Text="Type:" Width="80px"&gt;&lt;/asp:Label&gt;</c>
   6. In the second row, second column, add a drop down list for the metadata tag type. We will populate the drop down list in the code behind.
        <c>&lt;asp:DropDownList ID="ddlMetaTagType" runat="server" Width="194px"&gt;&lt;/asp:DropDownList&gt;</c>
   7. Leave the second row, third column empty.
   8. In the thrid row, first column, add a label for the Editable option.
        <c>&lt;asp:Label ID="Label7" runat="server" Text="Editable: " Width="76px"&gt;&lt;/asp:Label&gt;</c>
   9. In the third row, second column, add a check box to decide whether a user can edit the contents of the metadata when creating or editing the metadata’s content.
        <c>&lt;asp:CheckBox ID="chkEditable" runat="server" Checked="True" /&gt;</c>
  10. Leave the third row, third column empty. 
  11. In the fourth row, first column, add a label for the Display in Ektron Explorer option.
        <c>&lt;asp:Label ID="Label2" runat="server" Text="Display in Ektron Explorer" Width="119px"&gt;&lt;/asp:Label&gt;</c>
  12. In the fourth row, second column, add a check box to decide whether the metadata definition should be displayed in Ektron Explorer.
        <c>&lt;asp:CheckBox ID="chkDisplayEE" runat="server" /&gt;</c>
  13. Leave the fourth row, third column empty.
  14. After the table, add a break and then add a button to add the Metadata Definition.
        <c>&lt;br /&gt;</c>
			<c>&lt;asp:Button ID="btnAdd" runat="server" Text="Add Metatype" Width="98px" /&gt;</c>
  15. Add two breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
  16. Add a results label to display whether the Metadata Definition was added and if so, its ID.
        <c>&lt;asp:Label ID="lblResult" runat="server" Width="549px" Height="25px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a page load event.
 <code>
        Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
 </code>
   2. In the page load event, populate the drop down list with the available metadata definition types. These are the only types available. 
      Make sure you add the numeric value. This corresponds to metadata definition type in the database.
 <code>
          If (Not IsPostBack()) Then
              ddlMetaTagType.Items.Add(New ListItem("Searchable Property", "100"))
              ddlMetaTagType.Items.Add(New ListItem("Meta Tag", "1"))
              ddlMetaTagType.Items.Add(New ListItem("HTML Tag", "0"))
              ddlMetaTagType.Items.Add(New ListItem("Collection Selector", "2"))
              ddlMetaTagType.Items.Add(New ListItem("Content Selector", "4"))
              ddlMetaTagType.Items.Add(New ListItem("File Selector", "7"))
              ddlMetaTagType.Items.Add(New ListItem("Hyperlink Selector", "6"))
              ddlMetaTagType.Items.Add(New ListItem("Image Selector", "5"))
              ddlMetaTagType.Items.Add(New ListItem("ListSummary Selector", "3"))
          End If
        End Sub
 </code>
   3. Add a button click event.
 <code>
        Protected Sub btnAdd_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnAdd.Click
 </code>
   4. Create the following objects.
 <code>
              Dim metaDataApi As New Ektron.Cms.API.Metadata
              Dim metaItem As New Ektron.Cms.ContentMetaData
 </code>
   5. Assign the following metaItem properties.
 <code>
              metaItem.TypeName = txtMetaName.Text
              metaItem.Editable = chkEditable.Checked
              metaItem.MetaDisplayEE = chkDisplayEE.Checked
              metaItem.TagType = ddlMetaTagType.SelectedItem.Value
 </code>
   6. Create a Try/Catch around the AddMetaDataType method. This allows you to catch any exceptions and helps when debugging.
 <code>
              Try
                  metaDataApi.AddMetaDataType(metaItem)
 </code>
   7. Check to make sure a valid TypeID was returned. If so, display the a message and the ID of the newly created metadata definition.
 <code>
                  If metaItem.TypeId &lt;&gt; 0 Then
                      lblResult.Text = "The above metadata type definition was created in CMS400.NET with ID = " &amp; metaItem.TypeId
                  End If
 </code>
   8. If there is an error, let the user know what happened.
 <code>
              Catch ex As Exception
                 lblResult.Text = ex.Message
              End Try
        End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Metadata.DeleteMetadataType(System.Int64)">
	<summary>
 Deletes a metadata type from the system.
 </summary>
	<param name="Id">Metatype ID</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Metadata.GetMetadataByFolder(System.Int64)">
	<summary>
 Returns a collection of ContentMetadata assigned to a folder.
 </summary>
	<param name="folderId">folder to retrieve metadata for</param>
	<returns>array of Ektron.Cms.ContentMetadata objects</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Metadata.GetContentMetadataList(System.Int64)">
	<summary>
 Loads all of the metadata for the given content.
 </summary>
	<param name="ContentId">The contents ID.</param>
	<returns>Ektron.Cms.CustomAttributeList</returns>
	<example>
 The following example shows how to create a Web page from which all metadata for a specific content ID can be retrieved.
 This example uses some standard drag and drop controls and a small section of VB code utilizing the GetContentMetadataList(ByVal ContentId as Long) method.
 This method uses the InternalAdmin to retrieve the metadata for the content ID. In the first section, we will deal with the standard drag and drop controls.
 In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, add the following label.
        <c>&lt;asp:Label ID="Label1" runat="server" Text="Content ID: "&gt;&lt;/asp:Label&gt;</c>
   2. Add a text box to enter the content's ID.
        <c>&lt;asp:TextBox ID="txtContentId" runat="server" Width="63px"&gt;&lt;/asp:TextBox&gt;</c>
   3. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the Content ID box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvContentId" runat="server" ControlToValidate="txtContentId"
                 ErrorMessage="Please enter content ID"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add two breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add a button to get the metadata. We will set the button click event in the code behind.
        <c>&lt;asp:Button ID="btnGetMetaData" runat="server" Text="Get MetaData" Width="91px" /&gt;</c>
   6. Add two more breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   7. Add a label to display to display the metadata information.
        <c>&lt;asp:Label ID="lblResult" runat="server" Width="604px" Height="113px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
 <code>
        Protected Sub btnGetMetaData_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGetMetaData.Click
 </code>
   2. Create the following objects for the Metadata API, Custom Attribute List and each Custom Attribute item.
 <code>
            Dim metaDataApi As New Ektron.Cms.API.Metadata
            Dim metaDataList As New Ektron.Cms.CustomAttributeList
            Dim metaItem As New Ektron.Cms.CustomAttribute
 </code>
   3. Check to make sure the content ID is numeric.
 <code>
            If Not IsNumeric(txtContentId.Text) Then
                lblResult.Text = "Invalid Content ID"
                Exit Sub
            End If
 </code>
   4. Create a Try/Catch around the GetContentMetadataList method. This allows you to catch any exceptions and helps when debugging.
 <code>
            Try                
                metaDataList = metaDataApi.GetContentMetadataList(CInt(txtContentId.Text))
 </code>
   5. Verify that items are returned and create a table to display the returned information.
 <code>
                If metaDataList.AttributeList.Length &gt; 0 Then
                    lblResult.Text = "&lt;table&gt; &lt;th&gt;Metaname&lt;/th&gt; &lt;th align=""left""&gt;Value&lt;/th&gt; "
 </code>
   6. Populate the table with metadata information and display it.
 <code>
                    For Each metaItem In metaDataList.AttributeList
                        If metaItem.Value.ToString().Length &gt; 0 Then
                            lblResult.Text &amp;= "&lt;tr&gt;"
                            lblResult.Text &amp;= "&lt;td&gt;" &amp; metaItem.Name &amp; "&lt;/td&gt;"
                            lblResult.Text &amp;= "&lt;td&gt;" &amp; metaItem.Value &amp; "&lt;/td&gt;"
                            lblResult.Text &amp;= "&lt;/tr&gt;"
                        End If
                    Next
                    lblResult.Text &amp;= "&lt;/table&gt;"
 </code>
   8. If no metadata exists, display that information.
 <code>
                Else
                    lblResult.Text = "No metadata definitions found"
                    Exit Sub
                End If
 </code>
   9. Display a message if there is an error.
 <code>
            Catch ex As Exception
                lblResult.Text = ex.Message
            End Try
       End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Metadata.GetContentMetadataList(System.Int64,System.Boolean)">
	<summary>
 Loads all of the metadata for the given content.
 </summary>
	<param name="ContentId">The contents ID.</param>
	<param name="preview">True implies get metadata from staging content, else use published content.</param>
	<returns>Ektron.Cms.CustomAttributeList</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Metadata.GetMetaDataTypes(System.String)">
	<summary>
 Loads all the metadata types.
 </summary>
	<param name="OrderBy">Order by clause</param>
	<returns>Ektron.Cms.ContentMetaData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Metadata.GetMetadataType(System.Int64)">
	<summary>
 Loads all content metadata.
 </summary>
	<param name="Id">The metadata type ID</param>
	<returns>Ektron.Cms.ContentMetaData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Metadata.UpdateMetadataType(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the metadata type.
 </summary>
	<param name="pagedata">Metadata types</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Metadata.GetIntegratedSearchFolders">
	<summary>
 Loads all the custom folders.
 </summary>
	<returns>Ektron.Cms.IntegratedSearchData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Metadata.GetIntegratedSearchFolder(System.Int64)">
	<summary>
 Loads all custom folder data.
 </summary>
	<param name="Id">The integrated search folder ID</param>
	<returns>Ektron.Cms.IntegratedSearchData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetAddViewLanguage(System.Int64)">
	<summary>
 Returns an array of all the active content languages where the LanguageData.Type indicates 
 whether the language exists (Type="VIEW") for the specified content ID or whether it does not exist
 in that language (Type="ADD").
 </summary>
	<param name="Id">Content ID</param>
	<returns>Ektron.Cms.LanguageData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetAddViewLanguageForAllContent">
	<summary>
 Returns an array of all the active content languages where the LanguageData.Type indicates 
 whether the language exists (Type="VIEW") in at least one content block or whether no content
 exists in that language (Type="ADD").
 </summary>
	<returns>LanguageData()</returns>
	<remarks>Only Id, Name, BrowserCode and Type are populated.</remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetAddViewLanguageForMenus">
	<summary>
 Returns an array of all the active content languages where the LanguageData.Type indicates 
 whether the language exists (Type="VIEW") in at least one menu or whether no menus exist
 in that language (Type="ADD").
 </summary>
	<returns>LanguageData()</returns>
	<remarks>Only Id, Name, BrowserCode and Type are populated.</remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetContentItems(System.Int64)">
	<summary>
 Returns a list of content items (i.e., XLIFF skeletons) associated with a given job.
 </summary>
	<param name="JobID">Specifies the job.</param>
	<returns>A LocalizationJobDataSet.LocalizationSkeletonDataTable of content (i.e., skeleton) items.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetFile(System.Int64)">
	<summary>
 Returns the specified file record.
 </summary>
	<param name="FileID">Specifies a file (e.g., ZIP file)</param>
	<returns>A LocalizationJobDataSet.LocalizationJobFileRow" record of a job file or Nothing if not found.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetFiles(System.Int64)">
	<summary>
 Returns a list of files associated with a given job.
 </summary>
	<param name="JobID">Specifies the job.</param>
	<returns>A LocalizationJobDataSet.LocalizationJobFileDataTable of files.</returns>
	<remarks>Files are typically ZIP files for export jobs and ZIP and XLIFF files for import jobs.</remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetFilesInZipFile(System.Int64)">
	<summary>
 Returns a list of files in a given ZIP file.
 </summary>
	<param name="FileID">Specifies a file (e.g., ZIP file)</param>
	<returns>A LocalizationJobDataSet.LocalizationJobFileDataTable of files.</returns>
	<remarks>Files are typically ZIP and XLIFF files for import jobs. The export process usually will not
 generate ZIP files with other ZIP files in them.</remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetFlagUrl(Ektron.Cms.LanguageDataSet.LanguageRow)">
	<summary>
 Returns a URL to a small image of a national flag for the country and language specified by Data.
 </summary>
	<param name="Data">Specifies the language data.</param>
	<returns>A URL to an image of a national flag.</returns>
	<remarks>Often, only the language is of concern and the flag for the default country will be returned.</remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetFlagUrl(Ektron.Cms.LanguageData)">
	<summary>
 Returns a URL to a small image of a national flag for the country and language specified by Data.
 </summary>
	<param name="Data">Specifies the language data.</param>
	<returns>A URL to an image of a national flag.</returns>
	<remarks>Often, only the language is of concern and the flag for the default country will be returned.</remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetFlagUrl(System.Int32)">
	<summary>
 Returns a URL to a small image of a national flag for the country and language specified by LanguageID.
 </summary>
	<param name="LanguageID">Specifies the locale, that is, the language and country</param>
	<returns>A URL to an image of a national flag.</returns>
	<remarks>Often, only the language is of concern and the flag for the default country will be returned.</remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetInterchangeFile(System.Int64)">
	<summary>
 Returns the interchange (i.e., XLIFF) file record specified by ID.
 </summary>
	<param name="ID">Specifies the interchange (i.e., XLIFF) file record.</param>
	<returns>A LocalizationJobDataSet.LocalizationTargetRow data record of the selected XLIFF file or 
 Nothing if it does not exist.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetInterchangeFiles(System.Int64)">
	<summary>
 Returns a list of interchange files (i.e., XLIFF files) associated with a given content item (i.e., XLIFF Skeleton).
 </summary>
	<param name="ItemID">Specifies the content item (i.e., XLIFF skeleton).</param>
	<returns>A LocalizationJobDataSet.LocalizationTargetDataTable of XLIFF files.</returns>
	<remarks>When exporting, XLIFF files for each target language are generated from a skeleton. When importing, an XLIFF
 file is associated with the skeleton content item it was generated from (the original language) and a new skeleton 
 content item generated by merging the XLIFF with the original skeleton to produce a skeleton in the target language.
 A skeleton consists of the content, typically the main HTML content block, a summary (HTML), title, meta data, etc. </remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetInterchangeFilesInZipFile(System.Int64)">
	<summary>
 Returns a list of interchange files (i.e., XLIFF files) contained within a given ZIP file.
 </summary>
	<param name="FileID">Specifies the ZIP file.</param>
	<returns>A LocalizationJobDataSet.LocalizationTargetDataTable of XLIFF files.</returns>
	<remarks>XLIFF is a standard to interchange localization information for translation of text. The XLIFF files
 are compressed together into one or more ZIP files for convenience.</remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetJobs">
	<summary>
 Returns a list of the top-level jobs, export and import jobs. The jobs listed depend on the user id, 
 unauthenticated users (e.g., translators) see only publicly available jobs (e.g., ZIP files for download).
 Administrators can view all jobs, non-administrators may only view jobs they created.<para></para>
 This function is overloaded. See Also: GetJobs (Long)
 </summary>
	<returns>A LocalizationJobDataSet.LocalizationJobDataTable of top-level jobs.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetJobs(System.Int64)">
	<summary>
 \Returns a list of the sub jobs of the given job.<para></para>
 This function is overloaded. See Also: <see cref="M:Ektron.Cms.API.Localization.GetJobs" text="GetJobs"/>
	</summary>
	<param name="ParentJobID">Specifies the job.</param>
	<returns>
 A <see cref="T:Ektron.Cms.LocalizationJobDataSet.LocalizationJobDataTable"/>
 data table of jobs.
 </returns>
	<remarks>
 \ \  
 </remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetLocalizationUrl">
	<summary>
 Returns a URL to the base directory where localization files are stored. <c>For example, /~SiteRoot~/uploadedfiles/localization.</c>
	</summary>
	<returns>A URL to the base localization directory.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Localization.GetTranslationUploadDirectory">
	<summary>
 \Returns the server directory path to upload XLIFF and ZIP
 files for importing. For example, <c>C:\\inetpub\\wwwroot\\~SiteRoot~\\workarea\\uploadedfiles\\localization</c>.<para></para>
 \See Also: <see cref="M:Ektron.Cms.API.Localization.StartImportTranslation" text="StartImportTranslation"/>.
 </summary>
	<returns>
 The server directory path (as a String) to store XLIFF and
 ZIP files that are to be imported.
 </returns>
	<remarks>
 This directory path should not be displayed on a web page.
 </remarks>
</member><member name="M:Ektron.Cms.API.Localization.StartExportContentForTranslation(System.String,System.String)">
	<summary>
 Starts the process of exporting the content specified by
 ListOfContentIDs. The status of the process may be monitored
 by visiting localizationjobs.aspx, which uses methods in this
 class. The translatable text and documents are exported as
 XLIFF files compressed in ZIP files. The XLIFF files are
 suitable for sending to a translator. Once translated, the
 XLIFF files should be imported using the <see cref="M:Ektron.Cms.API.Localization.StartImportTranslation" text="StartImportTranslation"/>
 method.
 </summary>
	<param name="ListOfContentIDs">Comma\-delimited list of
                                content IDs. e.g., "<c>11,12</c>"</param>
	<param name="ListOfLanguageIDs">Comma\-delimited list of
                                 language IDs. e.g., "<c>1031,1036</c>"</param>
	<remarks>
 To export all content in a folder, use StartExportFolderForTranslation (Long Integer Boolean String).
 See <exref target="http://www.xliff.org">http://www.xliff.org</exref>
 for more information about XLIFF. 
 </remarks>
</member><member name="M:Ektron.Cms.API.Localization.StartExportFolderForTranslation(System.Int64,System.Int32,System.Boolean,System.String)">
	<summary>
 Starts the process of exporting all the content specified by <c>ContentType</c>
 in the specified folder. Optionally, all the content in the
 subfolders may be processed as well. The status of the
 process may be monitored by visiting localizationjobs.aspx,
 which uses methods in this class. The translatable text and
 documents are exported as XLIFF files compressed in ZIP
 files. The XLIFF files are suitable for sending to a
 translator. Once translated, the XLIFF files should be
 imported using the <see cref="M:Ektron.Cms.API.Localization.StartImportTranslation" text="StartImportTranslation"/>.
 </summary>
	<param name="FolderID">Specifies the folder
                        containing the content to
                        export.</param>
	<param name="ContentType">Specifies which type or
                           types of content to export. </param>
	<param name="IncludeSubfolders">Specifies whether to export
                                 just the specified folder or
                                 all subfolders as well.</param>
	<param name="ListOfLanguageIDs">Comma\-delimited list of
                                 language IDs. e.g., "<c>1031,1036</c>"</param>
	<remarks>
 To export just selected content, use StartExportFolderForTranslation (Long Integer Boolean String)<para></para>
 See <exref target="http://www.xliff.org">http://www.xliff.org</exref>
 for more information about XLIFF. 
 </remarks>
</member><member name="M:Ektron.Cms.API.Localization.StartExportMenusForTranslation(System.String)">
	<summary>
 Starts the process of exporting all menus. The status of the
 process may be monitored by visiting localizationjobs.aspx,
 which uses methods in this class. The translatable text is
 exported as an XLIFF file and compressed in a ZIP file. The
 XLIFF file is suitable for sending to a translator. Once
 translated, the XLIFF file should be imported using the <see cref="M:Ektron.Cms.API.Localization.StartImportTranslation" text="StartImportTranslation"/>
 method.
 </summary>
	<param name="ListOfLanguageIDs">Comma\-delimited list of
                                 language IDs. e.g., "<c>1031,1036</c>"</param>
	<remarks>
 See <exref target="http://www.xliff.org">http://www.xliff.org</exref>
 for more information about XLIFF. 
 </remarks>
</member><member name="M:Ektron.Cms.API.Localization.StartImportTranslation">
	<summary>
 Starts the process of importing XLIFF files that have been
 translated. The files should be uploaded to server directory
 specified by <see cref="M:Ektron.Cms.API.Localization.GetTranslationUploadDirectory" text="GetTranslationUploadDirectory"/>.
 Files may be XLIFF files (.xlf extension) or XLIFF files that
 are compressed in ZIP (.zip extension) files.
 </summary>
	<remarks>
 See <exref target="http://www.xliff.org">http://www.xliff.org</exref>
 for more information about XLIFF. 
 </remarks>
</member><member name="M:Ektron.Cms.API.Library.AddLoadBalanceItem(System.String,Microsoft.VisualBasic.Collection)">
	<summary>
 Adds a load balance path for files and images.
 </summary>
	<param name="Type">The path type, either images or files.</param>
	<param name="pagedata">Load balance item values for path and relative.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.DeleteLoadBalanceItem(System.Int64)">
	<summary>
 Deletes the load balance item from the system.
 </summary>
	<param name="Id">The load balance item ID</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.DeleteLibraryItem(Microsoft.VisualBasic.Collection)">
	<summary>
 Deletes the library item by extension.
 </summary>
	<param name="pagedata">Library item data</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.DeleteLibraryItemById(Microsoft.VisualBasic.Collection)">
	<summary>
 Deletes the library items from the system.
 </summary>
	<param name="pagedata">Library item data</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.GetAllLoadBalancePaths(System.String)">
	<summary>
 Returns all the load balance paths as a array of LoadBalanceData.
 </summary>
	<param name="Type">Type (images or files)</param>
	<returns>Ektron.Cms.LoadBalanceData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.GetAllLoadBalancePaths(System.Int64,System.String)">
	<summary>
 Returns an array of LoadBalanceData.
 </summary>
	<param name="Id">Load balance ID</param>
	<param name="Type">Use images or files</param>
	<returns>Ektron.Cms.LoadBalanceData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.GetLibraryItem(System.Int64,System.Int64)">
	<summary>
 Loads the library item's data.
 </summary>
	<param name="Id">The library's ID</param>
	<param name="ParentId">The folder's ID</param>
	<returns>Ektron.Cms.LibraryData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.GetLibraryItem(System.Int64)">
	<summary>
 Loads the library item data.
 </summary>
	<param name="LibID">The library ID</param>
	<returns>Ektron.Cms.LibraryData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.GetLibrarySettings(System.Int64)">
	<summary>
 Loads the library settings.
 </summary>
	<param name="Id">The folder's ID</param>
	<returns>Ektron.Cms.LibraryConfigData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.GetLibraryTypes(System.Int64,System.String)">
	<summary>
 Loads the library types.
 </summary>
	<param name="Id">The folder's ID</param>
	<param name="OrderBy">Order by clause</param>
	<returns>Object</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.UpdateLibrary(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates a library item.
 </summary>
	<param name="pagedata">Library item data</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.UpdateLibrarySettings(Microsoft.VisualBasic.Collection)">
	<summary>
 Update the library settings.
 </summary>
	<param name="pagedata">Library settings data</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.UpdateLoadBalanceSettings(System.String,Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the load balance settings.
 </summary>
	<param name="Id">The load balance data</param>
	<param name="pagedata">The load balance items</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.InternalLibrarySearch(Microsoft.VisualBasic.Collection,Ektron.Cms.Common.SearchAssetRequest)">
	<summary>
 Searches library items.
 </summary>
	<param name="pagedata">Search criteria</param>
	<param name="sar">Search asset criteria</param>
	<returns>Ektron.Cms.SearchResultData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.GetAllChildLibItems(System.String,System.Int64,System.String,System.Int32,System.Int32,System.Int32@)">
	<summary>
 Loads all of the library items by type.
 Using the OrderBy parameter allows you to sort the library items. 
 The currentPageNum, pageSize and totalPages parameters are used with paging. Setting currentPageNum 
 and pageSize to zero causes the API To retrieve all items on a single page.<para></para>
		<b>Note</b>: The caller of API must actually call the API with the correct page number to implement 
 paging. The API does not provide any inherent UI for paging purposes. 
 </summary>
	<param name="Type">The library item's type. (Required) Use one of the following:
   * images
   * files
   * hyperlinks
   * quicklinks
   * forms
 </param>
	<param name="ParentId">The folder's ID.</param>
	<param name="OrderBy">The order to load the library items. You can pass:
   * librarytitle
   * libraryid
   * libraryfilename
   * date
 </param>
	<param name="currentPageNum">The current page number to display.</param>
	<param name="pageSize">The page size set by the caller of the API.</param>
	<param name="totalPages">The total number of pages required to display all of the items.</param>
	<returns>Ektron.Cms.LibraryData()</returns>
	<example>
 The following example shows how to create a Web page that displays a graphical list of all images stored in the 
 library for a specific folder in the Workarea. This example uses some standard drag and drop controls and a small 
 section of VB code utilizing the GetAllChildLibItems method. This method uses the InternalAdmin to retrieve the images. 
 In the first section, we will deal with the standard drag and drop controls. In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, add a Label with the following information.
        <c>&lt;asp:Label ID="Label6" runat="server" Text="Folder ID:" Width="76px"&gt;&lt;/asp:Label&gt;</c>
   2. Add a text box for the Folder ID.
        <c>&lt;asp:TextBox ID="txtFolderId" runat="server" Width="55px"&gt;&lt;/asp:TextBox&gt;</c>
   3. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the Folder ID box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvId" runat="server" ControlToValidate="txtFolderId"</c>
			<c>ErrorMessage="Please enter a folder ID"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add a couple of breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add a submit button. We will set the button click event in the code behind.
        <c>&lt;asp:Button ID="btnGet" runat="server" Text="Get Images" Width="74px" /&gt;</c>
   6. Add two more breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   7. Add a label to display the list of images.
        <c>&lt;asp:Label ID="lblResult" runat="server"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
 <code>
         Protected Sub btnGet_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGet.Click
 </code>
   2. Check to make sure the folder ID is numeric.
 <code>
              If Not IsNumeric(txtFolderId.Text) Then
                  lblResult.Text = "Invalid Folder ID"
                  Exit Sub
              End If       
 </code>
   3. Create an object for the library API.
 <code>
              Dim libraryApi As New Ektron.Cms.API.Library
 </code>
   4. Create an array to contain the library data.
 <code>
              Dim data As Ektron.Cms.LibraryData()
 </code>
   5. Create a Try/Catch around the GetAllChildLibItems method. This allows you to catch any exceptions and helps when debugging.
 <code>
              Try
                  data = libraryApi.GetAllChildLibItems("images", CInt(txtFolderId.Text), "", 0, 0, 0)
 </code>
   6. Check to make sure the library has images for the folder.
 <code>
                  If (Not data Is Nothing) AndAlso (data.Length &gt; 0) Then
 </code>
   7. If so, create an object for each library item.
 <code>
                      Dim item As Ektron.Cms.LibraryData
 </code>
   8. Create an empty string.
 <code>
                      Dim str As String = ""
 </code>
   9. Iterate through each item and display the image with the image title as the alt text.
 <code>
                       For Each item In data
                           str &amp;= "&lt;img src=""" &amp; item.FileName &amp; """ alt=""" &amp; item.Title &amp; """/&gt;" &amp; "&lt;br/&gt;" &amp; "&lt;br/&gt;"
                           lblResult.Text = str
                       Next
 </code>
   10. If the library contains no images for the folder, display a message.
 <code>
                   Else
                       lblResult.Text = "No images found"
                   End If
 </code>
   11. Display a message if there is an error.
 <code>
              Catch ex As Exception
                  lblResult.Text = ex.Message
              End Try
     
      End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.GetLoadBalancePath(System.Int64)">
	<summary>
 Gets the load balance path by ID.
 </summary>
	<param name="Id">the load balance path's ID</param>
	<returns>Ektron.Cms.LoadBalanceData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.UpdateQlinkTemplates(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the Quicklink template.
 </summary>
	<param name="pagedata">Quicklink template data</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Library.AddLibraryItem(Ektron.Cms.LibraryData@)">
	<summary>
 Adds a library item’s information to the database. It does not actually upload the item to the library.
 </summary>
	<param name="libraryData">Details of the new library item</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Font.AddFont(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds a new font to the system.
 </summary>
	<param name="data">Font data as a value key pair.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Font.DeleteFont(Microsoft.VisualBasic.Collection)">
	<summary>
 Deletes a font from the system.
 </summary>
	<param name="data">Required font data (for example, font ID).</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Font.GetAllFonts">
	<summary>
 Loads all of the fonts as a array of FontData.
 </summary>
	<returns>Ektron.Cms.FontData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Font.GetFont(System.Int64)">
	<summary>
 Loads the required font using the font's ID.
 </summary>
	<param name="Id">The font's ID.</param>
	<returns>FontData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Font.GetFontConfigList">
	<summary>
 Returns all of the font details in a drop down control.
 </summary>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Font.UpdateFont(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the font.
 </summary>
	<param name="data">The font's data.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.DeleteFolderById(System.Int64)">
	<summary>
 Delete the folder by its ID.<para></para>
		<i>See Also:</i> The Example section.
 </summary>
	<param name="Id">The folder's ID.</param>
	<returns>False = successfully deleted. Otherwise, returns True.</returns>
	<example>
 The following example shows how to create a Web page from which a folder can be deleted from CMS400.NET by entering its ID.
 This example uses some standard drag and drop controls and a small section of VB code utilizing the DeleteFolderById method.
 This method uses the InternalAdmin to delete the folder. In the first section, we will deal with the standard drag and drop controls.
 In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, add the following label:
        <c>&lt;asp:Label ID="Label1" runat="server" Text="Folder ID: "&gt;&lt;/asp:Label&gt;</c>
   2. Add a text box to enter the folder's ID.
        <c>&lt;asp:TextBox ID="txtFolderId" runat="server" Width="44px"&gt;&lt;/asp:TextBox&gt;</c>
   3. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the Folder ID box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvFolderId" runat="server" ControlToValidate="txtFolderId"</c>
			<c>ErrorMessage="Please enter folder ID"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add a couple of breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add a delete button. We will set the button click event in the code behind.
        <c>&lt;asp:Button ID="btnDeleteFolder" runat="server" Text="Delete Folder" Width="95px" /&gt;</c> 
   6. Add two more breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   7. Add a label to let the user know if the delete succeeded.
        <c>&lt;asp:Label ID="lblResult" runat="server" Width="346px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
 <code>
         Protected Sub btnDeleteFolder_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnDeleteFolder.Click
 </code>
   2. Check to make sure the folder ID entered is numeric.
 <code>
              If Not IsNumeric(txtFolderId.Text) Then
                  lblResult.Text = "Invalid Folder ID"
                  Exit Sub
              End If       
 </code>
   3. Create an object for the Folder API.
 <code>
              Dim folderApi As New Ektron.Cms.API.Folder
 </code>
   4. Create a Try/Catch around the DeleteFolderById method. This allows you to catch any exceptions and helps when debugging.
 <code>
              Try
                  folderApi.DeleteFolderById(CInt(txtFolderId.Text))
 </code>
   5. Display whether the deletion was successful.
 <code>
                  lblResult.Text = "The above folder was deleted from CMS400.NET"
 </code>
   6. If there is an error, let the user know.
 <code>
                Catch ex As Exception
                    lblResult.Text = "Error deleting folder"
                End Try
     
      End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.GetChildFolders(System.Int64,System.Boolean,System.String)">
	<summary>
 Loads all the subfolders for a given folder ID. <para></para>
		<i>See Also:</i> The Example section.
 </summary>
	<param name="Id">The folder's ID</param>
	<param name="Recursive">True = recursive look up. False = none.</param>
	<param name="OrderBy">An order by clause</param>
	<returns>Ektron.Cms.FolderData()</returns>
	<example>
 The following example shows how to create a Web page from which a folder ID can be entered and list of child folders returned.
 This example uses some standard drag and drop controls and a small section of VB code utilizing the GetChildFolders method.
 This method uses the InternalAdmin to retrieve the child folder list. In the first section, we will deal with the standard drag and drop controls.
 In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, add the following label:
        <c>&lt;asp:Label ID="Label1" runat="server" Text="Folder ID: "&gt;&lt;/asp:Label&gt;</c>
   2. Add a text box to enter the folder's ID.
        <c>&lt;asp:TextBox ID="txtFolderId" runat="server" Width="44px"&gt;&lt;/asp:TextBox&gt;</c>
   3. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the Folder ID box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvFolderId" runat="server" ControlToValidate="txtFolderId"</c>
			<c>ErrorMessage="Please enter folder ID"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add a couple of breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add a submit button. We will set the button click event in the code behind.
        <c>&lt;asp:Button ID="btnGetChildFolders" runat="server" Text="Get Child Folders" Width="123px" /&gt;</c>
   6. Add two more breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   7. Add a label to display the list of child folder names.
        <c>&lt;asp:Label ID="lblResult" runat="server" Width="272px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
 <code>
         Protected Sub btnGetChildFolders_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGetChildFolders.Click
 </code>
   2. Create an object for the Folder API.
 <code>
              Dim folderApi As New Ektron.Cms.API.Folder
 </code>
   3. Check to make sure the folder ID is numeric.
 <code>
              If Not IsNumeric(txtFolderId.Text) Then
                  lblResult.Text = "Invalid Folder ID"
                  Exit Sub
              End If       
 </code>
   4. Create an object as an array of FolderData.
 <code>
              Dim folders As Ektron.Cms.FolderData()
 </code> 
   5. Create a Try/Catch around the GetChildFolders method. This allows you to catch any exceptions and helps when debugging.
 <code>
              Try
                  folders = folderApi.GetChildFolders(CInt(txtFolderId.Text), True, "name")
 </code>
   6. Use an If/Else statement to display whether child folders exist.
 <code>
                  If (folders Is Nothing) Then
                      lblResult.Text &amp;= "Child folders: None"
 </code>
   7. If child folders exist, display a total count.
 <code>
                  Else
                      lblResult.Text &amp;= "Child folders: " &amp; folders.Length.ToString &amp; "&lt;br/&gt;"
 </code>
   8. Iterate through the array and display each child folder's name.
 <code>
                      Dim i As Integer
                      For i = 0 To folders.Length - 1 Step 1
                          lblResult.Text &amp;= folders(i).Name &amp; "&lt;br/&gt;"
                      Next
                  End If
 </code>
   9. Display a message if there is an error.
 <code>
               Catch ex As Exception
                  lblResult.Text = "Error getting child folders"
               End Try
     
      End Sub
 </code>
  10. Add a page load event so that lblResult.Text is blank when the page first loads.
 <code>   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
       lblResult.Text = ""
    End Sub            
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.GetChildFolders(System.Int64,System.Boolean,Ektron.Cms.Common.EkEnumeration.FolderOrderBy)">
	<summary>
 Loads all the subfolders for a given folder ID. <para></para>
		<i>See Also:</i> The Example section.
 </summary>
	<param name="Id">The folder's ID</param>
	<param name="Recursive">True = recursive look up. False = none.</param>
	<param name="OrderBy">Field to order results by.</param>
	<returns>Ektron.Cms.FolderData()</returns>
	<example>
 The following example shows how to create a Web page from which a folder ID can be entered and list of child folders returned.
 This example uses some standard drag and drop controls and a small section of VB code utilizing the GetChildFolders method.
 This method uses the InternalAdmin to retrieve the child folder list. In the first section, we will deal with the standard drag and drop controls.
 In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, add the following label:
        <c>&lt;asp:Label ID="Label1" runat="server" Text="Folder ID: "&gt;&lt;/asp:Label&gt;</c>
   2. Add a text box to enter the folder's ID.
        <c>&lt;asp:TextBox ID="txtFolderId" runat="server" Width="44px"&gt;&lt;/asp:TextBox&gt;</c>
   3. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the Folder ID box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvFolderId" runat="server" ControlToValidate="txtFolderId"</c>
			<c>ErrorMessage="Please enter folder ID"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add a couple of breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add a submit button. We will set the button click event in the code behind.
        <c>&lt;asp:Button ID="btnGetChildFolders" runat="server" Text="Get Child Folders" Width="123px" /&gt;</c>
   6. Add two more breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   7. Add a label to display the list of child folder names.
        <c>&lt;asp:Label ID="lblResult" runat="server" Width="272px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
 <code>
         Protected Sub btnGetChildFolders_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGetChildFolders.Click
 </code>
   2. Create an object for the Folder API.
 <code>
              Dim folderApi As New Ektron.Cms.API.Folder
 </code>
   3. Check to make sure the folder ID is numeric.
 <code>
              If Not IsNumeric(txtFolderId.Text) Then
                  lblResult.Text = "Invalid Folder ID"
                  Exit Sub
              End If       
 </code>
   4. Create an object as an array of FolderData.
 <code>
              Dim folders As Ektron.Cms.FolderData()
 </code> 
   5. Create a Try/Catch around the GetChildFolders method. This allows you to catch any exceptions and helps when debugging.
 <code>
              Try
                  folders = folderApi.GetChildFolders(CInt(txtFolderId.Text), True, FolderOrderBy.Name)
 </code>
   6. Use an If/Else statement to display whether child folders exist.
 <code>
                  If (folders Is Nothing) Then
                      lblResult.Text &amp;= "Child folders: None"
 </code>
   7. If child folders exist, display a total count.
 <code>
                  Else
                      lblResult.Text &amp;= "Child folders: " &amp; folders.Length.ToString &amp; "&lt;br/&gt;"
 </code>
   8. Iterate through the array and display each child folder's name.
 <code>
                      Dim i As Integer
                      For i = 0 To folders.Length - 1 Step 1
                          lblResult.Text &amp;= folders(i).Name &amp; "&lt;br/&gt;"
                      Next
                  End If
 </code>
   9. Display a message if there is an error.
 <code>
               Catch ex As Exception
                  lblResult.Text = "Error getting child folders"
               End Try
     
      End Sub
 </code>
  10. Add a page load event so that lblResult.Text is blank when the page first loads.
 <code>   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
       lblResult.Text = ""
    End Sub            
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.GetFolder(System.Int64)">
	<summary>
 Retrieves the folder's details.
 </summary>
	<param name="Id">The Folder's ID.</param>
	<returns>Ektron.Cms.FolderData</returns>
	<remarks>Read permission required</remarks>
</member><member name="M:Ektron.Cms.API.Folder.GetFolder(System.Int64,System.Boolean)">
	<summary>
 Retrieves the folder's details with taxonomy information.
 </summary>
	<param name="Id">The Folder's ID.</param>
	<param name="GetTaxonomy">If true, gets the Taxonomy associated with the folder information.</param>
	<returns>Ektron.Cms.FolderData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.GetFolder(System.Int64,System.Boolean,System.Boolean)">
	<summary>
 Retrieves the folder's details with taxonomy information and Flag information
 </summary>
	<param name="Id">The Folder's ID.</param>
	<param name="GetTaxonomy">If true, gets the Taxonomy associated with the folder information.</param>
	<param name="GetFlags">If true, gets the Flag definitions associated with the folder</param>
	<returns>Ektron.Cms.FolderData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.GetFolderDataWithPermission(System.Int64)">
	<summary>
 Retrieves the folder's details with permission information.
 </summary>
	<param name="Id">The folder's numeric ID.</param>
	<returns>Ektron.Cms.FolderData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.GetFolderId(System.Int64)">
	<summary>
 Finds the folder ID by using a content's ID.
 </summary>
	<param name="Id">The content's numeric ID.</param>
	<returns>A numeric value representing the folder ID.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.GetFolderId(System.String,System.Int64)">
	<summary>
 Finds the folder ID by specifying its folder name and the parent folder ID.
 </summary>
	<param name="FolderName">Name of the folder.</param>
	<param name="ParentId">The numeric ID of the parent folder.</param>
	<returns>Returns the folder ID. Returns 0 if it does not exist.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.GetPath(System.Int64)">
	<summary>
 Gets the path of a folder in the Workarea by using the folder's ID.
 </summary>
	<param name="Id">The folder's ID.</param>
	<returns>Returns the folder path as a string. For example: <c>\\~SiteRoot~\\Products\\Medication Management</c>.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.IsFolderHidden(System.Int64)">
	<summary>
 Returns flag indicating if the folder is hidden.
 </summary>
	<param name="FolderID">The ID of the folder that you are checking.</param>
	<returns>Returns True if the folder is hidden, otherwise returns False.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.RenameFolder(System.Int64,System.String)">
	<summary>
 Rename the folder with new name.
 </summary>
	<param name="cId">The folder's ID.</param>
	<param name="title">The new folder's name.</param>
	<returns>Returns False if successfully renamed. Otherwise, it returns True.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.CreateFolder(System.String)">
	<summary>
 Creates a folder.
 </summary>
	<param name="Path">The path on the IIS server. (Required)</param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.GetFolderInfo(System.String)">
	<summary>
 Returns the folder detail.
 </summary>
	<param name="Path">The folder's path.</param>
	<returns>String()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.AddFolder(Ektron.Cms.FolderRequest)">
	<summary>
 Creates a new folder in the CMS.
 By default the new folder inherits subscription properties of parent folder. 
 To override, use the BreakInheritance property of the FolderRequest.SubscriptionProperties object (set it to True).<para></para>
		<i>See Also:</i> The Example section.
 </summary>
	<param name="request">The Folder's properties as a FolderRequest object.</param>
	<example>
 The following example shows how to create a Web page from which a folder can be added to CMS400.NET.
 This example uses some standard drag and drop controls and a small section of VB code utilizing the AddFolder method.
 This method uses the InternalAdmin to add the folder. In the first section, we will deal with the standard drag and drop controls.
 In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, add the following label:
        <c>&lt;asp:Label ID="Label1" runat="server" Text="Folder Name: " Width="84px"&gt;&lt;/asp:Label&gt;</c>
   2. Add a text box to enter the folder's name.
        <c>&lt;asp:TextBox ID="txtFolderName" runat="server" Width="96px"&gt;&lt;/asp:TextBox&gt;</c>
   3. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the Folder Name box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvFolderName" runat="server" ControlToValidate="txtFolderName"</c>
			<c>ErrorMessage="Please enter folder name"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add a couple of breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add a label for the description box.
        <c>&lt;asp:Label ID="Label2" runat="server" Text="Description: " Width="72px"&gt;&lt;/asp:Label&gt;</c>
   6. Add a text box to enter a description.
        <c>&lt;asp:TextBox ID="txtDescription" runat="server" Width="358px"&gt;&lt;/asp:TextBox&gt;</c>
   7. Add two more breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   8. Add a button to submit the information. We will set the button click event in the code behind.
        <c>&lt;asp:Button ID="btnAddFolder" runat="server" Text="Add CMS Folder" Width="110px" /&gt;</c>
   9. Add two last breaks.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
  10. Add a results label that lets a user know if the add succeeded.
        <c>&lt;asp:Label ID="lblResult" runat="server" Width="545px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
 <code>
         Protected Sub btnAddFolder_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnAddFolder.Click
 </code>
   2. Create an object for the Folder API.
 <code>
                Dim folderApi As New Ektron.Cms.API.Folder
 </code>
   3. Create a Try/Catch around the AddFolder method. This allows you to catch any exceptions and helps when debugging. 
   4. Create a FolderRequest object and assign the following properties:
 <code>
                Try
                    Dim req As New Ektron.Cms.FolderRequest
                    req.FolderName = txtFolderName.Text
                    req.FolderDescription = txtDescription.Text
                    req.ParentId = 0  'Add this folder under the root folder in the Workarea
                    req.StyleSheet = ""
                    folderApi.AddFolder(req)
 </code>
   5. Display the folder name and ID and the fact that it was added.
 <code>
                    Dim newFolderID As Integer = req.FolderId
                    lblResult.Text = "Folder " &amp; txtFolderName.Text &amp; " was added under the root folder in the Workarea with FolderID = " &amp; newFolderId.ToString()
 </code>
   6.  If there is an error, let the user know what happened.
 <code>
                Catch ex As Exception
                    lblResult.Text = ex.Message
                End Try
     
      End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.MoveFolder(System.Int64,System.Int64,System.Boolean)">
	<summary>
 Moves the source folder to destination folder
 </summary>
	<param name="sourceFolder">current folder id</param>
	<param name="destinationFolder">new parent id</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.CopyFolder(System.Int64,System.Int64,System.Boolean,System.Boolean)">
	<summary>
 copies the source folder and its items in to destination folder
 </summary>
	<param name="sourceFolder">current folder id</param>
	<param name="destinationFolder">new parent id</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.AddCommunityFolder(Ektron.Cms.FolderRequest)">
	<summary>
 Creates CMS Community folder.
 </summary>
	<param name="request">The Folder's properties as a FolderRequest object.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.UpdateFolder(Ektron.Cms.FolderRequest)">
	<summary>
 Updates the CMS folder's information. 
 </summary>
	<param name="request">The Folder's properties as a FolderRequest object.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.UpdateFolderApprovalMethod(Ektron.Cms.FolderData)">
	<summary>
 Updates the ApprovalMethod of a folder. The ApprovalMethod gets or set whether or  
 not to force all approvers to approve the content that is added to the folder. Before 
 using this method, you must break permission inheritance for the folder by setting the 
 FolderRequest object's BreakInheritButton property to True.
 </summary>
	<param name="request">The Folder's properties as a FolderData object.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Folder.UpdateFolder(Ektron.Cms.FolderData)">
	<summary>
 Updates the CMS folder's information. 
 </summary>
	<param name="request">The Folder's properties as a FolderData object.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.FileIO.WriteFile(System.String,System.String)">
	<summary>
 Writes into file.
 </summary>
	<param name="Path">The file's path.</param>
	<param name="value">The content of the file.</param>
	<returns>Boolean</returns>
	<example>
 An example of using this function can be found in the 
 Workarea source file <c>CMS400Demo\\Workarea\\createxliff.aspx</c>.
 </example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.ClientDateSeparator">
	<summary>
 Returns client date separator value.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.ClientLongDatePattern">
	<summary>
 Returns the client date in long date format.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.ClientLongTimePattern">
	<summary>
 Returns the clients time in long format.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.ClientShortDatePattern">
	<summary>
 Returns the clients date in short format.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.ClientShortTimePattern">
	<summary>
 Returns the client time in short format.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.ClientTimeSeparator">
	<summary>
 Returns the clients time separator.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.ExtendedMeta">
	<summary>
 Returns the value of meta extended or not meta extended.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.FormElement">
	<summary>
 Sets or gets the form element value.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.FormName">
	<summary>
 Sets or gets the form name.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.RequestInfo">
	<summary>
 Gets or sets the RequestInfo object.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Common.EkRequestInformation</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.ServerDateSeparator">
	<summary>
 Returns the server side date separator.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.ServerShortDatePattern">
	<summary>
 Returns the server side short date pattern.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.ServerShortTimePattern">
	<summary>
 Returns the server short time pattern.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.ServerTimeSeparator">
	<summary>
 Returns the server side date separator.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.SpanAttributes">
	<summary>
 Gets or sets the span attributes.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.SpanId">
	<summary>
 Gets or sets span for calendar control.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.TargetDate">
	<summary>
 Sets or gets the target date.
 </summary>
	<value></value>
	<returns>Date</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.DateTimeSelector.ValidationType">
	<summary>
 Gets or sets the validation type.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.DateTimeSelector.DisplayCultureDate(System.Boolean,System.String,System.String)">
	<summary>
 Returns server culture date using culture object.
 </summary>
	<param name="isEditable">True for editable span tag, otherwise false.</param>
	<param name="inSpanID">ID value for the span tag.</param>
	<param name="inFormElemName">Name value for the span tag.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.DateTimeSelector.DisplayCultureDateTime(System.Boolean,System.String,System.String)">
	<summary>
 Returns server culture date and time.
 </summary>
	<param name="isEditable">True for editable span tag, otherwise false.</param>
	<param name="inSpanID">Id value for the span tag.</param>
	<param name="inFormElemName">Name value for the span tag.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.DateTimeSelector.DisplayCultureTime(System.Boolean,System.String,System.String)">
	<summary>
 Returns the server culture time.
 </summary>
	<param name="isEditable">True for editable span tag, otherwise false.</param>
	<param name="inSpanID">ID value for the span tag.</param>
	<param name="inFormElemName">Name value for the span tag.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.DateTimeSelector.RoundMinutes(System.DateTime,System.Int32)">
	<summary>
 Math function to round the minute.
 </summary>
	<param name="dateToRound">Date value</param>
	<param name="minuteIncrement">Minute value</param>
	<returns>Date</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.AddNewEditableCustomFieldAssignments(System.Int64)">
	<summary>
 Returns the HTML string for the add/edit custom fields.
 </summary>
	<param name="parentfolderid">The parent folder's ID.</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.GetFieldsByFolder(System.Int64,System.Int32)">
	<summary>
 Returns all of the custom attributes by folder.
 </summary>
	<param name="FolderID">The folder's ID.</param>
	<param name="LanguageID">The language's ID.</param>
	<returns>Microsoft.VisualBasic.Collection</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.WriteLibrarySearchExtended(System.Int64)">
	<summary>
 Returns an HTML string for the library search custom metadata properties.
 </summary>
	<param name="folderId">The folder's ID.</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.SearchAllAssets(Ektron.Cms.Common.SearchAssetDispayRequest)">
	<summary>
 Returns the search result based on assets.
 </summary>
	<param name="sadReq">Search parameters. (Required)</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.WritePublicSearch(Ektron.Cms.Common.SearchAssetDispayRequest)">
	<summary>
 Returns WritepublicsearchEx.
 </summary>
	<param name="sadReq">Search asset data. (Required)</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.WritePublicSearchEx(Ektron.Cms.Common.SearchAssetDispayRequest,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Int32)">
	<summary>
 Returns an HTML string for extended the search attributes.
 </summary>
	<param name="sadReq">Search asset properties. (Required)</param>
	<param name="EnableAdvancedLink">True or False</param>
	<param name="EnableContentBtn">True or False</param>
	<param name="EnableContent">True or False</param>
	<param name="EnableFormsBtn">True or False</param>
	<param name="EnableForms">True or False</param>
	<param name="EnableDMSAssetsBtn">True or False</param>
	<param name="EnableDMSAssets">True or False</param>
	<param name="EnableLibImagesBtn">True or False</param>
	<param name="EnableLibImages">True or False</param>
	<param name="EnableLibFilesBtn">True or False</param>
	<param name="EnableLibFiles">True or False</param>
	<param name="EnableLibHyperlinksBtn">True or False</param>
	<param name="EnableLibHyperlinks">True or False</param>
	<param name="EnableArchivedBtn">True or False</param>
	<param name="EnableArchived">True or False</param>
	<param name="TargetFolderDescriptionList">True or False</param>
	<param name="EnableContentFieldset">True or False</param>
	<param name="ContentFieldsetLegend">True or False</param>
	<param name="EnableLibraryFieldset">True or False</param>
	<param name="LibraryFieldsetLegend">True or False</param>
	<param name="EnableFolderFieldset">True or False</param>
	<param name="FolderFieldsetLegend">True or False</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.WriteFilteredMetadataForEdit(Ektron.Cms.ContentMetaData[],System.Boolean,System.String,System.Int64,System.Int32@,System.Collections.Hashtable)">
	<summary>
 Returns an HTML string for filtered metadata.
 </summary>
	<param name="cMetadataTypes">Metadata types.</param>
	<param name="bSearchableOnly">bSearchableOnly</param>
	<param name="ty">type</param>
	<param name="FolderId">The folder's ID.</param>
	<param name="Count">Number of items. (Required)</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.WriteFilteredMetadataForView(Ektron.Cms.ContentMetaData[],System.Int64,System.Boolean)">
	<summary>
 Returns an HTML string for metadata view.
 </summary>
	<param name="cMetadataTypes">Metadata types.</param>
	<param name="FolderId">The folder's Id.</param>
	<param name="bSearchableOnly">True or False</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.WriteMetadataDefaultForEdit(Ektron.Cms.ContentMetaData,System.Int32,System.Collections.Hashtable)">
	<summary>
 Returns an HTML string for the default metadata.
 </summary>
	<param name="cMetadataType">Metadata values.</param>
	<param name="DataType">Data types</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.WriteMetadataTypeForView(System.String,System.String,System.String)">
	<summary>
 Returns a metadata type for view.
 </summary>
	<param name="DataType">Data types.</param>
	<param name="Caption">Caption value.</param>
	<param name="Value">Value. (Required)</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.GetEditableCustomFieldAssignments(System.Object,System.Object)">
	<summary>
 \Returns the editable custom fields.
 
 Break Inheritance checkbox:
   * Visible if not at root.
   * Checked if any fields assigned without inheritance.
   * If unchecked &amp; form saved, removes all assignments.
   * If checked &amp; form saved and no assignments chosen,
     creates NULL assignment (CustomFieldID -1).
   * When checked, enables all assignment checkboxes (iterate
     through all of this tables elements).
   * When unchecked, disables all assignment checkboxes
     (iterate through all of this tables elements).
 \ 
   * Assignment Checkboxes:
   * When clicked: if 'Assignment' button is going unchecked,
     then ensure required is unchecked.
   * When clicked: if 'Required' button, don't accept checks if
     assigned is unchecked.
   * When form submitted, copy checked items to hidden field.
   * Form processor;
     * If break inheritance checked, and any items in hidden
       field, send contents to db.
     * If break inheritance checked, and hidden field empty,
       create dummy assignment fieldID = -1.
     * If break inheritance NOT checked, remove all
       assignments for this folder.
 
 \Note: If editMode is false, then items are visible but not
 changeable by user.
 </summary>
	<param name="folderID">The folder's ID.</param>
	<param name="editMode">Edit mode.</param>
	<returns>
 String
 </returns>
	<remarks>
 Function GetEditableCustomFieldAssignments:
 </remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.ProcessCustomFields(System.Int64)">
	<summary>
 Process Folders' Custom-Field (and metadata) assignments:<para></para>
 When form submitted, copy checked items to hidden field.<para></para>
 Form processor:
   * If break inheritance checked, and any items in hidden
     field, send contents to db.
   * If break inheritance checked, and hidden field empty,
     create dummy assignment fieldID = -1.
   * If break inheritance NOT checked, remove all assignments
     for this folder.
 </summary>
	<param name="folderID">The folder's ID.</param>
	<returns>
 Object
 </returns>
	<remarks>
 \ \ 
 </remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.BoolToYesNo(System.Boolean)">
	<summary>
 Returns labels for yes or no based on locale.
 </summary>
	<param name="bValue">True or False</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.GetEnhancedMetadataArea">
	<summary>
 Returns the HTML needed to render the EnhancedMetadata selection area.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.GetEnhancedMetadataScript">
	<summary>
 Returns support Javascript code for enhanced metadata.
 </summary>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.GetSearchProperties(System.Collections.Specialized.NameValueCollection,Ektron.Cms.Common.SearchItemCustom[]@,Ektron.Cms.Common.SearchItemCustom[]@)">
	<summary>
 Returns the search's properties.
 </summary>
	<param name="FormReq">Form field values.</param>
	<param name="CustomProps">Custom properties value.</param>
	<param name="AssetProps">Asset properties value.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.Populate_AssetRequestObjectFromForm(System.Collections.Specialized.NameValueCollection)">
	<summary>
 Returns asset request object using form data.
 </summary>
	<returns>Ektron.Cms.Common.SearchAssetRequest</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.GetSearchProperties(System.String,System.String,System.String,System.String,Microsoft.VisualBasic.Collection,System.String,System.String,System.String)">
	<summary>
 Returns an HTML string to display search properties.
 </summary>
	<param name="MonikerStyle">Style. (Required)</param>
	<param name="DataType">The data type such as String, DateTime, Numeric, etc.</param>
	<param name="Caption">The caption value. (Required)</param>
	<param name="Name">The value for name attributes.</param>
	<param name="Items">Values of items.</param>
	<param name="AlignCaption">The value for the align attributes.</param>
	<param name="szBeginFontInfo">The value for the begin font attributes.</param>
	<param name="szEndFontInfo">The value for the end font attributes.</param>
	<returns>Object</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CustomFields.GetSearchProperties(Ektron.Cms.Common.SearchAssetDispayRequest)">
	<summary>
 Returns an HTML string for the search properties display.
 </summary>
	<param name="sadReq">The search asset objects. (Required)</param>
	<returns>System.Text.StringBuilder</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.GetBoardCategories(System.Int64)">
	<summary>
 Method to get the Categories for a board by ID.
 Returns either zero length or populated array.
 See DiscussionCategory class for more information.
 </summary>
	<param name="boardID">Numeric ID of the discussion board.</param>
	<returns>Returns an array of type DiscussionCategory.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.GetBoardForums(System.Int64)">
	<summary>
 Method to get the Forums for a board by ID.
 Returns either zero length or populated array.
 See DiscussionForum class for more information.
 </summary>
	<param name="boardID">Numeric value of the board ID.</param>
	<returns>Returns an array of type DiscussionForum.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.GetDiscussionBoard(System.String)">
	<summary>
 Method to get a discussion board by using its path.
 Returns a DiscussionBoard class for a given path.
 See DiscussionBoard class for more information on the properties of the returned object.
 </summary>
	<param name="boardpath">String value of the board path. Ex: \Ektron\CMS400.NET.</param>
	<returns>Returns a class of type DiscussionBoard.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.GetDiscussionBoard(System.Int64)">
	<summary>
 Method to get a board by ID.
 Returns a DiscussionBoard class for a given ID value.
 See DiscussionBoard class for more information on the properties of the returned object.
 </summary>
	<param name="boardID">Numeric value of the board ID.</param>
	<returns>Returns a class of type DiscussionBoard.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.GetDiscussionBoardString(System.Int64,System.String,System.Web.UI.Page)">
	<summary>
 Method to get the rendered view of a discussion board by ID.
 Returns a string of the output based upon the input parameters.
 Display of the board can be controlled by using cascading style sheets (CSS).
 </summary>
	<param name="boardID">Numeric ID of the board.</param>
	<param name="URLpath">String value of the URL path used. This is generally the Server Variable "URL". Ex: "/forum.aspx".</param>
	<returns>Returns a string of the rendered Discussion Board, suitable for the server control or a Web service.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.GetForum(System.Int64)">
	<summary>
 Method to obtain a particular forum by ID.
 Returns a discussion board with a 1 length Discussion Forum array.
 If the forum does not exist, then a DiscussionBoard with a zero length Forums property will be returned.<para></para>
		<i>See Also:</i> The Example section.
 </summary>
	<param name="forumid">Numeric value of the forum ID.</param>
	<returns>An instance of type DiscussionBoard.</returns>
	<example>
 The following example shows how to create a Web page from which forum data can be retrieved.
 This example uses some standard drag and drop controls and a small section of VB code utilizing the GetForum method.
 This method uses the InternalAdmin to retrieve the forum data. In the first section, we will deal with the standard drag and drop controls.
 In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, add a label with the following information.
         <c>&lt;asp:Label ID="Label1" runat="server" Text="Forum ID: "&gt;&lt;/asp:Label&gt;</c>
   2. Add a text box to enter the Forum ID.
         <c>&lt;asp:TextBox ID="txtForumId" runat="server" Width="63px"&gt;&lt;/asp:TextBox&gt;</c>
   3. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the Forum ID Box.
         <c>&lt;asp:RequiredFieldValidator ID="rfvForumId" runat="server" ControlToValidate="txtForumId"</c>
			<c>ErrorMessage="Please enter forum ID"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add a couple of breaks for spacing purposes.
         <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add a button, to retrieve the forum data.
         <c>&lt;asp:Button ID="btnGetForum" runat="server" Text="Get Forum" Width="72px" /&gt;</c>
   6. Add a couple of more breaks for spacing purposes.
         <c>&lt;br /&gt;&lt;br /&gt;</c>
   7. Add a results label where the forum data will appear. This label is also used to display any errors that might occur.
         <c>&lt;asp:Label ID="lblResult" runat="server" Width="604px" Height="113px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
 <code>
        Protected Sub btnGetForum_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGetForum.Click
 </code>
   2. Create objects for the following items.
 <code>
            Dim board As New Ektron.Cms.DiscussionBoard
            Dim forumApi As New Ektron.Cms.API.Content.ThreadedDiscussion
 </code>
   3. Check to make sure the forum ID is numeric.
 <code>
            If Not IsNumeric(txtForumId.Text) Then
                lblResult.Text = "Invalid Forum ID"
                Exit Sub
            End If
 </code>  
   4. Create a Try/Catch around the GetForum method. This allows you to catch any exceptions and helps when debugging. 
 <code>
            Try
                board = forumApi.GetForum(CInt(txtForumId.Text))
 </code>
   5. Check to make sure the discussion board and forum are valid.
 <code>
                If (board.Id = 0) Or (board.Forums.Length &lt;&gt; 1) Then
                    lblResult.Text = "Error getting forum"
                    Exit Sub
                End If
 </code>
   6. Display the Discussion Board data.
 <code>
                lblResult.Text = "Board Title: " &amp; board.Title &amp; "&lt;br/&gt;"
                lblResult.Text &amp;= "Board Name: " &amp; board.Name &amp; "&lt;br/&gt;"
 </code>
   7. Display the Forum data.
 <code>
                lblResult.Text &amp;= "Forum Category: " &amp; board.Forums(0).CategoryName &amp; "&lt;br/&gt;"
                lblResult.Text &amp;= "Forum Name: " &amp; board.Forums(0).ForumName &amp; "&lt;br/&gt;"
                lblResult.Text &amp;= "Forum Title: " &amp; board.Forums(0).ForumTitle &amp; "&lt;br/&gt;"
                lblResult.Text &amp;= "Number of topics: " &amp; board.Forums(0).NumberofTopics &amp; "&lt;br/&gt;"
                lblResult.Text &amp;= "Number of posts: " &amp; board.Forums(0).NumberofPosts &amp; "&lt;br/&gt;"
 </code>
   8. If there is an error, let the user know what happened.
 <code>
            Catch ex As Exception
                lblResult.Text = ex.Message
            End Try
 
         End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.GetRepliesForTopics(System.Int64)">
	<summary>
 Method returns a list of replies for a given forum ID.
   * ArrayList Structure ArrayListItem(j)(0)
   * content_id ArrayListItem(j)(1)
   * comment_total ArrayListItem(j)(2)
   * comment_sum ArrayListItem(j)(3)
   * last_posted ArrayListItem(j)(4)
   * content_language
 </summary>
	<param name="ForumID">Numeric value of the forum ID.</param>
	<returns>
 An instance of type ArrayList.
 </returns>
	<remarks>
 This is an older method and is deprecated. The information
 returned herein was merged into the higher performance
 GetForum(int forumID) method, and that should be used
 instead.
 </remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.GetTopic(System.Int64)">
	<summary>
 Method to obtain a particular Topic by ID.
 Returns a discussion board with a 1 length Discussion Forum array containing a 1 length DiscussionTopic array.
 If the topic does not exist, then a DiscussionBoard with a 1 length Forums property containing a zero length Topics property will be returned.
 </summary>
	<param name="topicid">Numeric ID of the Topic.</param>
	<returns>An instance of type DiscussionBoard.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.SearchReplies(System.Int64[],System.String[],Ektron.Cms.Common.EkEnumeration.SearchTypes)">
	<summary>
 Method to obtain an array of topic replies matching search criteria.
 Returns an instance of EkTasks, which is effectively an array of EkTask objects.
 If no results are returned, then a zero length EkTasks will be returned.
 </summary>
	<param name="ForumIDs">Numeric (Long) array of the Forum IDs you want to search. Use zero length array, or 0, to search all.</param>
	<param name="SearchTerms">String array of the search terms (case insensitive).</param>
	<param name="stType">EkEnumeration.SearchTypes enumeration value for the search type.</param>
	<returns>An instance of type ekTasks (an array of Tasks).</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.DeleteBoard(System.Int64)">
	<summary>
 Deletes a board with a given ID.
 This deletes the board as well as all forums, topics and posts under it.
 BoardID must be greater than 0.
 </summary>
	<param name="BoardID">The numeric ID of the board. This corresponds to the folder ID.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.DeleteForum(System.Int64)">
	<summary>
 Deletes a forum with a given ID.
 This deletes the forum as well as all topics and posts under it.
 forumID must be greater than 0 (zero).
 </summary>
	<param name="forumID">The numeric ID of the forum. This corresponds to the folder ID.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.DeleteTopic(System.Int64)">
	<summary>
 Deletes a topic by topicID.
 This method deletes all posts associated with the topic as well.
 Returns boolean value.
 </summary>
	<param name="topicid">Numeric ID of the topic to delete.</param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.AddTopic(System.Int64,System.String,System.String,System.Int32)">
	<summary>
 Overloaded method to add a topic based on a forum ID and language. 
 Accepts title and topic starting message.
 Returns Topic ID as Long.
 </summary>
	<param name="ForumID">Numeric ID of forum to which the topic is added.</param>
	<param name="Title">String value of the topic title.</param>
	<param name="Message">String value of the topic message.</param>
	<param name="LanguageId">Numeric ID of the Language.</param>
	<returns>Numeric value for the topic ID. (Long)</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.AddTopic(System.Int64,System.String,System.String)">
	<summary>
 Method to add a topic based on a forum ID. 
 Accepts title and topic starting message.
 Returns Topic ID as Long.
 </summary>
	<param name="ForumID">Numeric ID of forum to which the topic is added.</param>
	<param name="Title">String value of the topic title.</param>
	<param name="Message">String value of the topic message.</param>
	<returns>Numeric value for the topic ID. (Long)</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.AddBoard(System.Int64,System.String,System.String,System.Boolean,System.String,System.String[])">
	<summary>
 Adds a discussion board to a given folder.
 Accepts name, title, and other parameters.
 Returns numeric ID of new discussion board.
 </summary>
	<param name="ParentID">Numeric ID of folder to which you are adding the discussion board.</param>
	<param name="Name">Name of discussion board.</param>
	<param name="Title">Title of the discussion board.</param>
	<param name="RequiresAuthentication">Set to True to require authentication.</param>
	<param name="StyleSheet">The stylesheet to apply to the discussion board.</param>
	<param name="Categories">String array of categories for the discussion board.</param>
	<returns>Numeric ID of new discussion board. (Long)</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.AddForum(System.Int64,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Int64)">
	<summary>
 Adds a discussion forum to a given board.
 Accepts name, description, and other parameters.
 Category ID must be valid for the board ID.
 Returns numeric ID of new discussion forum as Long.<para></para>
		<i>See Also:</i> The Example section.
 </summary>
	<param name="BoardID">The numeric ID of the board to which the forum will be added.</param>
	<param name="Name">The string name of the forum being added.</param>
	<param name="Description">String value for the forum summary.</param>
	<param name="ModeratePosts">Are posts moderated?</param>
	<param name="LockForum">Is the forum locked?<para></para>
		<b>True</b> - prevent posting to the forum. Only members of the Administrators user group can add, edit or delete posts.<para></para>
		<b>False</b> - the forum is unlocked.</param>
	<param name="SortOrder">Sort order for the new forum. For example, if you have multiple forums, you can assign an integer order to sort them. 
 The order in which the forums appear, correspond to the numbers assigned to each one. 1 (one) is first on the list, 2 (two) appears second and so on. 
 If you assign the same number to more than one forum, those forums are sorted in alphabetical order.</param>
	<param name="CategoryID">Numeric ID of the category to which the forum belongs.</param>
	<returns>Numeric ID of new discussion forum. (Long)</returns>
	<example>
 The following example shows how to create a Web page from which a forum can be added to a discussion board.
 This example uses some standard drag and drop controls and a small section of VB code utilizing the AddForum method.
 This method uses the InternalAdmin to add the forum. In the first section, we will deal with the standard drag and drop controls.
 In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. In the Web form, create a table with four rows and three columns.
   2. In the first row, first column, add the following label:
         <c>&lt;asp:Label ID="Label1" runat="server" Text="Board Id: "&gt;&lt;/asp:Label&gt;</c>
   3. In the first row, second column, add a text box to enter the board ID.
         <c>&lt;asp:TextBox ID="txtBoardId" runat="server" Width="63px"&gt;&lt;/asp:TextBox&gt;</c>
   4. In the first row, third column, add a RequiredFieldValidator control. This validates that something appears in the board ID box.
         <c>&lt;asp:RequiredFieldValidator ID="rfvBoardId" runat="server" ControlToValidate="txtBoardId"</c>
			<c>ErrorMessage="Please enter board ID"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   5. In the second row, first column, add the following label:
         <c>&lt;asp:Label ID="Label4" runat="server" Text="Forum name: " Width="80px"&gt;&lt;/asp:Label&gt;</c>
   6. In the second row, second column, add a text box to enter the forum name.
         <c>&lt;asp:TextBox ID="txtForumName" runat="server" Width="254px"&gt;&lt;/asp:TextBox&gt;</c>
   7. In the second row, third column, add a RequiredFieldValidator control. This validates that something appears in the Forum Name box.
         <c>&lt;asp:RequiredFieldValidator ID="rfvForumName" runat="server" ErrorMessage="Please enter forum name"</c>
			<c>ControlToValidate="txtForumName"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   8. In the third row, first column, add the following label:
         <c>&lt;asp:Label ID="Label7" runat="server" Text="Description:" Width="76px"&gt;&lt;/asp:Label&gt;</c>
   9. In the third row, second column, add a text box to enter a description.
         <c>&lt;asp:TextBox ID="txtDescription" runat="server" Width="253px"&gt;&lt;/asp:TextBox&gt;</c>
  10. In the third row, third column, add a RequiredFieldValidator control. This validates that something appears in the description box.
         <c>&lt;asp:RequiredFieldValidator ID="rfvDescription" runat="server" ErrorMessage="Please enter forum description" </c>
			<c>ControlToValidate="txtDescription" Width="186px"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
  11. In the fourth row, first column, add the following label:
         <c>&lt;asp:Label ID="Label2" runat="server" Text="Category ID: " Width="76px"&gt;&lt;/asp:Label&gt;</c>
  12. In the fourth row, second column, add a text box to enter a Category ID.
         <c>&lt;asp:TextBox ID="txtCategoryId" runat="server" Width="75px"&gt;&lt;/asp:TextBox&gt;</c>
  13. In the fourth row, third column, add a RequiredFieldValidator control. This validates that something appears in the Category ID box.
         <c>&lt;asp:RequiredFieldValidator ID="rfvCatId" runat="server" ErrorMessage="Please enter category Id"</c>
			<c>ControlToValidate="txtCategoryId"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
  14. After the table, add a couple of breaks for spacing purposes.
         <c>&lt;br /&gt;&lt;br /&gt;</c>
  15. Add a button, to submit the information.
         <c>&lt;asp:Button ID="btnAddForum" runat="server" Text="Add Forum" Width="72px" /&gt;</c>
  16. Add a couple of more breaks for spacing purposes.
         <c>&lt;br /&gt;&lt;br /&gt;</c>
  17. Add a results label that will let the person using the page know whether or not the add succeeded.
         <c>&lt;asp:Label ID="lblResult" runat="server" Width="549px" Height="25px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
 <code>
         Protected Sub btnGetForum_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnAddForum.Click
 </code>
   2. Create objects for the following items.
 <code>
            Dim board As New Ektron.Cms.DiscussionBoard
            Dim forumApi As New Ektron.Cms.API.Content.ThreadedDiscussion
            Dim forumID As long
 </code>
   3. Check to make sure the Board ID is numeric.
 <code>
            If Not IsNumeric(txtBoardId.Text) Then
                lblResult.Text = "Invalid Board ID"
                Exit Sub
            End If
 </code>
   4. Check to make sure the Category ID is numeric.
 <code>
            If Not IsNumeric(txtCategoryId.Text) Then
                lblResult.Text = "Invalid Category ID"
                Exit Sub
            End If
 </code>
   5. Create a Try/Catch around the AddForum method. This allows you to catch any exceptions and helps when debugging. 
 <code>
            Try
                forumID = forumApi.AddForum(CInt(txtBoardId.Text), txtForumName.Text, txtDescription.Text, False, False, 1, CInt(txtCategoryId.Text))
 </code>
   6. Add an If statement that displays a message stating if the forum was added and its ID.
 <code>
                If (forumID &lt;&gt; 0) Then
                    lblResult.Text = "Forum added to the board with Forum ID = " &amp; forumID
                End If
 </code>
   7. If there is an error, let the user know what happened.
 <code>
            Catch ex As Exception
                lblResult.Text = ex.Message
            End Try
 
         End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.AddReply(System.Int64,System.String,System.Int64,System.Int64,System.DateTime,System.Boolean,System.Boolean,System.String,Ektron.Cms.FileAttachment[])">
	<summary>
 Adds a post to a topic.
 Set PostDate property to backdate a post.
 You can specify a post to reply to.
 You can post anonymously.
 </summary>
	<param name="TopicID">The topic to add the post to.</param>
	<param name="Message">The unencoded HTML of the message.</param>
	<param name="ForUserID">The ID of the user who is posting.</param>
	<param name="ReplyToPost">The id of the post to which the user is replying to.</param>
	<param name="PostDate">DateTime value of when the post occurred.</param>
	<param name="Approved">Set to True to approve the post. Otherwise, the post is set to appending.</param>
	<param name="Anonymous">Set to True to add the post anonymously. Otherwise, the post will be attributed to the logged in user.</param>
	<param name="IPAddress">IP address of the poster.</param>
	<param name="FileAttachments">Array of file attachment classes. If attaching documents or images to the post.</param>
	<returns>Numeric value representing the ID of the post that was added. (Long)</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.AddReply(System.Int64,System.String,System.Int64,System.Int64,System.Boolean,System.Boolean,System.String,Ektron.Cms.FileAttachment[])">
	<summary>
 Adds a Post to the Forum.
 You can specify a post to reply to.
 You can post anonymously.
 </summary>
	<param name="TopicID">The numeric ID of the topic to add the post to.</param>
	<param name="Message">The unencoded HTML of the message.</param>
	<param name="ForUserID">The ID of the user who is posting.</param>
	<param name="ReplyToPost">The ID of the post to which the user is replying.</param>
	<param name="Approved">Set to True to approve the post. Otherwise, the post is set to appending.</param>
	<param name="Anonymous">Set to True to add the post anonymously. Otherwise, the post will be attributed to the logged in user.</param>
	<param name="IPAddress">IP address of the poster.</param>
	<param name="FileAttachments">Array of file attachment classes. If attaching documents or images to the post.</param>
	<returns>Numeric representing the ID of the post that was added. (Long)</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.SubscribeToForum(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.NotificationType)">
	<summary>
 Subscribe a user to a forum by providing the ID of the forum, the user's ID and the type of subscription. 
 </summary>
	<param name="ForumID">Numeric ID of the forum to subscribe to.</param>
	<param name="ForUserID">Numeric ID of the user subscribing.</param>
	<param name="WatchType">Type of subscription. Choices are:
   * <b>All</b> - subscribes a user to all forum items.
   * <b>Replies</b> - subscribes a user to all replies to his posts in the specified forum.
   * <b>Never</b> - unsubscribes a user from the forum.
 </param>
	<returns>Object watch of the current subscription status.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.UnSubscribeToTopic(System.Int64,System.Int64)">
	<summary>
 Unsubscribe a user from a topic by providing the topic ID and user ID.
 </summary>
	<param name="TopicID">Numeric ID of the topic to unsubscribe from.</param>
	<param name="ForUserID">Numeric ID of the user unsubscribing.</param>
	<returns>Object watch of the current subscription status.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.UnSubscribeToForum(System.Int64,System.Int64)">
	<summary>
 Unsubscribe a user from a forum by providing the topic ID and user ID.
 </summary>
	<param name="ForumID">Numeric ID of the forum to unsubscribe from.</param>
	<param name="ForUserID">Numeric ID of the user to unsubscribe.</param>
	<returns>Object watch of the current subscription status.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.UnSubscribeToBoard(System.Int64,System.Int64)">
	<summary>
 Unsubscribe a user from a discussion board by providing the discussion board's ID and user ID.
 </summary>
	<param name="BoardID">Numeric ID of the discussion board to unsubscribe from.</param>
	<param name="ForUserID">Numeric ID of the user to unsubscribe.</param>
	<returns>Object watch of the current subscription status.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.GetActiveTopics(System.Int64,System.Int32)">
	<summary>
 Gets Most active topics for a board.
 Activity is measured by number of posts on the topic.
 </summary>
	<param name="boardId">The numeric ID value of the discussion board.</param>
	<param name="MaxNumber">The maximum number of topics to retrieve.</param>
	<returns>An array of Discussion Topic classes.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.GetActiveUsers(System.Int64,System.Int32,System.TimeSpan)">
	<summary>
 Gets Most active topics for a board.
 Activity is measured by number of posts on the topic.
 </summary>
	<param name="boardId">The numeric value representing the board ID.</param>
	<param name="MaxNumber">The maximum number of topics to retrieve.</param>
	<returns>An array of Discussion Topic classes.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.GetActiveTopics(System.Int64,System.Int32,System.TimeSpan)">
	<summary>
 Gets Most active topics for a board.
 Activity is measured by number of posts on the topic.
 </summary>
	<param name="boardId">The numeric representing the board ID.</param>
	<param name="MaxNumber">The maximum number of topics to retrieve.</param>
	<returns>An array of Discussion Topic classes.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ThreadedDiscussion.GetActiveTopicsForForum(System.Int64,System.Int32)">
	<summary>
 Gets Most active topics for a forum.
 Activity is measured by number of posts on the topic.
 </summary>
	<param name="forumId">The numeric ID value of the forum.</param>
	<param name="MaxNumber">The maximum number of topics to retrieve.</param>
	<returns>An array of Discussion Topic classes.</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.API.Content.ThreadedDiscussion">
	<summary>
 The ThreadedDiscussion class allows you to work with threaded discussion by adding and removing 
 discussion boards, forums, and topics. It also allows you to subscribe or unsubscribe to a board, forum 
 or topic. In addition, you can retrieve a specific topic or search a topic's replies. <para></para>
 The Threaded Discussion feature provides a discussion board where a forum can be created and topics 
 can be discussed on your Web site. A site or membership user with Add Topic permission creates a 
 topic and posts a starter question. Other site visitors can then reply to the topic.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Form.GetAllForms">
	<summary>
 Returns all of the forms as an array of FormData.
 </summary>
	<returns>Ektron.Cms.FormData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Form.AssignFormTask(Ektron.Cms.FormData,System.String)">
	<summary>
 Assigns a form submission task, as specified in FormInfo, of the SubmittedDataXml.
 </summary>
	<param name="FormInfo">
 The properties of the form associated with the data. This information may be 
 retrieved by calling GetFormById. 
 Value Type: Ektron.Cms.FormData
 </param>
	<param name="SubmittedDataXml">
 The form data submitted in XML format. Value Type: System.String
 </param>
	<returns>Returns True if the task was successfully assigned. Value Type: System.Boolean</returns>
	<remarks>
 This routine is called automatically when calling SubmitFormFieldData 
 if SendNotification is True and the form is configured to assign a task 
 when data is submitted. The SubmittedDataXml is typically
 retrieved by calling SubmitFormFieldData.
 </remarks>
</member><member name="M:Ektron.Cms.API.Content.Form.EmailFormFieldData(Ektron.Cms.FormData,System.String)">
	<summary>
 Sends an email, as specified in FormInfo, of the SubmittedDataXml.
 </summary>
	<param name="FormInfo">
 The properties of the form associated with the data. This information may be 
 retrieved by calling GetFormById. 
 Value Type: Ektron.Cms.FormData
 </param>
	<param name="SubmittedDataXml">
 The form data submitted in XML format. 
 Value Type: System.String
 </param>
	<remarks>
 This routine is called automatically when calling SubmitFormFieldData 
 if SendNotification is True and the form is configured to send an email 
 notification when data is submitted. The SubmittedDataXml is typically
 retrieved by calling SubmitFormFieldData.
 </remarks>
</member><member name="M:Ektron.Cms.API.Content.Form.GetAllForms(System.Int64,System.String,System.Int32,Ektron.Cms.ContentAPI.FormResultType)">
	<summary>
 Retrieves an array of all the forms contained with the specified folder.
 Forms may be limited to a single language and type.
 </summary>
	<param name="Id">Specifies the folder.</param>
	<param name="OrderBy">Specifies how to sort the forms</param>
	<param name="LanguageId">Specifies a language or EkConstants.g_AllContentLanguages (-1) for all languages.</param>
	<param name="Type">Specifies whether only active forms or archived forms should be returned.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Form.GetForm(System.Int64)">
	<summary>
 Retrieves information about the specified form.
 </summary>
	<param name="Id">Specifies the form.</param>
	<returns>Returns information about the form.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Form.GetFormFieldData(System.Int64,System.Int64)">
	<summary>
 Retrieves a single instance of submitted data, as specified by FormDataId, 
 for all fields from a specified form. 
 </summary>
	<param name="FormId">
 	Specifies the form. 
 	Value Type: System.Int32
 </param>
	<param name="FormDataId">
 	Specifies the instance of submitted data. 
 	Value Type: System.Int32
 </param>
	<returns>Returns the submitted data or null/Nothing, if none found.	Ektron.Cms.FormSubmittedData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Form.GetFormFieldData(System.Int64,System.String,System.String)">
	<summary>
 Retrieves the submitted data for all fields from a specified form. 
 All the data may be retrieved or just data submitted within a given date range.
 </summary>
	<param name="FormId">
 	Specifies the form. 
 	Value Type: System.Int32
 </param>
	<param name="StartDate">
 	Optionally limit the data returned to include only those submitted on or after the given date. 
 	Value Type: System.String
 </param>
	<param name="EndDate">
 	Optionally limit the data returned to include only those submitted on or before the given date. 
 	Value Type: System.String
 </param>
	<returns>Returns an array of submitted data. Ektron.Cms.FormSubmittedData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Form.GetFormFieldList(System.Int64)">
	<summary>
 Retrieves the list of form fields defined in the specified form.
 </summary>
	<param name="FormId">
 	Specifies the form. 
 	Value Type: System.Int32
 </param>
	<returns>The list for defined fields in the given form.	Ektron.Cms.FormFieldList</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Form.GetFormFieldQuestions(System.Int64)">
	<summary>
 Retrieves the table of form fields and their questions in a specified form.  
 In a CMS form, the form question is defined by the user in the descriptive name field
 in the form element dialog during design time.
 </summary>
	<param name="FormId">
     Specifies the form. 
 	Value Type: System.Int32
 </param>
	<returns>A table of defined fields with the corresponding questions in a given form.</returns>
	<remarks>These questions are mainly used for reporting.</remarks>
</member><member name="M:Ektron.Cms.API.Content.Form.GetFormTitle(System.Int64)">
	<summary>
 Same as GetFormById, but returns only the form's title.
 </summary>
	<param name="Id">Specifies the form.</param>
	<returns>The title of the specified form.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Form.SubmitFormFieldData(System.Int64,Ektron.Cms.FormSubmittedData,System.Boolean,System.String@)">
	<summary>
 Adds form data as if it was submitted during a browser post to the web server.
 </summary>
	<param name="FormId">
 	Specifies the form that corresponds to the data. 
 	Value Type: System.Int32
 </param>
	<param name="Data">
 	The data to submit. 
 	Value Type: Ektron.Cms.FormSubmittedData
 </param>
	<param name="SendNotification">
 	(Optional) Specifies whether to send notifications that a form submission has occurred or not.
     For example, whether to send an email or assign a form submission task as configured for the form. 
 	Value Type: System.Boolean
 </param>
	<param name="SubmittedDataXml">
 	(Optional) XML packet of submitted data.
 	Reference Type: System.String
 </param>
	<remarks>
	</remarks>
</member><member name="M:Ektron.Cms.API.Content.Form.UpdateFormFieldData(System.Int64,System.Int64,Ektron.Cms.FormSubmittedData)">
	<summary>
 Updates a single instance of submitted data, as specified by FormDataId, 
 for all fields from a specified form.
 </summary>
	<param name="FormId">
 	Specifies the form. 
 	Value Type: System.Int32
 </param>
	<param name="FormDataId">
 	Specifies the instance of submitted data. 
 	Value Type: System.Int32
 </param>
	<param name="SubmittedData">
 	The field data values to be updated. 
 	Value Type: Ektron.Cms.FormSubmittedData
 </param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ContentRating.GetContentRatingAddRating(System.Int64,System.Int64,System.Int32,System.String)">
	<summary>
 Adds a content rating to the database. Internally a check is done to ensure the user has not already rated the content, and passes down the rating and
 any comments the user supplied. 
 </summary>
	<param name="contentid">The numeric ID associated with the content block being rated.</param>
	<param name="userid">The unique global identifier stored as a cookie by the user.</param>
	<param name="userRating">The rating the user supplies (1-9).</param>
	<param name="userComments">Optional comments that the user provides.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ContentRating.GetContentRating(System.Int64,System.Web.UI.Page,System.String,Ektron.Cms.ContentRatingLabels,Ektron.Cms.ContentAPI.RatingGraphDisplayType,Ektron.Cms.ContentAPI.RatingGraphDisplayType,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
	<summary>
 Constructs a string that represents a content rating element on a web site. This is composed of a rating dialog and a graph representing current ratings. Note that the content rating server control wraps this functionality.
 </summary>
	<param name="contentID">The numeric ID associated with the content block being rated.</param>
	<param name="currentPage">A reference to the System.Web.UI.Page object representing the active web page.</param>
	<param name="key">Specifies a unique ID of this element. No two content rating controls on the same page should specify the same key.</param>
	<param name="Labels">Specifies the labels of the control to be displayed. See Ektron.Cms.ContentRatingLabels</param>
	<param name="initialGraph">Specifies to show the initial (non-rated) graph to be horizontal to the control, below it, or not at all.</param>
	<param name="ratingCompleteGraph">Specifies to show the complete (rated) graph to be horizontal to the control, below it, or not at all.</param>
	<param name="padding">Specifies the number of pixels between the rating control and the graph.</param>
	<param name="bgColor">Specifies the background color of the graph.</param>
	<param name="barColor">Specifies the bar color of the graph.</param>
	<param name="TextColor">Specifies the text color of the graph.</param>
	<returns>Returns a string representing the final control.</returns>
	<example>
 The following example shows how to create a Web page that retrieves a content rating element used to rate content. This example uses some standard drag  
 and drop controls and a small section of VB code utilizing the GetContentRating method. This method uses the InternalAdmin to retrieve the content. 
 In the first section, we will deal with the standard drag and drop controls. In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, add a Label with the following information.
        <c>&lt;asp:Label ID="Label6" runat="server" Text="Content ID:" Width="76px"&gt;&lt;/asp:Label&gt;</c>
   2. Add a text box for the user to enter the content ID.
        <c>&lt;asp:TextBox ID="txtId" runat="server" Width="55px"&gt;&lt;/asp:TextBox&gt;</c>
   3. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the Content ID box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvId" runat="server" ControlToValidate="txtId" ErrorMessage="Please enter content id" Width="140px"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add a couple of breaks for spacing purposes.
        <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add a button to submit the content ID and retrieve the content rating.
        <c>&lt;asp:Button ID="btnGet" runat="server" Text="Get ContentRating" Width="115px" /&gt;</c>
   6. Add a couple of more breaks for spacing purposes.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
   7. Add a results label to display the content rating.
       &lt;asp:Label ID="lblResult" runat="server" Width="502px"&gt;&lt;/asp:Label&gt;
 </pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add the following Imports statement to the top of the page.
 <code>
       Imports Ektron.Cms
 </code>
   2. Add a page load event that makes sure lblResult.Text is blank.
 <code>
          Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
              lblResult.Text = ""
          End Sub
 </code>
   3. Add a button click event.
 <code>
          Protected Sub btnGet_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGet.Click
 </code>
   4. Check to make sure the content ID is numeric.
 <code>
              If Not IsNumeric(txtId.Text) Then
                  lblResult.Text = "Invalid Content ID"
                  Exit Sub
              End If
 </code>
   5. Create the following objects.
 <code>
              Dim ratingApi As New Ektron.Cms.API.Content.ContentRating
              Dim labels As New Ektron.Cms.ContentRatingLabels
              Dim str As String
 </code>
   6. Define the labels for use in the content rating.
 <code>
              labels.TotalRatingsLabel = "Total number of ratings"
              labels.RatingLevelLabel = "Rating Level: "
              labels.AlreadyRatedMessage = "You have rated this content"
              labels.GoodLabel = "Good"
              labels.BadLabel = "Bad"
              labels.FeedbackHeader = "How would you rate this content?"
              labels.UserCommentsHeader = "Enter any feedback below."
              labels.CharsRemainingLabel = "Remaining Characters: "
 </code>
   7. Create a Try/Catch around the GetContentRating method. This allows you to catch any exceptions and helps when debugging. 
 <code>
              Try
                 str = ratingApi.GetContentRating(CInt(txtId.Text), Me.Page, "", labels, ContentAPI.RatingGraphDisplayType.Horizontal, _
                      ContentAPI.RatingGraphDisplayType.Horizontal, 10, Drawing.Color.Aqua, Drawing.Color.Red, Drawing.Color.Black)
 </code>
   8. Display the ratings.
 <code>           
              If str.Length &gt; 0 Then
                 lblResult.Text = str
              Else
                 lblResult.Text = "No content rating information available"
              End If
 </code>
   9. If there is an error, let the user know what happened.
 <code>
              Catch ex As Exception
                  lblResult.Text = ex.Message
              End Try
 
          End Sub
 </code>
	</example>
	<remarks>Note that the ContentRating server control nicely wraps this function.</remarks>
</member><member name="M:Ektron.Cms.API.Content.ContentRating.GetContentRatingResults(System.Int64,System.DateTime,System.DateTime)">
	<summary>
 Returns a weakly typed dataset (Username - String, RatingDate - DateTime, Rating - int, Comments - String) representing ratings on particular
 content from the range of StartDate to EndDate. In order to get the full range of ratings, pass DateTime.Min and DateTime.Max as arguments.
 </summary>
	<param name="contentID">The numeric ID associated with the content block whose ratings are being queried.</param>
	<param name="startDate">The start date of a range of dates to query over.</param>
	<param name="endDate">The end date of a range of dates to query over.</param>
	<returns>(Username - String, RatingDate - DateTime, Rating - int, Comments - String)</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.ContentRating.GetContentRatingStatistics(System.Int64,System.DateTime,System.DateTime)">
	<summary>
 Returns a collection with keys as ordinal numbers and frequency as the value. That is, {1=&gt;3,2=&gt;7,...,9=&gt;12}. Rating results are bounded by startDate and endDate.<para></para>
 This function is overloaded. See Also: GetContentRatingStatistics(Long Long String)
 </summary>
	<param name="contentID">The numeric ID associated with the content block being rated.</param>
	<param name="startDate">Bounds the result set by only ratings that occurred after this date.</param>
	<param name="endDate">Bounds the result set by only ratings that occurred before this date.</param>
	<returns>Returns a collection of data with keys "total" =&gt; number of ratings, "sum" =&gt; sum of all ratings, "r1, "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9". </returns>
	<remarks>Note that average rating = sum/total.</remarks>
</member><member name="M:Ektron.Cms.API.Content.ContentRating.GetContentRatingStatistics(System.Int64,System.Int64,System.String)">
	<summary>
 Returns a collection with keys as ordinal numbers and frequency as the value. That is, {1=&gt;3,2=&gt;7,...,9=&gt;12}. Rating results are bounded by startDate and endDate.<para></para>
 This function is overloaded. See Also: GetContentRatingStatistics(Long DateTime DateTime)
 </summary>
	<param name="contentid">The numeric ID associated with the content block being rated.</param>
	<returns>Returns a collection of data with keys "total" =&gt; number of ratings, "sum" =&gt; sum of all ratings, "r1, "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9". </returns>
	<remarks>Note that average rating = sum/total.</remarks>
</member><member name="M:Ektron.Cms.API.Content.ContentRating.PurgeContentRatings(System.Int64,System.DateTime,System.DateTime)">
	<summary>
 Purges all ratings of a particular content block over a defined date/time range. 
 </summary>
	<param name="contentid">The ID of the content that is having its ratings purged.</param>
	<param name="startDate">The beginning of the date range of content to be purged.</param>
	<param name="endDate">The end of the date range of content to be purged.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.AddXmlConfiguration(Microsoft.VisualBasic.Collection)">
	<summary>
 Adds an XML configuration for XML oriented content.
 </summary>
	<param name="pagedata">XML configuration data</param>
	<returns>A numeric value (Long).</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.AddContent(System.String,System.String,System.String,System.String,System.String,System.String,System.Int64,System.Object,System.Object,System.Object)">
	<summary>
 Adds Content to the CMS. Upon successful completion, the CMS returns a Content ID. When content is added using this method, Web Alerts are <b>not</b> sent.<para></para>
		<i>See Also:</i> The Example section.
 </summary>
	<param name="ContentTitle">Title of content to add.</param>
	<param name="ContentComment">Comments about the content being added.</param>
	<param name="ContentHtml">Content HTML to display.</param>
	<param name="SearchText">Search Text. This parameter allows for upgrades from CMS300. If you did not upgrade from CMS300, leave blank.</param>
	<param name="SummaryHtml">A summary of the HTML content.</param>
	<param name="ContentLanguage">The language to which the content is assigned.</param>
	<param name="FolderId">Folder in which to place the content.</param>
	<param name="GoLive">The date the content goes live on the site.</param>
	<param name="EndDate">The date the content stops appearing on the site.</param>
	<param name="MetaInfoXml">Meta Info XML</param>
	<returns>Long - ID of newly created content.</returns>
	<example>
 The following example shows how to create a Web page from which a user can add content  
 to the CMS. This example uses some standard drag and drop controls and a small section of VB code 
 utilizing the AddContent method. This method uses the InternalAdmin to add the content. In the first section, 
 we will deal with the standard drag and drop controls. In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, add a Label with the following information.
       <c>&lt;asp:Label ID="Label1" runat="server" Text="Content Title: "&gt;&lt;/asp:Label&gt;</c>
   2. Add a text box with the following information.
       <c>&lt;asp:TextBox ID="txtTitle" runat="server"&gt;&lt;/asp:TextBox&gt;</c>
   3. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the Title Box.
       <c>&lt;asp:RequiredFieldValidator ID="rfvTitle" runat="server" ControlToValidate="txtTitle"</c>
			<c>ErrorMessage="Please enter content title"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add a couple of breaks for spacing purposes.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add another label for the content text box.
       <c>&lt;asp:Label ID="Label2" runat="server" Text="Content Text: " Width="87px"&gt;&lt;/asp:Label&gt;</c>
   6. Add the text box where the content is entered. This is a MultiLine text box.
       <c>&lt;asp:TextBox ID="txtContent" runat="server" Height="105px" TextMode="MultiLine" Width="336px"&gt;&lt;/asp:TextBox&gt;</c>
   7. Add a some more breaks for spacing purposes.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
   8. Add a label for to show where to enter the Folder ID.
       <c>&lt;asp:Label ID="Label3" runat="server" Text="Folder Id: " Width="65px"&gt;&lt;/asp:Label&gt;</c>
   9. Add one last text box for the user to enter the Folder ID where the content will be stored. 
      By default the text box is set to 0 (zero) which is the root folder.
       <c>&lt;asp:TextBox ID="txtFolderId" runat="server" Width="44px"&gt;0&lt;/asp:TextBox&gt;</c>
  10. Add another RequiredFieldValidator control. This validates that information is entered into the text box.
      \Note: This does not validate that the folder actually exists in the CMS.
       <c>&lt;asp:RequiredFieldValidator ID="rfvFolderId" runat="server" ControlToValidate="txtFolderId"</c>
			<c>ErrorMessage="Please enter the Folder Id"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
  11. Add a break.
       <c>&lt;br /&gt;</c>
  12. Add a label to describe the type of information that needs to be add to the folder ID box.
       <c>&lt;asp:Label ID="Label4" runat="server" Font-Italic="True" Text="Enter a valid Folder ID from the workarea, 0 points to the root folder."</c>
			<c>Width="483px"&gt;&lt;/asp:Label&gt;</c>
  13. Add two more breaks.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
  14. Add a button. We will set the button click event in the code behind.
       <c>&lt;asp:Button ID="btnAdd" runat="server" Text="Add" /&gt;</c>
  15. Add two last breaks.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
  16. Add a results label that lets a user know if the add succeeded.
       <c>&lt;asp:Label ID="lblResult" runat="server"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
 <code>
    Protected Sub btnAdd_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnAdd.Click
 </code>
   2. Create an object for the content API.
 <code>
        Dim contentApi As New Ektron.Cms.API.Content.Content
 </code>
   3. Check to make sure the folder ID is numeric.
 <code>
            If Not IsNumeric(txtFolderId.Text) Then
                lblResult.Text = "Invalid folder ID"
                Exit Sub
            End If
 </code>
   4. Create an starting content ID of 0 (zero). When the content is added, it will be assigned an ID.  
 <code>
        Dim ID As Integer = 0
 </code>
   5. Create a Try/Catch around the AddContent method. This allows you to catch any exceptions and helps when debugging. 
 <code>
             Try
                ID = contentApi.AddContent(txtTitle.Text, "Content added by Example.aspx", txtContent.Text, "", _
 "", "1033", CInt(txtFolderId.Text), "", "", Nothing)
 </code>
   6. Add an If statement that lets the user know whether the content was added and the ID of the content.
 <code>
                If (ID &lt;&gt; 0) Then
                    lblResult.Text = "The above content was added into CMS400.NET with ContentID = " &amp; ID
                End If
 </code>
   7. If there is an error, let the user know what happened.
 <code>
            Catch ex As Exception
                 lblResult.Text = ex.Message
            End Try
        
    End Sub     
 </code>
   8. Add a page load event so that lblResult.Text is blank when the page first loads.
 <code>   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
       lblResult.Text = ""
    End Sub            
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.AddContent(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int64,System.Object,System.Object,System.Object)">
	<summary>
 Adds Content to the CMS.
 
 Unlike other AddContent methods, this method's parameters let you specify user information
 (UserName, password, domain) if no one is logged in. The user information set in the
 parameters is applied to the content. 
 If you want to add content and pass logged-in user information, use Dim api As New Ektron.Cms.ContentAPI.
 Upon successful completion, the CMS returns a Content ID.
 When content is added using this method, Web Alerts are <b>not</b>
 sent.
 Note that the username and password parameters were used in the old AddContent 
 method that used the class Ektron.Cms.UI.CommonUI.ApplicationAPI.
 
 </summary>
	<param name="UserName">The name of the user
                        associated with this method.
                        \See also the <b>Summary</b>,
                        above. </param>
	<param name="Password">The password of the user
                        associated with this method.
                        \See also the <b>Summary</b>,
                        above. </param>
	<param name="Domain">The domain of the user
                      associated with this method.
                      \See also the <b>Summary</b>,
                      above. </param>
	<param name="ContentTitle">Title of content to add.</param>
	<param name="ContentComment">Comments about the content
                              being added.</param>
	<param name="ContentHtml">The content being added as
                           HTML.</param>
	<param name="SearchText">Search Text. This parameter
                          allows for upgrades from
                          CMS300. If you did not upgrade
                          from CMS300, leave blank.</param>
	<param name="SummaryHtml">A summary of the HTML content.</param>
	<param name="ContentLanguage">The language of the content
                               being added.</param>
	<param name="FolderId">ID of the folder in which to
                        place the content.</param>
	<param name="GoLive">If set, the date when the
                      content goes live on the site.</param>
	<param name="EndDate">If set, the date when the
                       content stops appearing on the
                       site.</param>
	<param name="MetaInfoXml">Meta Info XML</param>
	<returns>
 \Long - ID of newly created content.
 </returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.AddContentWithWebAlert(System.String,System.String,System.String,System.String,System.String,System.String,System.Int64,System.Object,System.Object,System.Object,System.Int64,System.Int64,System.Collections.Generic.List{System.Int64})">
	<summary>
 This method lets you add content to the CMS then sends a Web
 alert to the subscription lists specified in the
 SubscriptionList parameter.
 </summary>
	<param name="ContentTitle">Title of content to add.</param>
	<param name="ContentComment">Comments about the content
                              being added.</param>
	<param name="ContentHtml">The content being added as
                           HTML.</param>
	<param name="SearchText">Search Text. This parameter
                          allows for upgrades from
                          CMS300. If you did not
                          upgrade from CMS300, leave
                          blank.</param>
	<param name="SummaryHtml">A summary of the HTML
                           content.</param>
	<param name="ContentLanguage">The language of the content
                               being added.</param>
	<param name="FolderId">ID of the folder in which to
                        place the content.</param>
	<param name="GoLive">If set, the date when the
                      content goes live on the
                      site.</param>
	<param name="EndDate">If set, the date when the
                       content stops appearing on
                       the site.</param>
	<param name="MetaInfoXml">Meta Info XML</param>
	<param name="XmlID">XML ID</param>
	<param name="TemplateID">Template ID</param>
	<param name="SubscriptionList">The ID number of all
                                subscriptions to which a Web
                                alert is sent when this
                                content is added.</param>
	<returns>
 \Long - ID of newly created content. 
 </returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.AddContent(System.String,System.String,System.String,System.String,System.String,System.String,System.Int64,System.Object,System.Object,System.Object,System.Int64)">
	<summary>
 Adds Content to the CMS and allows you to assign it a Content ID. Once the content is added the new ID is returned. When content is added using this method, Web Alerts are <b>not</b> sent.
 </summary>
	<param name="ContentTitle">Title of content to add.</param>
	<param name="ContentComment">Comments about the content being added.</param>
	<param name="ContentHtml">Content HTML to display.</param>
	<param name="SearchText">Search Text. This parameter allows for upgrades from CMS300. If you did not upgrade from CMS300, leave blank.</param>
	<param name="SummaryHtml">A summary of the HTML content.</param>
	<param name="ContentLanguage">The language to which the content is assigned.</param>
	<param name="FolderId">Folder in which to place the content.</param>
	<param name="GoLive">The date the content goes live on the site.</param>
	<param name="EndDate">The date the content stops appearing on the site.</param>
	<param name="MetaInfoXml">Meta Info XML</param>
	<param name="ContentID">The ID you would like to assign the content.</param>
	<returns>Long - ID of newly created content.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.AddContent(System.String,System.String,System.String,System.String,System.String,System.String,System.Int64,System.Object,System.Object,System.Object,System.Int64,System.Int64)">
	<summary>
 Adds Content to the CMS and allows you to assign the content an XML ID and Template ID. Once the content is added the new Content ID is returned. When content is added using this method, Web Alerts are <b>not</b> sent.
 </summary>
	<param name="ContentTitle">Title of content to add.</param>
	<param name="ContentComment">Comments about the content being added.</param>
	<param name="ContentHtml">Content HTML to display.</param>
	<param name="SearchText">Search Text. This parameter allows for upgrades from CMS300. If you did not upgrade from CMS300, leave blank.</param>
	<param name="SummaryHtml">A summary of the HTML content.</param>
	<param name="ContentLanguage">The language to which the content is assigned.</param>
	<param name="FolderId">Folder in which to place the content.</param>
	<param name="GoLive">The date the content goes live on the site.</param>
	<param name="EndDate">The date the content stops appearing on the site.</param>
	<param name="MetaInfoXml">Meta Info XML</param>
	<param name="XmlID">XmlID</param>
	<param name="TemplateID">Template ID</param>
	<returns>Long - ID of newly created content.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.AddContent(System.String,System.String,System.String,System.String,System.String,System.String,System.Int64,System.Object,System.Object,System.Object,System.Int64,System.Int64,System.Boolean)">
	<summary>
 Adds Content to the CMS and allows you to assign the content an XML ID and Template ID. Once the content is added the new Content ID is returned. When content is added using this method, Web Alerts are <b>not</b> sent.
 </summary>
	<param name="ContentTitle">Title of content to add.</param>
	<param name="ContentComment">Comments about the content being added.</param>
	<param name="ContentHtml">Content HTML to display.</param>
	<param name="SearchText">Search Text. This parameter allows for upgrades from CMS300. If you did not upgrade from CMS300, leave blank.</param>
	<param name="SummaryHtml">A summary of the HTML content.</param>
	<param name="ContentLanguage">The language to which the content is assigned.</param>
	<param name="FolderId">Folder in which to place the content.</param>
	<param name="GoLive">The date the content goes live on the site.</param>
	<param name="EndDate">The date the content stops appearing on the site.</param>
	<param name="MetaInfoXml">Meta Info XML</param>
	<param name="XmlID">XmlID</param>
	<param name="TemplateID">Template ID</param>
	<param name="CleanHtml">Clean ContentHTML and SummaryHTML with tidy.</param>
	<returns>Long - ID of newly created content.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.CheckOutContent(System.Int64)">
	<summary>
 This will check the content out to the current user if the content is currently checked in and the user has privileges to check it out.
 </summary>
	<param name="ContentId">Id of the content to check out</param>
	<returns>A Boolean representing the success of the check out</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.CopyContentToFolder(System.String,System.Int64,System.String,System.Boolean)">
	<summary>
 Copy the content into required folder.
 </summary>
	<param name="Id">Content ID</param>
	<param name="FID">Folder ID</param>
	<param name="Lang"></param>
	<returns>Ektron.Cms.ContentData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.DeleteContentItem(System.Int64)">
	<summary>
 Delete the content by the content's ID.<para></para>
		<i>See Also:</i> The Example section.
 </summary>
	<param name="Id">The content's ID.</param>
	<returns>Boolean - returns false if the delete succeeds.</returns>
	<example>
 The following example shows how to create a Web page from which a user can delete content by entering 
 its ID into a text box. This example uses some standard drag and drop controls and a small section of VB code 
 utilizing the DeleteContentItem method. This method uses the InternalAdmin to delete the content. In the first section,  
 we will deal with the standard drag and drop controls. In the second, we'll deal with the code behind.<para></para>
		<pre>
  1. Between the form tags, add a Label with the following information.
       <c>&lt;asp:Label ID="Label1" runat="server" Text="Content ID: "&gt;&lt;/asp:Label&gt;</c>
  2. Add a text box for the user to enter the content ID.
       <c>&lt;asp:TextBox ID="txtContentId" runat="server" Width="44px"&gt;&lt;/asp:TextBox&gt;</c>
  3. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the Content ID box.
       <c>&lt;asp:RequiredFieldValidator ID="rfvContentId" runat="server" ControlToValidate="txtContentId"</c>
			<c>ErrorMessage="Please enter content ID"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
  4. Add a couple of breaks for spacing purposes.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
  5. Add a button to delete the content. We will set the button click event in the code behind.
       <c>&lt;asp:Button ID="btnDelete" runat="server" Text="Delete" /&gt;</c>
  6. Add a couple of more breaks for spacing purposes.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
  7. Add a results label that lets a user know if the add succeeded.
       <c>&lt;asp:Label ID="lblResult" runat="server"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
 <code>
    Protected Sub btnDelete_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnDelete.Click
 </code>
   2. Create an object for the content API.
 <code>
        Dim contentApi As New Ektron.Cms.API.Content.Content
 </code>
   3. Check to make sure the content ID is numeric.
 <code>
            If Not IsNumeric(txtContentId.Text) Then
                lblResult.Text = "Invalid content ID"
                Exit Sub
            End If
 </code>
   4. Create an item <i>deleted</i> and set it to true. Note that DeleteContentItem returns false if the delete succeeds.  
 <code>
        Dim deleted As Boolean = True
 </code>
   5. Create a Try/Catch around the DeleteContentItem method. This allows you to catch any exceptions and helps when debugging. 
 <code>
        Try
           deleted = contentApi.DeleteContentItem(CInt(txtContentId.Text))
 </code>
 6. Add an If statement that lets the user know whether the content was deleted.
 <code>
           If Not deleted Then
               lblResult.Text = "The above content was deleted from CMS400.Net"
           End If
 </code>
 7. If there is an error, let the user know what happened.
 <code>
        Catch ex As Exception
            lblResult.Text = ex.Message
        End Try
 
    End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.DeleteXmlConfiguration(System.Int64)">
	<summary>
 Deletes an XML configuration.
 </summary>
	<param name="Id">XML configuration ID</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetAddViewLanguage(System.Int64)">
	<summary>
 Loads all the languages from the system for a given content ID and populates the Add/View drop down box with flag set on each item.
 </summary>
	<param name="Id">Content ID</param>
	<returns>Ektron.Cms.LanguageData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetAllComments(System.Int64,System.Int64,System.Int64,System.String,System.Int64,System.String)">
	<summary>
 Loads all of the comments.
 </summary>
	<param name="KeyId">key ID</param>
	<param name="CommentId">Comment ID</param>
	<param name="RefId">Reference ID, (content or forms)</param>
	<param name="RefType">Reference type, C = content or T = Task</param>
	<param name="UserId">The user ID</param>
	<param name="OrderBy">The order of the comments</param>
	<returns>Ektron.Cms.CommentData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetAllTemplates(System.String)">
	<summary>
 Loads all of the templates.
 </summary>
	<param name="OrderBy">Order by clause</param>
	<returns>Ektron.Cms.TemplateData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetCommunityTemplate(Ektron.Cms.Common.EkEnumeration.TemplateType)">
	<summary>
 Loads template for the given community type.
 </summary>
	<param name="type">type of template</param>
	<returns>Ektron.Cms.TemplateData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetAllUnassignedItemApprovals(System.Int64,System.String)">
	<summary>
 Returns all of the unassigned user/groups for a given content ID.
 </summary>
	<param name="Id">The content's ID</param>
	<param name="ItemType">The type of user</param>
	<returns>Ektron.Cms.ApprovalData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetAllXmlConfigurations(System.String)">
	<summary>
 Reads all of the XML configurations.
 </summary>
	<param name="OrderBy">Order by clause</param>
	<returns>Ektron.Cms.XmlConfigData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetAllXmlConfigurations(System.String,System.Nullable{Ektron.Cms.Common.EkEnumeration.XmlConfigType})">
	<summary>
 Reads all of the XML configurations.
 </summary>
	<param name="OrderBy">Order by clause</param>
	<returns>Ektron.Cms.XmlConfigData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetChildContent(System.Int64)">
	<summary>
 Loads all of the content for the given folder.
 </summary>
	<param name="Id">The folder's ID.</param>
	<returns>Ektron.Cms.ContentData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetChildContent(System.Int64,System.Boolean)">
	<summary>
 Loads all of the content for the given folder.
 </summary>
	<param name="Id">The folder's ID.</param>
	<param name="Recursive">True = recursive look up. False = none.  Note:  This parameter is not functional.  Please use Content.GetList() api for recursive support. </param>
	<returns>Ektron.Cms.ContentData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetChildContent(System.Int64,System.Boolean,System.String)">
	<summary>
 Loads all of the content for the given folder.
 </summary>
	<param name="Id">The folder's ID.</param>
	<param name="Recursive">True = recursive look up. False = none.  Note:  This parameter is not functional.  Please use Content.GetList() api for recursive support. </param>
	<param name="OrderBy">An order by clause. Choices are:
   * <b>id</b> - the content ID.
   * <b>title</b> - the title of the content item.
   * <b>status</b> - whether the content is checked-in, published, checked-out, etc.
   * <b>language</b> - the language ID of the content.
   * <b>datecreated</b> - the date the content was created.
   * <b>datemodified</b> - the date the content was last modified.
   * <b>userid</b> - the ID of the user who last worked with the content.
 </param>
	<returns>Ektron.Cms.ContentData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetChildContent(System.Int64,System.Boolean,System.String,Ektron.Cms.PagingInfo)">
	<summary>
 Loads all of the content for the given folder.
 </summary>
	<param name="Id">The folder's ID.</param>
	<param name="Recursive">True = recursive look up. False = none.</param>
	<param name="OrderBy">An order by clause. Choices are:
   * <b>id</b> - the content ID.
   * <b>title</b> - the title of the content item.
   * <b>status</b> - whether the content is checked-in, published, checked-out, etc.
   * <b>language</b> - the language ID of the content.
   * <b>datecreated</b> - the date the content was created.
   * <b>datemodified</b> - the date the content was last modified.
   * <b>userid</b> - the ID of the user who last worked with the content.
 </param>
	<param name="pagingInfo">paging Information for the retrieval</param>
	<returns>Ektron.Cms.ContentData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetContentByHistory(System.Int64)">
	<summary>
 Retrieves the corresponding content by the history ID.
 </summary>
	<param name="Id">The history ID</param>
	<returns>Ektron.Cms.ContentData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetContent(System.Int64)">
	<summary>
 Loads the content details using the content ID.
 Only returns content of type CMSContentType.Content and CMSContentType.Assets.
 </summary>
	<param name="Id">The content ID</param>
	<returns>Ektron.Cms.ContentData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetContent(System.Int64,Ektron.Cms.ContentAPI.ContentResultType)">
	<summary>
 Loads the content details using the content ID.
 Only returns content of type CMSContentType.Content and CMSContentType.Assets.
 </summary>
	<param name="Id">The content ID</param>
	<param name="Type"></param>
	<returns>Ektron.Cms.ContentData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetContentDisplayLink(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Function takes in the required information about the string then will decide the best link to use to display the content. It decides between Linkit,
 a generated quicklink or just the template file.
 </summary>
	<param name="ContentType">Integer describing the content's type (word doc, multimedia, etc.)</param>
	<param name="ContentId">A string value of the content's ID number</param>
	<param name="ContentLanguage">A string value of the content's language number</param>
	<param name="FolderId">A string value of the content's folder ID number</param>
	<param name="host">A string value of the host name to build the link out of</param>
	<param name="StagingDomain">A string value of the content's staging domain</param>
	<param name="ProductionDomain">A string value of the content's production domain</param>
	<returns>The page link as a String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetContentForEditing(System.Int64)">
	<summary>
 Loads the content details with checkout mode.
 </summary>
	<param name="Id">The content ID.</param>
	<returns>Ektron.Cms.ContentEditData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetContentReport(Microsoft.VisualBasic.Collection)">
	<summary>
 Loads the content data for the given constraints.
 </summary>
	<param name="pagedata">required report data</param>
	<returns>Ektron.Cms.ContentData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetContentReport(Ektron.Cms.ContentReportData)">
	<summary>
 Loads the content data for the given constraints.
 </summary>
	<param name="ContReportData">required report data</param>
	<returns>Ektron.Cms.ContentData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetContentState(System.Int64)">
	<summary>
 Loads the content's details.
 </summary>
	<param name="Id">The content's ID</param>
	<returns>Ektron.Cms.ContentStateData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetContentStatus(System.Int64)">
	<summary>
 This will return a single letter string which is the status of the piece of content. The letters returned are the same letters
 used in the Workarea view.
 </summary>
	<param name="ContentId">Id of the content to return the status of</param>
	<returns>A string with the single letter status of the content</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetExpireContent(Microsoft.VisualBasic.Collection)">
	<summary>
 Loads all of the expired content.
 </summary>
	<param name="pagedata">Required data for the report as a value, key pair</param>
	<returns>Ektron.Cms.ContentData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetDomain(System.Int64)">
	<summary>
 Gets web domain for a piece of content.
 </summary>
	<param name="ContentId">The content's ID</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetContent(Ektron.Cms.Common.ContentRequest,System.Web.UI.Page)">
	<summary>
 Returns list of contents using content request object.
 Only returns content of type CMSContentType.Content and CMSContentType.Assets.
 </summary>
	<param name="req">ContentRequest</param>
	<param name="page">Page reference</param>
	<returns>ContentResult</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.MoveContentToFolder(System.String,System.String,System.Int64)">
	<summary>
 Moves content to a folder.
 </summary>
	<param name="cId">The content's ID</param>
	<param name="cLanguages">The content's language</param>
	<param name="FID">The folder's ID</param>
	<returns>Ektron.Cms.ContentData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.PublishContent(System.Int64,System.Int64,System.Int32,System.String,System.Int64,System.String)">
	<summary>
 Function takes in information about the content to be checked in and published. This goes through the normal approval chain. The content must be
 in a checked out state to the current logged in user for this to succeed. 
 </summary>
	<param name="ContentId">Numeric value of the content's ID. (Long)</param>
	<param name="FolderId">Numeric value of the content folder's ID. (Long)</param>
	<param name="ContentLanguage">Integer value of the content's language ID.</param>
	<param name="dontCreateTask">Set to <b>""</b> to create a task for this submit. If anything else appears, a task is not created.</param>
	<param name="UserID">The ID of the user assigning the task (current user). This is needed only when the dontCreateTask property is set to "". Otherwise, this property is ingnored.</param>
	<param name="TaskTitle">Title for the task. This is needed only when the dontCreateTask property is set to "". Otherwise, this property is ingnored.</param>
	<returns>A Boolean indicating success or not.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.RenameContent(System.Int64,System.String)">
	<summary>
 Renames the content.
 </summary>
	<param name="cId">The content's ID</param>
	<param name="title">The content's new title</param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.RestoreHistoryContent(System.Int64)">
	<summary>
 Restores the content to a particular version of content.
 </summary>
	<param name="Id">The content's history ID</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetContent(System.Int64,Ektron.Cms.Content.EkContent.ContentResultType)">
	<summary>
 Using the content's ID and the ContentType to get the content and return it as ContentData.  
 Only returns content of type CMSContentType.Content and CMSContentType.Assets. <para></para>
		<i>See Also:</i> The Example section. 
 </summary>
	<param name="Id">The ID of the content to be returned.</param>
	<param name="ContentType">Whether the content is published or staged. Enter either:<para></para>Ektron.Cms.Content.EkContent.ContentResultType.Published<para></para>or<para></para>Ektron.Cms.Content.EkContent.ContentResultType.Staged</param>
	<returns>ContentData</returns>
	<example>
 The following example shows how to create a Web page from which a user can view a content block and its title by entering the content ID into a text box. 
 This example uses some standard drag and drop controls and a small section of VB code utilizing the GetContent method. This method uses the 
 InternalAdmin to get the content. In the first section, we will deal with the standard drag and drop controls. In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, add a Label with the following information.
        <c>&lt;asp:Label ID="Label1" runat="server" Text="Content ID: "&gt;&lt;/asp:Label&gt;</c>
   2. Add a text box for the user to enter the content ID.
       <c>&lt;asp:TextBox ID="txtContentId" runat="server" Width="44px"&gt;&lt;/asp:TextBox&gt;</c>
   3. From the Validation control menu, add a RequiredFieldValidator control. This validates that something appears in the Content ID box.
       <c>&lt;asp:RequiredFieldValidator ID="rfvContentId" runat="server" ControlToValidate="txtContentId"</c>
			<c>ErrorMessage="Please enter content ID"&gt;&lt;/asp:RequiredFieldValidator&gt;</c>
   4. Add a couple of breaks for spacing purposes.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
   5. Add a button to get the content. We will set the button click event in the code behind.
       <c>&lt;asp:Button ID="btnGetContent" runat="server" Text="Get Content" /&gt;</c>
   6. Add a couple of more breaks for spacing purposes.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
   7. Add a results label where the content will appear. This also serves as a place to display an error if necessary.
       <c>&lt;asp:Label ID="lblResult" runat="server" Width="175px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
 <code>
    Protected Sub btnGetContent_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGetContent.Click
 </code>
   2. Create an object for the content API.
 <code>
        Dim contentApi As New Ektron.Cms.API.Content.Content
 </code>
   3. Check to make sure the content ID is numeric.
 <code>
            If Not IsNumeric(txtContentId.Text) Then
                lblResult.Text = "Invalid content ID"
                Exit Sub
            End If
 </code>
   4. Create an object for to hold the content data that is returned.  
 <code>
        Dim contentItem As Ektron.Cms.ContentData
 </code>
   5. Create a Try/Catch around the GetContent method. This allows you to catch any exceptions and helps when debugging. 
 <code>
        Try
           contentItem = contentApi.GetContent(CInt(txtContentId.Text), Ektron.Cms.Content.EkContent.ContentResultType.Published)
 </code>
   6. Add an If statement that displays the content or lets the user know if the content ID does not exist.
 <code>
           If (contentItem Is Nothing) Then
              lblResult.Text = "ContentBlock does not exist"
           Else
              lblResult.Text = contentItem.Title &amp; "&lt;br/&gt;" &amp; contentItem.Html
           End If
 
 </code>
   7. If there is an error, let the user know what happened.
 <code>
        Catch ex As Exception
            lblResult.Text = ex.Message
        End Try
 
    End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.SubmitForDelete(System.Int64,System.Int64)">
	<summary>
 Delete the content by the content's Id and folder Id.
 </summary>
	<param name="cId">The content's Id</param>
	<param name="fId">The content's Folder Id</param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.UpdateXmlConfiguration(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the XML configuration details.
 </summary>
	<param name="pagedata">The XML configuration details</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.UpdatexmlCollectionPackage(Microsoft.VisualBasic.Collection)">
	<summary>
 Updates the XML collection package.
 </summary>
	<param name="package">The XML details</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.UndoCheckout(System.Int64)">
	<summary>
 This undoes the checkout for a piece of content which is checked out to the current user.
 </summary>
	<param name="ContentId">Id of the content for which to undo check out</param>
	<returns>A Boolean representing the success of the undo.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.UpdateContentMetaData(System.Int64,System.Int64,System.String)">
	<summary>
 Updates a single piece of content metadata
 </summary>
	<param name="ContentID">The Content ID</param>
	<param name="MetaID">The Metadata Type ID</param>
	<param name="MetaText">The new text to assign</param>
	<returns>boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.RelicateXmlConfiguration(System.Int64,System.String)">
	<summary>
		<b>This method is obsolete. The recommended alternative is ReplicateXmlConfiguration.</b><para></para>
 Replicate the XML configuration.
 </summary>
	<param name="Id">The inherited XML ID</param>
	<param name="Title">Title</param>
	<returns>Long</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.ReplicateXmlConfiguration(System.Int64,System.String)">
	<summary>
 Replicate the XML configuration.
 </summary>
	<param name="Id">The inherited XML ID.</param>
	<param name="Title">The title of the XML configuration.</param>
	<returns>A numeric value. (Long)</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.SaveContent(Ektron.Cms.ContentEditData)">
	<summary>
 Updates the checked out content block. Only following
 properties can be updated:
   * contentData.Title
   * contentData.Teaser
   * contentData.Comment
   * contentData.GoLive
   * contentData.Html
   * contentData.EndDate
   * contentData.EndDateAction
   * contentData.ManualAlias
 </summary>
	<param name="contentEditData">_nt_</param>
	<returns>
 False if successful
 </returns>
	<remarks>
 Content must be in the checked out state. If you are updating
 an existing asset you mus make sure to set the FileChanged
 property to False in the contentEditData
 </remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.AddAsset(System.IO.Stream,Ektron.Cms.AssetUpdateData)">
	<summary>
 Adds an asset to the CMS.
 </summary>
	<param name="assetdata">Asset details in AssetUpdateData</param>
	<param name="inputStream">Input Stream pointing to the file to be uploaded</param>
	<returns>Content Id</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.EditAsset(System.IO.Stream,Ektron.Cms.AssetUpdateData)">
	<summary>
 Edits an asset that was uploaded into the CMS.
 </summary>
	<param name="assetdata">Asset details in AssetUpdateData</param>
	<param name="inputStream">Input Stream pointing to the file to be uploaded if file is being overwritten</param>
	<returns>A Boolean indicating success, False for success</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Content.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.ContentProperty})">
	<summary>
 Returns a list of content based upon the supplied criteria.
 </summary>
	<param name="criteria">criteria used to restrict content retrieval.</param>
	<returns></returns>
</member><member name="M:Ektron.Cms.API.Content.Content.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.Common.ContentProperty},System.Boolean)">
	<summary>
 Returns a list of content based upon the supplied criteria.
 </summary>
	<param name="criteria">criteria used to restrict content retrieval.</param>
	<param name="folderRecursive">If true, retrieves all recursive folders based upon folderId in criteria filter.  This parameter is only relative if the criteria includes a FolderId filter.</param>
	<returns></returns>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetBlogData(System.Int64,System.DateTime)">
	<summary>
 Overloaded Method to obtain a BlogData Class. Accepts the
 ID of the blog, as well as the StartDate (as DateTime) 
 for the posts. Returns either a populated BlogData
 class or null (nothing).
 <para></para>
 This function is overloaded. See Also:
   * BlogObject(Long)
   * BlogObject(Long DateTime Integer Integer)
   * BlogObject(FolderData)
 </summary>
	<param name="BlogID">Numeric ID of the blog. This
                      corresponds to the ID of the blog
                      folder.</param>
	<param name="StartDate">The date of the last blog entries to appear. For example, to display blog entries up through 
                         January 1, 2010, enter 1/1/2010.</param>
	<returns>
 Either a populated BlogData class or null (nothing).
 </returns>
	<remarks>
 \ \ 
 </remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetBlogData(System.Int64)">
	<summary>
 Overloaded Method to obtain a BlogData Class. Accepts the
 ID of the blog. Returns either a populated BlogData
 class or null (nothing).<para></para>
 This function is overloaded. See Also:
   * BlogObject(Long DateTime)
   * BlogObject(Long DateTime Integer Integer)
   * BlogObject(FolderData)
 </summary>
	<param name="BlogID">Numeric ID of the blog. This
                      corresponds to the ID of the blog
                      folder.</param>
	<returns>
 Either a populated BlogData class or null (nothing).
 </returns>
	<remarks>
 \ \ 
 </remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetBlogData(System.Int64,System.DateTime,System.Int32,System.Int32)">
	<summary>
 Overloaded Method to obtain a BlogData Class. Accepts the
 ID of the blog, the StartDate (as DateTime) for the
 posts, the number of posts visible and the language ID.
 \Returns either a populated BlogData class or null (nothing).<para></para>
 This function is overloaded. See Also:
   * BlogObject(Long)
   * BlogObject(Long DateTime)
   * BlogObject(FolderData)
 </summary>
	<returns>
 Either a populated BlogData class or null (nothing).
 </returns>
	<param name="BlogID">Numeric ID of the blog. This
                      corresponds to the ID of the blog
                      folder.</param>
	<param name="StartDate">The date of the last blog entries to appear. For example, to display blog entries up through 
                         January 1, 2010, enter 1/1/2010.</param>
	<param name="Postsvisible">Integer number of posts to
                            return. Leave as 0 to use the
                            blog setting, or \-1 to return
                            none.</param>
	<param name="LanguageID">Integer ID of the language.</param>
	<remarks>
 \ \ 
 </remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetBlogData(Ektron.Cms.FolderData)">
	<summary>
 \Returns the corresponding blog (if applicable) for a
 complete folderData object. If there is code that already
 leverages our FolderData class, this can piggyback atop it. <b>Returns
 only if the folder is a blog.</b><para></para>
 This function is overloaded. See Also:
   * BlogObject(Long DateTime)
   * BlogObject(Long DateTime Integer Integer)
   * BlogObject(Long)
 </summary>
	<param name="folder_data">A populated FolderData class. (see
                           FolderData)</param>
	<returns>
 A populated BlogData class or nothing
 </returns>
	<remarks>
 \ \ 
 </remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetBlogRoll(System.Int64)">
	<summary>
 Returns a populated blog roll class.
 Accepts a blog ID value.
 See the BlogRoll class for more information.
 </summary>
	<param name="blog_id">Numeric ID of the blog. This corresponds to the 
 folder ID of the blog.</param>
	<returns>A populated BlogRoll class or a null (nothing).</returns>
	<remarks>Developers are advised to check for null prior to using this class.</remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetBlankBlogPostData">
	<summary>
 Returns a blank BlogPostData class.
 Used Primarily in the Workarea.
 </summary>
	<returns>A blank, but not null, BlogPostData class.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetBlogDataForPost(System.Int64)">
	<summary>
 Returns the blog information for a blog post. 
 This contains information about categories, whether comments are enabled, etc.
 Accepts the post ID.
 </summary>
	<param name="post_id">Numeric value of the post ID</param>
	<returns>BlogData class</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetBlogPostData(System.Int64)">
	<summary>
 Gets the Post data for a specific blog post.
 Accepts the ID of the post.
 Will return tags, trackback, pingback, and categories for the post.
 </summary>
	<param name="id">Numeric value of the post ID.</param>
	<returns>BlogPostData Class.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.AddCommentForPost(Ektron.Cms.BlogComment)">
	<summary>
 Adds a post comment to a blog post.
 Accepts a BlogComment class as the input.
 Will return the result of that add action.
 False indicates the action was successful.
 </summary>
	<param name="bcComment">A populated BlogComment class. Title, DisplayName, Comment text, Email are required.</param>
	<returns>A Boolean value indicating whether there was a problem. False indicates the comment was added successfully.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.DeleteBlogPostComment(System.Int64)">
	<summary>
 Delete Blog post comment by providing the comment's ID.
 </summary>
	<param name="postCommentId">Post comment ID.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetBlog(System.String,System.String,System.Int32,System.Int32)">
	<summary>
 Returns a BlogData class for a given path, with parameters.
 This class contains the content for a blog, the post info, the roll, and the categories information.
 See the BlogData class for more information.
 </summary>
	<param name="path">The path of the blog. This is a string value that corresponds to the 
  folder path of the blog.</param>
	<param name="StartDate">The date of the last blog entries to appear. For example, to display blog entries up through 
                         January 1, 2010, enter 1/1/2010.</param>
	<param name="MaxEntries">The total number of posts to return. This is an integer value. <para></para>
 If set to 0, the <c>postsvisible</c> property of the blog is used.<para></para>
 If set to -1, the content is not returned, only the post info for the content.</param>
	<param name="LanguageID">The language ID for the content. An integer value.</param>
	<returns>For a given path, this returns either null or a BlogData class with the associated posts. This also includes the roll, categories, and post information.</returns>
	<remarks>Developers are advised to check for null prior to using.</remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetBlogRoll(System.String)">
	<summary>
 Loads a blog roll for a given path. The path is a string of
 the blog path, ex: <c>\\Media\\Blogs\\MyBlog</c>. This blog
 roll is the list of links for the blog. See the BlogRoll
 class for the properties and usage of the blog roll.<para></para>
 This is an overloaded method. See Also: GetBlogRoll(Long).
 </summary>
	<param name="Path">The path of the blog. This is a string
                    value that corresponds to the folder path
                    of the blog.</param>
	<returns>
 This method returns a populated BlogRoll class or null
 (nothing).
 </returns>
	<remarks>
 When using, developers are advised to check for null prior to
 using. 
 </remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.DeleteBlog(System.Int64)">
	<summary>
 Deletes a blog with a given ID.
 This will delete the blog as well as all posts and comments for the blog.
 BlogID must be greater than 0.
 </summary>
	<param name="BlogID">The numeric ID of the blog. This corresponds to the folder ID of the blog.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.DeletePost(System.Int64)">
	<summary>
 Deletes a post by the post's ID.
 This method will delete all comments associated with the post as well.
 Returns boolean value.
 </summary>
	<param name="post_id">The numeric value of the post ID to delete.</param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.AddPost(System.Int64,Ektron.Cms.ContentData,System.String[],System.Boolean,System.String,System.String)">
	<summary>
 Adds a post to a given blog.
 Accepts a ContentData class as the post content.
 Return new post ID.<para></para>
		<i>See Also:</i> The Example section.
 </summary>
	<param name="blogID">Numeric ID of the blog to which the post is added.</param>
	<param name="PostContent">ContentData class representing the HTML, title, etc.</param>
	<param name="Categories">String Array representing the categories to which this post applies.</param>
	<param name="Pingback">Pingback URL(s) in this post? </param>
	<param name="Tags">String list of tags that applies to this post.</param>
	<param name="TrackbackURL">Trackback URL(s) to notify.</param>
	<returns>Numeric ID of the post created. (Long)</returns>
	<example>
 The following example shows how to create a Web page from which a user can add a blog post. A user enters 
 the blog's ID, post title and content for the post. This example uses some standard drag and drop controls and a small section of VB code 
 utilizing the AddPost method. This method uses the InternalAdmin to add the blog post. In the first section, 
 we will deal with the standard drag and drop controls. In the second, we'll deal with the code behind.<para></para>
		<pre>
   1. Between the form tags, create a table with three rows and three columns.
   2. In the first row, first column, add the following label for the blog ID.
        <c>&lt;asp:Label ID="Label6" runat="server" Text="Blog ID:" Width="76px"&gt;&lt;/asp:Label&gt;</c>
   3. In the first row, second column, add a text box to enter the blog's ID.
        <c>&lt;asp:TextBox ID="txtBlogId" runat="server" Width="55px"&gt;&lt;/asp:TextBox&gt;</c>
   4. In the first row, third column, add a RequiredFieldValidator control from the Validation control menu. This validates that something appears in the blog ID box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvBlogId" runat="server" ControlToValidate="txtBlogId"</c>
			<c>ErrorMessage="Please enter user name"&gt;Please enter blog ID&lt;/asp:RequiredFieldValidator&gt;</c>
   5. In the second row, first column, add the following label for the area to post content.
        <c>&lt;asp:Label ID="Label4" runat="server" Text="Post content:" Width="82px"&gt;&lt;/asp:Label&gt;</c>
   6. In the second row, second column, add text box where the user can enter the blog post's content.
        <c>&lt;asp:TextBox ID="txtPostContent" runat="server" Width="144px"&gt;&lt;/asp:TextBox&gt;</c>
   7. In the second row, third column, add a RequiredFieldValidator control from the Validation control menu. This validates that something appears in the blog post's content box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvPostContent" runat="server" ControlToValidate="txtPostContent"</c>
			<c>ErrorMessage="Please enter first name"&gt;Please enter content to post&lt;/asp:RequiredFieldValidator&gt;</c>
   8. In the third row, first column, add the following label for the blog post's title.
        <c>&lt;asp:Label ID="Label7" runat="server" Text="Post Title: " Width="76px"&gt;&lt;/asp:Label&gt;</c>
   9. In the third row, second column, add text box where the user can enter the blog post's title.
        <c>&lt;asp:TextBox ID="txtPostTitle" runat="server" Width="144px"&gt;Post Title&lt;/asp:TextBox&gt;</c>
  10. In the third row, third column, add a RequiredFieldValidator control from the Validation control menu. This validates that something appears in the blog post's title box.
        <c>&lt;asp:RequiredFieldValidator ID="rfvPostTitle" runat="server" ControlToValidate="txtPostTitle"</c>
			<c>ErrorMessage="Please enter first name"&gt;Please enter title for the content to post&lt;/asp:RequiredFieldValidator&gt;</c>
  11. After the table, add a break and then add a button to submit the blog post.
        <c>&lt;br /&gt;</c>
			<c>&lt;asp:Button ID="btnAdd" runat="server" Text="Add Post" Width="70px" /&gt;</c>
  12. Add a some breaks for spacing purposes.
       <c>&lt;br /&gt;&lt;br /&gt;</c>
  13. Add a results label that lets a user know that the blog post has been added and the blog post's ID.
       <c>&lt;asp:Label ID="lblResult" runat="server" Width="432px"&gt;&lt;/asp:Label&gt;</c>
		</pre>
		<para></para>Add the following information to the code behind of your aspx.vb page.
   1. Add a button click event.
      <code>
        Protected Sub btnAdd_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnAdd.Click
      </code>
   2. Check to make sure the blog ID is numeric.
      <code>
            If Not IsNumeric(txtblogId.Text) Then
                lblResult.Text = "Invalid Blog ID"
                Exit Sub
            End If
      </code>
   3. Create a Try/Catch around the AddPost method. This allows you to catch any exceptions and helps when debugging. 
   4. Create objects for the following items.
      <code>
            Try
               Dim blogApi As New Ektron.Cms.API.Content.Blog
               Dim postContentData As New Ektron.Cms.ContentData
               Dim categories() As String = New String() {}
      </code>
   5. Populate postContentData with the Title and the Content of the blog post.
      <code>
               postContentData.Title = txtPostTitle.text
               postContentData.Html = txtPostContent.Text
      </code>
   6. Create a place holder for blog post's ID using the AddPost method.
      <code>
               Dim postId As Integer
               postId = blogApi.AddPost(CInt(txtBlogId.Text), postContentData, categories, False, "", "")
      </code>
   7. Let the user know the post ID and that it has been added.
      <code>
               lblResult.Text = "A post was made to the blog with post ID " &amp; postId
      </code>
   8. If there is an error, let the user know what happened.
 <code>
            Catch ex As Exception
               lblResult.Text = ex.Message
            End Try
 
     End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.AddBlog(System.Int64,System.String,System.String,System.String,Ektron.Cms.Common.EkEnumeration.BlogVisibility,System.Boolean,System.Boolean,System.Boolean,System.String[],Ektron.Cms.BlogRoll)">
	<summary>
 Adds a blog to the ParentFolderID.
 Accepts standard blog properties.
 Returns the ID of the newly created blog.
 </summary>
	<param name="ParentFolderID"></param>
	<param name="BlogName">Name of the Blog.</param>
	<param name="BlogTitle">Title of the Blog.</param>
	<param name="BlogDescription">Description of the Blog.</param>
	<param name="Visibility">If the blog is public, enter Public. If private, enter Private.</param>
	<param name="EnableComments">Enter True to allow commenting, otherwise enter false.</param>
	<param name="ModerateComments">If commenting is allowed, enter True to moderate comments.</param>
	<param name="RequireAuthentication">If commenting is allowed, require authentication to add comment.</param>
	<param name="Categories">String Array representing the categories for this blog.</param>
	<param name="RollLinks">The Blog's roll links.</param>
	<returns>Numeric value of the blog ID that is greater than 0 (zero).</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.UpdateBlogProperties(Ektron.Cms.BlogData)">
	<summary>
 Updates the properties of a blog.
 Accepts standard blogdata object.
 Returns boolean.
 </summary>
	<param name="blog">Information for the blog. Posts will be ignored, only blog properties will be updated.</param>
	<returns>Boolean value</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetPost(System.Int64,Ektron.Cms.BlogPostData@)">
	<summary>
 Gets a blog post for a given ID.
 Will also return the post information separately (ByRef) in a BlogPostData class.
 Returns ContentData Class.
 </summary>
	<param name="post_id">Numeric ID for the post.</param>
	<param name="PostInfo">BlogPostData class representing the blog specific post info. This is also in the metadata.</param>
	<returns>ContentData class with a ByRef BlogPostData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetPostbyID(System.Int64)">
	<summary>
 Gets a blog post for a given ID.
 Includes trackback, pinback, comments, and other information.
 Returns BlogPostData Class.
 </summary>
	<param name="post_id">Numeric ID for the post.</param>
	<returns>BlogPostData class </returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Blog.GetUserBlog(System.Int64)">
	<summary>
 gets the user blog id
 </summary>
	<param name="UserId">userid</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Asset.GetAssetMgtConfigInfo">
	<summary>
 Loads all of the registered plug-in configuration details. This method is a member of Ektron.Cms.API.Content.Asset
 </summary>
	<returns>Ektron.Cms.AssetConfigInfo()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Asset.GetAssetMgtInfo">
	<summary>
 Loads all of the registered plug-in type details. This method is a member of Ektron.Cms.API.Content.Asset
 </summary>
	<returns>Ektron.Cms.AssetInfoData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Asset.GetAssetSupertypes">
	<summary>
 Loads all of the asset supertypes supported by the documents add-in. This method is a member of Ektron.Cms.API.Content.Asset
 </summary>
	<returns>Ektron.Cms.AssetInfoData()</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Asset.GetViewUrl(System.String,System.Int32)">
	<summary>
 Returns a URL associated with the current asset. This method is a member of Ektron.Cms.API.Content.Asset
 </summary>
	<param name="AssetId">The document's ID (Required)</param>
	<param name="ContentType">The type of the content, such as office documents or managed files or * (all).</param>
	<returns>String</returns>
	<remarks>The Document Management functionality with a valid license is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.API.Content.Asset.GetEditSnippet(System.String,System.Int32)">
	<summary>
 Loads the edit snippet for the given document. Used with the Document Management functionality. This method is a member of Ektron.Cms.API.Content.Asset
 </summary>
	<param name="AssetId">The document's ID (Required)</param>
	<param name="ContentType">The type of the content, such as office documents or managed files or * (all).</param>
	<returns>String</returns>
	<remarks>The Document Management functionality with a valid license is required to perform this operation.</remarks>
</member><member name="M:Ektron.Cms.API.Content.Asset.GetMyAssetMgtID">
	<summary>
 Retrieves the Document Management functionality client ID. This method is a member of Ektron.Cms.API.Content.Asset
 </summary>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Asset.MakeCopyDMSAsset(System.String@,System.String@)">
	<summary>
 Create a copy of a DMS Asset. This method is a member of Ektron.Cms.API.Content.Asset
 </summary>
	<param name="strAssetID">ID associated with the asset</param>
	<param name="strAssetVersion">Version of the asset</param>
	<returns>boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Content.Asset.SetAssetMgtConfigInfo(Ektron.Cms.AssetConfigInfo[])">
	<summary>
 Updates the Document Management configuration information. This method is a member of Ektron.Cms.API.Content.Asset
 </summary>
	<param name="asset_config">The Document Management configuration data</param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.AddTag(Ektron.Cms.TagData@)">
	<summary>
 Saves a tag and returns an ID. If the tag already exists, the existing tag's ID is returned.
 </summary>
	<param name="tag">Tag data to save.</param>
	<returns>The ID of newly created tag or existing tag.</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.AddTagToContent(System.String,System.Int64)">
	<summary>
 Applies a tag to a piece of content. If the tag text does not already exist, it is created.  
 The newly created ID is accessible via the returned TagData. Adds the tag for the current 
 user and the tag is saved under the current site language.
 </summary>
	<param name="tagText">Text of the tag to apply to an object.</param>
	<param name="contentId">ID of the piece of content that is being tagged.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.AddTagToContent(System.String,System.Int64,System.Int64,System.Int32)">
	<summary>
 Applies a tag to a piece of content. If the tag text does not already exist, it is created.  
 The newly created ID is accessible via the returned TagData.
 </summary>
	<param name="tagText">Text of tag to apply to object.</param>
	<param name="contentId">ID of the piece of content that is being tagged.</param>
	<param name="userId">ID of the user applying the tag.</param>
	<param name="languageId">ID of the language the tagText should be saved as. Use -1 for all languages.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.AddTagToCommunityGroup(System.String,System.Int64)">
	<summary>
 Applies a tag to a community group. If the tag text does not already exist, it is created.  
 The newly created ID is accessible via the returned TagData. Adds the tag for the current 
 user and the Tag is saved under the current site language.
 </summary>
	<param name="tagText">Text of tag to apply to object.</param>
	<param name="groupId">ID of the community that is being tagged.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.AddTagToCommunityGroup(System.String,System.Int64,System.Int32)">
	<summary>
 Applies a tag to a community group. If the tag text does not already exist, it is created.  
 Uses the currently logged in user. The newly created ID is accessible via the returned 
 TagData. 
 </summary>
	<param name="tagText">Text of tag to apply to object.</param>
	<param name="groupId">ID of the community group that is being tagged.</param>
	<param name="languageId">ID of the language the tagText should be saved as. Use -1 for all languages.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.AddTagToCommunityGroup(System.String,System.Int64,System.Int64,System.Int32)">
	<summary>
 Applies a tag to a community group. If the tag text does not already exist, it is created.  
 The newly created ID is accessible via the returned TagData. 
 </summary>
	<param name="tagText">Text of the tag to apply to an object.</param>
	<param name="groupId">ID of the community that is being tagged.</param>
	<param name="userId">ID of the user applying the tag.</param>
	<param name="languageId">ID of the language the tagText should be saved as. Use -1 for all languages.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.AddTagToObject(System.String,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
	<summary>
 Applies a tag to an object.  If the tag text does not already exist, it is created.  
 The newly created ID is accessible via the returned TagData.  Adds the tag for the 
 current user and the Tag is saved under the current site language.
 </summary>
	<param name="tagText">Text of the tag to apply to an object.</param>
	<param name="objectType">Type of object represented by objectId.</param>
	<param name="objectId">ID of object that is being tagged.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.AddTagToObject(System.String,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.Int64,System.Int32)">
	<summary>
 Applies a tag to an object.  If the tag text does not already exist, it is created.  
 The newly created ID is accessible via the returned TagData.
 </summary>
	<param name="tagText">Text of the tag to apply to an object.</param>
	<param name="objectType">Type of object represented by objectId.</param>
	<param name="objectId">ID of object that is being tagged.</param>
	<param name="userId">ID of the user applying the tag.</param>
	<param name="languageId">ID of the language the tagText should be saved as.  Use -1 for all languages.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.AddTagToObject(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.Int64,System.Int32)">
	<summary>
 Applies a tag to an object.
 </summary>
	<param name="tagId">Id of the tag to apply to an object.</param>
	<param name="objectType">Type of object represented by objectId.</param>
	<param name="objectId">ID of object that is being tagged.</param>
	<param name="userId">ID of the user applying the tag.</param>
	<param name="languageId">ID of the language the tagText should be saved as.  Use -1 for all languages.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.AddTagToUser(System.String,System.Int64)">
	<summary>
 Applies a Tag to a user.  If the tag text does not already exist, it is created.  
 The newly created ID is accessible via the returned TagData. The Tag is saved under 
 the current site language.
 </summary>
	<param name="tagText">Text of the tag to apply to an object.</param>
	<param name="userId">ID of the user that is being tagged.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.AddTagToUser(System.String,System.Int64,System.Int32)">
	<summary>
 Applies a Tag to a user. If the tag text does not already exist, it is created.  
 The newly created ID is accessible via the returned TagData.
 </summary>
	<param name="tagText">Text of the tag to apply to an object.</param>
	<param name="userId">ID of the user that is being tagged.</param>
	<param name="languageId">ID of language the tag should be saved as.</param>
	<returns>TagData structure representing the applied tag.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.AddTagToUser(System.Int64,System.Int64)">
	<summary>
 Applies a Tag to a user based on a tag's ID and the user's ID.
 </summary>
	<param name="tagId">ID of tag to apply to object.</param>
	<param name="userId">ID of the user that is being tagged.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.SaveTagAsDefault(System.String,System.Int32,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
	<summary>
 Saves a tag to the the object's default list.
 </summary>
	<param name="tagText">The text of the tag.</param>
	<param name="languageId">The ID of the language to which the tag will be assigned.</param>
	<param name="objectType">The type of object.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.RemoveTagAsDefault(System.String,System.Int32,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
	<summary>
 Removes a tag from the object's default tag list.
 </summary>
	<param name="tagText">The text of the tag.</param>
	<param name="languageId">The ID of the tag being removed.</param>
	<param name="objectType">The type of object.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.DeleteTagById(System.Int64)">
	<summary>
 Permanently deletes tag and all associations.  
 Even deletes system tags so this should only be called if user has permission to 
 delete system tags. If deleting tags used by a specific user, use DeleteTagsByUser.
 </summary>
	<param name="tagId">ID of tag to be deleted.</param>
</member><member name="M:Ektron.Cms.API.Community.Tags.DeleteTagOnObject(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.Int64)">
	<summary>
 Deletes a user's tag applied to an object.
 For example, User <b>A</b> has tagged content ID 101 with "CMS" and he now wishes to delete that object tag.
 </summary>
	<param name="tagID">ID of tag to delete.</param>
	<param name="ObjectID">ID of the object to delete tags.</param>
	<param name="ObjectType">The type of object associated with the ObjectId.</param>
	<param name="userId">The user who originally applied the tag and wants to delete it.</param>
	<returns>True if operation was successful.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.DeleteTagsOnUser(System.Int64)">
	<summary>
 Deletes all tags applied to a user.
 To delete tags applied by a given user, use DeleteTagsByUser.
 </summary>
	<param name="userId">ID of the user whose associated tags are being deleted.</param>
	<returns>True if operation was successful.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.DeleteTagsOnContent(System.Int64)">
	<summary>
 Deletes all tags applied to a piece of content.
 </summary>
	<param name="contentId">ID of a content item to delete associated tags.</param>
	<returns>True if operation was successful.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.DeleteTagsOnCommunityGroup(System.Int64)">
	<summary>
 Deletes all tags applied to a community group.
 </summary>
	<param name="groupId">ID of community group that has associated tags you wish to delete.</param>
	<returns>True if operation was successful.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.DeleteTagsOnObject(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
	<summary>
 Deletes all tags applied to an object.
 </summary>
	<param name="ObjectID">ID of the object to delete associated tags.</param>
	<param name="ObjectType">The type of object associated with the ObjectId.</param>
	<returns>True if operation was successful.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.DeleteTagsByUser(System.Int64)">
	<summary>
 Deletes all tags applied by a user.  
 To delete tags applied to a user, use DeleteTagsOnUser.
 </summary>
	<param name="userId">ID of user whose tags are being deleted.</param>
	<returns>True if operation was successful.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Tags.EditTag(Ektron.Cms.TagData@)">
	<summary>
 Updates an existing Tag.
 </summary>
	<param name="tag">Tag data to save.</param>
	<returns>ID of newly created tag or existing tag.</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetAllTagRelatedContent(System.Int64)">
	<summary>
 Returns a list of content related to the supplied content via a common tag.  
 For example, both Content One and Content Two are both tagged with "CMS" and are considered related.
 </summary>
	<param name="contentId">This is the piece of content for which to retrieve related content.</param>
	<returns>Returns array of partially populated ContentData objects.</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetAllTagRelatedUsers(System.Int64)">
	<summary>
 Returns a list of users related to the supplied user via a common tag.  
 For example, both User One and User Two are both tagged 
 with "Engineer" and are considered related.
 </summary>
	<param name="userId">This is the user for which to retrieve related users.</param>
	<returns>Array of partially populated UserData objects.</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetAllTags(Ektron.Cms.PagingInfo)">
	<summary>
 Returns a list of all tags in the system.
 </summary>
	<param name="pagingInfo">Paging information for call.</param>
	<returns>An array of TagData objects.</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetAllTags(Ektron.Cms.TagRequestData,System.Int32@)">
	<summary>
 Returns a list of all tags in the system.
 </summary>
	<param name="request">Contains the parameters for the tags to retrieve.</param>
	<param name="totalTags">Returns the total number of tags available for the requested parameters.</param>
	<returns>Array of TagData objects</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetDefaultTags(Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
	<summary>
 Returns a list of all system defined tags in the system.
 </summary>
	<param name="objectType">The type of object for which to retrieve tags. For example, retrieve all the default tags for CommunityGroups (CMSObjectTypes.CommunityGroup).</param>
	<returns>Collection of TagData objects</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetDefaultTags(Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.Int32)">
	<summary>
 Returns a list of all system defined tags in the system.
 </summary>
	<param name="objectType">The type of object for which to retrieve tags. For example, retrieve all the default tags for CommunityGroups (CMSObjectTypes.CommunityGroup).</param>
	<param name="languageId">Language of tags to retrieve.</param>
	<returns>Collection of TagData objects</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetTagByID(System.Int64)">
	<summary>
 Returns a specific tag by providing it's ID.
 </summary>
	<param name="tagId">ID of the tag to retrieve.</param>
	<returns>Returns a tag found with supplied ID or new tag if no tag is found.</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetTagByName(System.String)">
	<summary>
 Returns Tag with specified text.
 </summary>
	<param name="tagText">Text of the tag to retrieve.</param>
	<returns>Returns tag found with supplied ID or new tag if no tag is found.</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetTagCloud(Ektron.Cms.Community.TagCloudRequestData,System.Int32@)">
	<summary>
 Returns a tag cloud based upon the request.
 </summary>
	<param name="request">Contains the parameters for the tag cloud to retrieve.</param>
	<param name="totalTags">Returns the total number of tags available in the requested cloud.</param>
	<returns>A TagCloud object representing the request.</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetTagsForContent(System.Int64)">
	<summary>
 Returns an array of tags for a piece of content.
 </summary>
	<param name="contentId">The ID of the piece of content for which to retrieve tags.</param>
	<returns>An array of TagData objects that have been applied to the content.</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetTagsForObject(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes)">
	<summary>
 Returns an array of tags for a given object.
 </summary>
	<param name="objectId">The ID of the object to retrieve tags for.</param>
	<param name="objectType">The Object type to retrieve tags for.</param>
	<returns>An array of TagData objects that have been applied to an object.</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetTagsForObject(System.Int64,Ektron.Cms.Common.EkEnumeration.CMSObjectTypes,System.Int32)">
	<summary>
 Returns an array of tags for a given object.
 </summary>
	<param name="objectId">The object ID to retrieve tags for.</param>
	<param name="objectType">The object type to retrieve tags for.</param>
	<param name="languageId">The language ID of the tags to retrieve.</param>
	<returns>An array of TagData objects that have been applied to an object.</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetTagsForUser(System.Int64)">
	<summary>
 Returns an array of tags for a user.
 </summary>
	<param name="userId">The ID of the user to retrieve tags for.</param>
	<returns>An array of TagData objects that have been applied to the user.</returns>
</member><member name="M:Ektron.Cms.API.Community.Tags.GetTagsForUser(System.Int64,System.Int32)">
	<summary>
 Returns an array of tags for a user.
 </summary>
	<param name="userId">ID of the user to retrieve tags for.</param>
	<param name="languageId">Language of tags to retrieve.</param>
	<returns>An array of TagData objects that have been applied to the user.</returns>
</member><member name="T:Ektron.Cms.API.Community.Tags">
	<summary>
 The Tags class allows you to manage tags for content, users, and community groups. For example, you can 
 add a tag to the system (AddTag), add a tag to a user (AddTagToUser), get a list of tags associated with 
 a user (GetTagsForUser) or delete a tag by its ID (DeleteTagById).
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.AddMessageBoardEntry(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.String,System.Boolean,System.Int64)">
	<summary>
 Adds a Message Board Entry 
 </summary>
	<param name="objectId">The ID of the object that is associated with the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="messageText">the text of the message being added to the board.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The user ID of the member requesting data.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.GetMessageBoardEntry(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType)">
	<summary>
 Gets a specific message from a message board based on the message ID, object ID and object type.
 </summary>
	<param name="messageId">The unique ID of the message.</param>
	<param name="objectId">The ID of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<returns>The message board data object with the data from the database.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.GetMessageBoardEntry(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
	<summary>
 Gets a specific message from a message board based on the message ID, object ID, object type and user ID requesting the data.
 </summary>
	<param name="messageId">The unique ID of the message.</param>
	<param name="objectId">The ID of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="callerUserId">The user ID of the member requesting data.</param>
	<returns>The message board data object with the data from the database.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.GetMessageBoardEntry(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,System.Boolean)">
	<summary>
 Gets a specific message from a message board based on the message ID, object ID, object type, the moderation switch and user ID requesting the data.
 </summary>
	<param name="MessageId">The unique ID of the message.</param>
	<param name="objectId">The ID of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The user ID of the member requesting data.</param>
	<returns>The message board data object with the data from the database.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.GetAllMessageBoardEntries(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,Ektron.Cms.PagingInfo)">
	<summary>
 Gets all messages for a particular object. 
 </summary>
	<param name="objectId">The ID of the object.</param>
	<param name="objectType">The type of the object.</param>
	<param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
	<returns>Returns a collection of message board data objects for each record retrieved from the database.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.GetAllMessageBoardEntries(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,Ektron.Cms.PagingInfo,System.Int64)">
	<summary>
 Gets all messages for a particular object. 
 </summary>
	<param name="objectId">The ID of the object.</param>
	<param name="objectType">The type of the object.</param>
	<param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
	<param name="callerUserId">The user ID of the member requesting data.</param>
	<returns>Returns a collection of message board data objects for each record retrieved from the database.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.GetAllMessageBoardEntries(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,Ektron.Cms.PagingInfo,System.Int64,System.Boolean)">
	<summary>
 Gets all messages for a particular object. 
 </summary>
	<param name="objectId">The ID of the object.</param>
	<param name="objectType">The type of the object.</param>
	<param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
	<param name="callerUserId">The user ID of the member requesting data.</param>
	<param name="isModerated">The moderation switch.</param>
	<returns>Returns a collection of message board data objects for each record retrieved from the database.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.GetAllMessageBoardEntriesByUser(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Gets all messages entered by a user.
 </summary>
	<param name="objectId">The ID of the object.</param>
	<param name="objectType">The type of the object.</param>
	<param name="userId">The user ID for which to retrieve data.</param>
	<param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
	<returns>Returns a collection of message board data objects for each record retrieved from the database.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.GetAllMessageBoardEntriesByUser(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,Ektron.Cms.PagingInfo,System.Int64)">
	<summary>
 Gets all messages entered by a user.
 </summary>
	<param name="objectId">The ID of the object.</param>
	<param name="objectType">The type of the object.</param>
	<param name="userId">The user ID for which to retrieve data.</param>
	<param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
	<param name="callerUserId">The user ID of the member requesting data.</param>
	<returns>Returns a collection of message board data objects for each record retrieved from the database.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.GetAllMessageBoardEntriesByUser(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,Ektron.Cms.PagingInfo,System.Int64,System.Boolean)">
	<summary>
 Gets all messages entered by a user.
 </summary>
	<param name="objectId">The ID of the object.</param>
	<param name="objectType">The type of the object.</param>
	<param name="userId">The user ID for which to retrieve data.</param>
	<param name="paging">The paging object. Setting "RecordsPerPage" to zero retrieves all rows.</param>
	<param name="callerUserId">The user ID of the member requesting data.</param>
	<param name="isModerated">The moderation switch.</param>
	<returns>Returns a collection of message board data objects for each record retrieved from the database.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.DeleteMessageBoardEntry(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType)">
	<summary>
 Deletes single message board record based on the message ID, object ID and object type.
 </summary>
	<param name="messageId">The unique ID of the message.</param>
	<param name="objectId">The ID of the object that is associated with the message board.</param>
	<param name="objectType">The type of object.</param>
	<returns>Returns true when the message is deleted successfully.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.DeleteMessageBoardEntry(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
	<summary>
 Deletes single message board record based on the message ID, object ID, object type and user ID requesting the data.
 </summary>
	<param name="messageId">The unique ID of the message.</param>
	<param name="objectId">The ID of the object that is associated with the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="callerUserId">The user ID of the member deleting the message.</param>
	<returns>Returns true when the message is deleted successfully.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.DeleteMessageBoardEntry(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,System.Boolean)">
	<summary>
 Deletes single message board record based on the message ID, object ID, object type, the moderation switch and user ID requesting the data.
 </summary>
	<param name="messageId">The unique ID of the message.</param>
	<param name="objectId">The ID of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="callerUserId">The user ID of the member deleting the message.</param>
	<param name="isModerated">The moderation switch.</param>
	<returns>Returns true when the message is deleted successfully.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.DeleteMessageBoardEntries(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType)">
	<summary>
 Deletes all the message board records for a particular object.
 </summary>
	<param name="objectId">The ID of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<returns>Returns true when all the messages are deleted successfully.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.DeleteMessageBoardEntries(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
	<summary>
 Deletes all the message board records for a particular object.
 </summary>
	<param name="objectId">The ID of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="callerUserId">The user ID of the member deleting the messages.</param>
	<returns>Returns true when all the messages are deleted successfully.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.DeleteMessageBoardEntries(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,System.Boolean)">
	<summary>
 Deletes all the message board records for a particular object.
 </summary>
	<param name="objectId">The ID of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The user ID of the member deleting the messages.</param>
	<returns>Returns true when all the messages are deleted successfully</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.DeleteMessageBoardEntriesByUser(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
	<summary>
 Deletes all the message board records for a particular User.
 </summary>
	<param name="objectId">The ID of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="userId">The ID of the user whose messages are going to be deleted.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.DeleteMessageBoardEntriesByUser(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,System.Int64)">
	<summary>
 Deletes all the message board records for a particular User.
 </summary>
	<param name="objectId">The ID of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="userId">The ID of the user whose messages are going to be deleted.</param>
	<param name="callerUserId">The user ID of the member deleting the messages.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.DeleteMessageBoardEntriesByUser(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,System.Int64,System.Boolean)">
	<summary>
 Deletes all the message board records for a particular User.
 </summary>
	<param name="objectId">The ID of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="userId">The ID of the user whose messages are going to be deleted.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The user ID of the member deleting the messages.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.UpdateMessageText(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.String)">
	<summary>
 Updates the Text of a message.
 </summary>
	<param name="messageId">The unique ID of the message.</param>
	<param name="objectId">The ID of the object associated with the message board.</param>
	<param name="objectType">The type of the object associated with the message board.</param>
	<param name="messageText">The new message text.</param>
	<returns>Returns the updated row.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.UpdateMessageText(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.String,System.Int64)">
	<summary>
 Updates the Text of a message.
 </summary>
	<param name="messageId">The unique ID of the message.</param>
	<param name="objectId">The ID of the object associated with the message board.</param>
	<param name="objectType">The type of the object associated with the message board.</param>
	<param name="messageText">The new message text.</param>
 ''' <param name="callerUserId">The user ID of the member performing the update.</param>
	<returns>Returns the updated row.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.UpdateMessageText(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.String,System.Int64,System.Boolean)">
	<summary>
 Updates the Text of a message.
 </summary>
	<param name="messageId">The unique ID of the message.</param>
	<param name="objectId">The ID of the object associated with the message board.</param>
	<param name="objectType">The type of the object associated with the message board.</param>
	<param name="messageText">The new message text.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The user ID of the member doing the update.</param>
	<returns>Returns the updated row.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.ApproveMessage(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType)">
	<summary>
 This function changes the flag of the message from pending to approve.
 </summary>
	<param name="messageId">The unique ID of the message.</param>
	<param name="objectId">The ID of the object.</param>
	<param name="objectType">The type of the object.</param>
	<returns>Returns the updated row.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.ApproveMessage(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
	<summary>
 This function changes the flag of the message from pending to approve.
 </summary>
	<param name="messageId">The unique ID of the message.</param>
	<param name="objectId">The ID of the object associated with the message board.</param>
	<param name="objectType">The type of the object associated with the message board.</param>
	<param name="callerUserId">The user ID of the member doing the update.</param>
	<returns>Returns the updated row.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.ApproveMessage(System.Int64,System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,System.Boolean)">
	<summary>
 This function changes the flag of the message from pending to approve.
 </summary>
	<param name="messageId">The unique ID of the message.</param>
	<param name="objectId">The ID of the object associated with the message board.</param>
	<param name="objectType">The type of the object associated with the message board.</param>
	<param name="isModerated">The moderation switch.</param>
	<param name="callerUserId">The user ID of the member doing the update.</param>
	<returns>Returns the updated row.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.IsUserMessageBoardAdmin(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
	<summary>
 This function determines if the user has administrative privileges for the message board.
 </summary>
	<param name="userId">The User ID of the user</param>
	<returns>Returns true if the user has administrative privileges.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.IsSpam(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64,System.String,Ektron.Cms.Common.EkEnumeration.MessageBoardSpamControlType,System.Int32)">
	<summary>
 This function evaluates if the new message is spam or not based on the spam filter selected. 
 </summary>
	<param name="objectId">The id of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<param name="userId">The Id of the user entering the message.</param>
	<param name="messageText">The text of the message.</param>
	<param name="spamControlType">The type of spam filter selected.</param>
	<param name="interval">The time interval for the spam filter.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.EnableModeration(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
	<summary>
 Switch on Moderation for the Object.
 </summary>
	<param name="objectId">The id of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.DisableModeration(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType,System.Int64)">
	<summary>
 Switch off Moderation for the Object.
 </summary>
	<param name="objectId">The id of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.MessageBoard.IsModerated(System.Int64,Ektron.Cms.Common.EkEnumeration.MessageBoardObjectType)">
	<summary>
 Check if the object is moderated or not.
 </summary>
	<param name="objectId">The id of the object that has the message board.</param>
	<param name="objectType">The type of object.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.API.Community.MessageBoard">
	<summary>
 The MessageBoard class allows you to work with message board entries associated with a user, 
 community group or content item. For example, you can add a message to a message board (AddMessageBoardEntry),
 delete a message (DeleteMessageBoardEntry) or get a list of message board items for an object (GetAllMessageBoardEntries).
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.AcceptFriendInvite(System.Int64)">
	<summary>
 Accepts a friend invitation on behalf of invited user.
 </summary>
	<param name="invitationId">Id of friend invitation to accept.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.AddSelectedFriend(System.Int64,System.Int64)">
	<summary>
 Adds a colleague to a user's selected colleague list by providing the selected 
 colleague's user ID and the ID of the user who wants to add the selected colleague. 
 </summary>
	<param name="selectedFriendUserId">User ID of a colleague to add to a user's selected colleague list.</param>
	<param name="userId">ID of the user adding the selected colleague.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.DeleteSelectedFriend(System.Int64,System.Int64)">
	<summary>
 Deletes a colleague from a user's selected colleague list by providing the selected 
 colleague's user ID and the ID of the user who wants to delete the selected colleague.
 </summary>
	<param name="selectedFriendUserId">User ID of a colleague to delete from user's selected colleagues list.</param>
	<param name="userId">ID of user deleting the colleague.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.GetSelectedFriends(System.Int64)">
	<summary>
 Get a list of selected colleagues for a user by providing the user's ID.
 </summary>
	<param name="userId">ID of the user to retrieve selected colleagues.</param>
	<returns>An array of DirectoryUserData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.IsSelectedFriend(System.Int64,System.Int64)">
	<summary>
 Checks whether a user is a selected colleague of user.
 </summary>
	<param name="friendUserId">User ID to check in selected colleagues list.</param>
	<param name="userId">ID of the user who is checking for a selected colleague.</param>
	<returns>Returns true if the colleague's user ID is in the selected colleagues list of for a user ID, else false.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.MoveFriend(System.Int64,System.Int64,System.Int64)">
	<summary>
 Moves a colleague into another colleague directory.
 </summary>
	<param name="friendUserId">The user ID of the colleague to be moved.</param>
	<param name="userId">The ID of the user moving the colleague.</param>
	<param name="directoryId">The ID of the directory where the colleague will be moved.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.AddFriend(System.Int64,System.Int64)">
	<summary>
 Adds a user to another user's colleague list.
 </summary>
	<param name="friendUserId">The ID of the user to be added to a user's colleague list.</param>
	<param name="userId">The ID of the user adding the colleague.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.AddFriend(System.Int64,System.Int64,System.Int64)">
	<summary>
 Adds a user to another user's friends list in a specific sub directory.
 </summary>
	<param name="friendUserId">The ID of the user to be added to the user's colleague list.</param>
	<param name="userId">The ID of the user adding the colleague.</param>
	<param name="directoryId">The ID of the directory where the new colleague will be added.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.DeleteFriend(System.Int64,System.Int64)">
	<summary>
 Delete's a colleague from a user's colleague list.
 </summary>
	<param name="friendUserId">The user ID of the colleague to delete from the user's colleague list.</param>
	<param name="userId">The ID of the user deleting the colleague.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.GetFriendStatus(System.Int64,System.Int64)">
	<summary>
 Get a user's colleague relation status to another user. For instance, user <b>A</b> may be a colleague to user <b>B</b>. User <b>C</b> may be a pending colleague to user <b>D</b>.
 </summary>
	<param name="friendUserId">The ID of the user whose status is being checked.</param>
	<param name="userId">The ID of the user seeking status.</param>
	<returns>FriendStatus enumeration.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.IsFriend(System.Int64,System.Int64)">
	<summary>
 Checks to see if a user is the colleague of another user by providing both colleague's ID information.
 In the friendUserID, enter the colleague's ID who you want to check. In the userID, enter the 
 user you are checking against. Returns True when the users are colleagues. For example, if 
 you want to find out whether Jim is a colleague of Tom, enter Jim's user ID in the friendUserId 
 parameter and Tom's user ID in the userId parameter. If Jim and Tom are colleagues, this method 
 returns true.
 </summary>
	<param name="friendUserId">first userId</param>
	<param name="userId">second userId</param>
	<returns>Returns true if FriendUserId and UserID are colleagues, else false.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.GetFriends(System.Int64)">
	<summary>
 Returns a list of colleagues for a user.
 </summary>
	<param name="userId">The ID of the user whose colleague list is being returned.</param>
	<returns>An array of DirectoryUserData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.GetFriends(System.Int64,System.Int64)">
	<summary>
 Returns a list of colleagues in a specified directory for a given user.
 </summary>
	<param name="userId">The ID of the user whose colleague list is being returned.</param>
	<param name="directoryID">The ID of the directory from which to retrieve a colleague list.</param>
	<returns>An array of DirectoryUserData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.GetFriends(System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Returns a list of colleagues for a user. This method contains the ability to page results.
 </summary>
	<param name="userId">The ID of the user whose colleague list is being returned.</param>
	<param name="pagingInfo">Supply paging information to control retrieval.</param>
	<returns>An array of DirectoryUserData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.GetFriends(System.Int64,Ektron.Cms.PagingInfo,System.Int64)">
	<summary>
 Returns a list of colleagues for a user in a specific directory. This method contains the ability to page the results.
 </summary>
	<param name="userId">The ID of the user whose colleague list is being returned.</param>
	<param name="pagingInfo">supply paging information to control retrieval.</param>
	<param name="directoryID">The ID of the directory from which to retrieve a colleague list.</param>
	<returns>array of DirectoryUserData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.GetSentFriendInvitations(System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Gets a list of pending colleague invitations sent out by a user.
 </summary>
	<param name="userId">ID of the user who sent invitations.</param>
	<param name="pagingInfo">Supply paging information to control retrieval.</param>
	<returns>AN array of FriendInvitations.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.GetInvitedUsers(System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Gets a list of users that a user has sent colleague invitations to.
 </summary>
	<param name="userId">ID of user who sent colleague invitations.</param>
	<param name="pagingInfo">Supply paging information to control retrieval.</param>
	<returns>An array of DirectoryUserData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.GetPendingFriends(System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Gets a list of users that have sent another user colleague invitations.  This only returns users whose invitations have not yet been accepted and are still pending. 
 </summary>
	<param name="userId">ID of user who has received invitations.</param>
	<param name="pagingInfo">Supply paging information to control retrieval.</param>
	<returns>array of DirectoryUserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.AcceptPendingFriend(System.Int64,System.Int64)">
	<summary>
 Accepts a colleague request from one user to another.
 </summary>
	<param name="fromUserId">The ID of the user who sent the colleague request.</param>
	<param name="toUserId">The ID of the user who received colleague request and is accepting it.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.AddPendingFriend(System.Int64,System.Int64)">
	<summary>
 Adds a pending colleague.  Sends the other user a colleague invitation.
 </summary>
	<param name="friendUserId">User receiving colleague request.</param>
	<param name="userId">User sending colleague request.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.DeletePendingFriendRequest(System.Int64,System.Int64)">
	<summary>
 Deletes a pending colleague request.
 </summary>
	<param name="fromUserId">The ID of the user who sent the original colleague request.</param>
	<param name="toUserId">The ID of the user who received the colleague request.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.DeletePendingFriendRequest(System.Int64,System.String)">
	<summary>
 Deletes a pending colleague request.
 </summary>
	<param name="fromUserId">The ID of the user who sent original colleague request.</param>
	<param name="toEmailAddress">The Email address of the user who received the colleague request.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.GetFriendsDirectory(System.Int64,System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Retrieves a user's colleague directory.
 </summary>
	<param name="userId">The ID of the user whose colleague directory is being retrieved.</param>
	<param name="directoryId">ID of the colleague directory to retrieve.</param>
	<param name="pagingInfo">Supply paging information to control retrieval.</param>
	<returns>DirectoryAdvancedUserData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Friends.InviteUsers(Ektron.Cms.Common.InvitationSendRequestData)">
	<summary>
 Send a friend invitation to a list of users and\\or email addresses.
 </summary>
	<param name="invitationData">Invitation request data detailing invitation information.</param>
	<returns>A collection of Invitation objects that have been sent out.</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.API.Community.Friends">
	<summary>
 Friends, which are the same as Colleagues in CMS400.NET, allow users to associate themselves with 
 other users in the community. This API class allows you to manage colleagues for users in the system. 
 For example, you can add a colleague (AddFriend), remove a colleague (DeleteFriend) or get a list 
 of current colleagues (GetFriends).
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Flagging.AssignFlagToContent(System.Int64,System.Int64)">
	<summary>
 Assigns a flag definition to a piece of content.
 </summary>
	<param name="contentId">ID of the content to be assigned the flag.</param>
	<param name="flagId">ID of the flag definition.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Flagging.UpdateFlagObject(Ektron.Cms.ObjectFlagData)">
	<summary>
 Updates an existing Flag on an Object.
 </summary>
	<param name="objectFlag">Object flag data to update based upon the FlagEntryId.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Flagging.RemoveObjectFlag(System.Int64)">
	<summary>
 Removes a flag entry from an object.
 </summary>
	<param name="flagId">ID of flag entry to remove.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Flagging.PurgeFlagEntries(System.Int64,System.DateTime,System.DateTime)">
	<summary>
 Purges all flags of a particular content block over a defined date/time range. 
 </summary>
	<param name="objectId">The ID of the content that is having its flags purged.</param>
	<param name="startDate">The beginning of the date range of content to be purged.</param>
	<param name="endDate">The end of the date range of content to be purged.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Flagging.AddFlagObject(Ektron.Cms.ObjectFlagData)">
	<summary>
 Saves a new Flag on an Object.
 </summary>
	<param name="objectFlag">Object Flag Data to save.</param>
	<returns>New Flag Entry ID if successful, else 0.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Flagging.GetContentFlagData(System.Int64,System.Int64)">
	<summary>
 Returns flagData for a piece of content for a given user.
 </summary>
	<param name="contentid">ID of the content to retrieve flag.</param>
	<param name="userid">ID of the CMS400.NET user who flagged content.</param>
	<returns>ContentFlagData object.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Flagging.GetContentFlagData(System.Int64,System.String)">
	<summary>
 Returns flagData for a piece of content for a given user.
 </summary>
	<param name="contentid">ID of content to retrieve flag for.</param>
	<param name="visitorid">Visitor ID of non-cms user.</param>
	<returns>ContentFlagData object.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Flagging.GetAllFlagEntries(System.Int64,System.Int32,System.DateTime,System.DateTime,System.Int32@)">
	<summary>
 Gets a list of flag entries for  a piece of content over a given time period.
 </summary>
	<param name="contentId">ID of content item for which to retrieve flags.</param>
	<param name="maxResults">Max number of results to retrieve.</param>
	<param name="startDate">Date to begin retrieving flags.</param>
	<param name="endDate">Date to end retrieving flags.</param>
	<param name="totalFlags">Returns the total number of flags found.</param>
	<returns>Array of content flag data.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Flagging.GetAllFlagEntries(System.Int32,System.DateTime,System.DateTime,System.Int32@)">
	<summary>
 Gets a list of flag entries over a given time period.
 </summary>
	<param name="maxResults">Max number of results to retrieve.</param>
	<param name="startDate">Date to begin retrieving flags.</param>
	<param name="endDate">Date to end retrieving flags.</param>
	<param name="totalFlags">Returns the total number of flags found.</param>
	<returns>Array of content flag data.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Flagging.GetFlagDataById(System.Int64)">
	<summary>
 Retrieves a flag entry on a piece of content.
 </summary>
	<param name="flagId">ID of the flag entry.</param>
	<returns>ContentFlagData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Flagging.GetDefaultFolderFlagDef(System.Int64)">
	<summary>
 Retrieves all the flag definitions applied to a folder.
 </summary>
	<param name="folderId">ID of the folder to retrieve flag definitions.</param>
	<returns>array of FolderFlagDefData</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Flagging.GetFlaggedRank(System.Int64)">
	<summary>
 Retrieves a flag ranking for an object.
 </summary>
	<param name="ObjectId">ID of the object for which to retrieve a flag ranking.</param>
	<returns>FlaggedRankData</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.API.Community.Flagging">
	<summary>
 The Flagging class allows you to work with Flag Objects, Flag Entries and content that has 
 been flagged. For example, you can assign a flag to content (AssignFlagToContent) or get a 
 list of flags for a content item (GetContentFlagData).
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.AddContentFavorite(System.Int64,System.Int64)">
	<summary>
 Adds a piece of content to user's favorites.
 </summary>
	<param name="contentId">ID of content</param>
	<param name="userId">ID of user</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.AddContentFavorite(System.Int64,System.Int64,System.Int64)">
	<summary>
 Adds a piece of content to user's favorites and places it in a subdirectory.
 </summary>
	<param name="contentId">ID of the content item.</param>
	<param name="userId">ID of user adding the favorite.</param>
	<param name="directoryId">ID of the directory to add the content item to in the user's favorites.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.DeleteContentFavorite(System.Int64,System.Int64)">
	<summary>
 Deletes a piece of content form a user's favorites.
 </summary>
	<param name="contentId">ID of the content item to be deleted from a user's favorites.</param>
	<param name="userId">ID of user deleting the favorite.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.IsContentFavorite(System.Int64,System.Int64)">
	<summary>
 Checks if to see if a piece of content is already in a user's favorites.
 </summary>
	<param name="contentId">ID of content to be checked.</param>
	<param name="userId">ID of user to check.</param>
	<returns>True if the content item is in user's favorites, else false.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.GetContentFavorites(System.Int64)">
	<summary>
 Returns a list of the user's favorites.
 </summary>
	<param name="userID">ID of user to retrieve favorites for.</param>
	<returns>An array of DirectoryContentData objects.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.GetContentFavorites(System.Int64,System.Int64)">
	<summary>
 Returns a list of the user's favorites in a directory.
 </summary>
	<param name="userID">ID of a user to retrieve favorites for.</param>
	<param name="directoryId">ID of the directory to retrieve favorites from.</param>
	<returns>An array of DirectoryContentData objects</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.GetContentFavorites(System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Returns a list of the user's favorites.
 </summary>
	<param name="userID">ID of the user to retrieve favorites for.</param>
	<param name="pagingInfo">Paging information for limiting resultset.</param>
	<returns>An array of DirectoryContentData objects.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.GetContentFavorites(System.Int64,System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Returns a list of the user's favorites in a given directory.
 </summary>
	<param name="userID">ID of the user to retrieve favorites for.</param>
	<param name="directoryId">ID of the directory to retrieve favorites from.</param>
	<param name="pagingInfo">Paging information for limiting the resultset.</param>
	<returns>An array of DirectoryContentData objects</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.GetFavoritesDirectory(System.Int64,System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Returns user's Favorites taxonomy directory structure.
 </summary>
	<param name="userId">ID of the user who's favorites should be retrieved.</param>
	<param name="directoryId">ID of the favorites directory to retrieve.</param>
	<param name="pagingInfo">Paging information for limiting the resultset.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.MoveContentFavorite(System.Int64,System.Int64,System.Int64)">
	<summary>
 Moves a content favorite to a new favorites directory.
 </summary>
	<param name="contentId">ID of the content item to move.</param>
	<param name="userId">ID of the user.</param>
	<param name="directoryId">ID of the directory to move content favorite it to.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.GetFavoriteId(System.String,System.String,System.Int64)">
	<summary>
 This method checks to see if a piece of the URI is already in a user's favorites. If it is, it returns the ID.
 </summary>
	<param name="favoriteName">The favorite's name.</param>
	<param name="favoriteUri">The favorite's URI.</param>
	<param name="userId">The ID of user to whose favorites are being checked.</param>
	<returns>If the favorite exists, it returns the ID; a non-negative value greater than 0.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.AddFavoriteLink(System.Int64,System.Int64,System.Int32,System.String,System.String,System.String)">
	<summary>
 Adds a URI to a specified user's favorites. 
 </summary>
	<param name="userId">The ID of the user.</param>
	<param name="directoryId">A taxonomy ID.</param>
	<param name="directoryLanguage">A taxonomy language (for a user, this will be 0 - language neutral).</param>
	<param name="uriName">The name identification for the URI.</param>
	<param name="Uri">The actual URI.</param>
	<param name="uriDescription">A description of the URI.</param>
	<returns>The newly created favorite ID as a Long.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.UpdateFavoriteLink(System.Int64,System.Int64,System.String,System.String,System.String)">
	<summary>
 Update an existing URI favorite by providing the favorite's ID, user's ID, URI name, URI description
 and actual URI.
 </summary>
	<param name="favoriteId">The ID of the favorite you are updating.</param>
	<param name="userId">The ID of user whose favorite is being updated.</param>
	<param name="uriName">The name identifiction for the new URI.</param>
	<param name="Uri">The actual URI.</param>
	<param name="uriDescription">A description of the URI.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.DeleteFavoriteLink(System.Int64)">
	<summary>
 Delete a URI from a user's favorites.
 </summary>
	<param name="favoriteId">The ID of the favorite being deleted.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.GetFavoriteLink(System.Int64)">
	<summary>
 Retrieve the favorite by providing the favorite's ID.
 </summary>
	<param name="favoriteId">The ID of the favorite.</param>
	<returns>Returns information about the URI favorite in the format of UriFavorite.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.GetAllFavoriteLink(System.Int64)">
	<summary>
 Gets all the favorites for a given user.
 </summary>
	<param name="userId">The user's ID.</param>
	<returns>A generic list of UriFavorite.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.GetAllFavoriteLink(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32@)">
	<summary>
 Gets all the favorites in user specified directory.
 </summary>
	<param name="userId">The ID of the user.</param>
	<param name="directoryId">The ID of the directory.</param>
	<returns>A generic list of UriFavorite.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.Favorites.MoveFavoriteLink(System.Int64,System.Int64,System.Int64)">
	<summary>
 Moves a favorite from one favorite directory to another favorite directory.
 </summary>
	<param name="favoriteId">The ID of the favorite.</param>
	<param name="sourceDir">The ID of the current directory.</param>
	<param name="destinationDir">The ID of the new directory.</param>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.API.Community.Favorites">
	<summary>
 The Favorites class allows you to work with a user's favorites. Favorites are content items 
 that a user has designated as their favorite content. From this class, you can add content to 
 a user's favorites (AddContentFavorite), remove content from a user's favorites 
 (DeleteContentFavorite) or get a list of favorites for a given user (GetContentFavorites).
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Messaging.GetUnreadMessageCountForUser(System.Int64)">
	<summary>
 Gets the total unread messages for a given user ID.
 </summary>
	<param name="userId">ID of the user.</param>
	<returns>Integer count of unread messages for a user.</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.API.Messaging">
	<summary>
 The Messaging class allows you to work with Private Message Objects.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.AcceptGroupInvite(System.Int64)">
	<summary>
 Accepts a group invitation on behalf of invited user.
 </summary>
	<param name="invitationId">Id of group invitation to accept.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.AddUserToCommunityGroup(System.Int64,System.Int64,System.Boolean)">
	<summary>
 Adds a user to a community group. You can override the group enrollment moderation by setting the overridePending parameter to true.
 </summary>
	<param name="groupId">ID of the community group to which the user will be added.</param>
	<param name="userId">ID of the user to be added.</param>
	<param name="overridePending">Set to true if you wish to bypass group enrollment moderation.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.AddUserToCommunityGroup(System.Int64,System.Int64)">
	<summary>
 Adds a user to a community group.
 </summary>
	<param name="groupId">ID of the community group to which the user will be added.</param>
	<param name="userId">ID of the user to add.</param>
	<remarks>If the group does not have open enrollment, a group join request will be sent on behalf of the user.</remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.IsCommunityGroupAdmin(System.Int64,System.Int64)">
	<summary>
 Returns true if the user is an administrator of the group.
 </summary>
	<param name="userId">ID of the user to be verified.</param>
	<param name="groupId">ID of the community group to check.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.CancelJoinRequestForCommunityGroup(System.Int64,System.Int64)">
	<summary>
 Cancels a group join request sent by the user.
 </summary>
	<param name="groupId">ID of the community group where the join request was sent.</param>
	<param name="userId">ID of the user whom initially sent join request.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.RemoveUserFromCommunityGroup(System.Int64,System.Int64)">
	<summary>
 Removes a user from a community group.
 </summary>
	<param name="groupId">ID of the community group from which the user is being removed.</param>
	<param name="userId">ID of the user to remove.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.AddCommunityGroup(Ektron.Cms.CommunityGroupData)">
	<summary>
 Create a new community group.
 </summary>
	<param name="groupData">CommunityGroupData class containing information about the new community group.</param>
	<returns>ID of the new community group.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.UpdateCommunityGroup(Ektron.Cms.CommunityGroupData)">
	<summary>
 Updates an existing community group.
 </summary>
	<param name="groupData">CommunityGroupData class containing information to update for the group.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.DeleteCommunityGroupByID(System.Int64)">
	<summary>
 Deletes an existing community group.
 </summary>
	<param name="groupId">The ID of the community group to delete.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetCommunityGroupByID(System.Int64)">
	<summary>
 Retrieves a CommunityGroupData object by ID.
 </summary>
	<param name="groupId">The ID of the community group to retrieve.</param>
	<returns>CommunityGroupData if the groupId is valid, else null.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetMostPopularCommunityGroups(System.Int32)">
	<summary>
 Retrieves a list of the most popular community groups up to the number entered in the maxResults property. The popularity of a group is determined by how many members belong to the group.
 </summary>
	<param name="maxResults">The number of groups to retrieve. For example, if 10 is supplied, the top 10 most popular groups will be returned.</param>
	<returns>An array of CommunityGroupData objects</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetMostPopularCommunityGroups(Ektron.Cms.PagingInfo)">
	<summary>
 Retrieves all community groups ranked by popularity with the ability to have paging. The popularity of a group is determined by how many members belong to the group.
 </summary>
	<param name="pagingInfo">Paging information for paging through a large list of groups.</param>
	<returns>an array of CommunityGroupData objects</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetAllCommunityGroups(Ektron.Cms.CommunityGroupRequest)">
	<summary>
 Returns an array of Community Groups based upon supplied criteria.
 </summary>
	<param name="request">request criteria defining the groups to retrieve.</param>
	<returns>An array of CommunityGroupData objects</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetGroupMemberStatus(System.Int64,System.Int64)">
	<summary>
 This method allows you to find out status of a user for a particular group.
 </summary>
	<param name="communityGroupId">ID of community group to get a user's status.</param>
	<param name="userID">ID of the user.</param>
	<returns>GroupMemberStatus as an enumeration.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.IsUserInCommunityGroup(System.Int64,System.Int64)">
	<summary>
 By providing the community group's ID and the user's ID, you can find out if a user belongs to a given community group.
 Returns true if the user is a member of the community group.
 </summary>
	<param name="communityGroupId">ID of a community group to check membership.</param>
	<param name="userId">User ID to be checked.</param>
	<returns>True if the user is a member of the community group.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetCommunityGroups(System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Gets a list of community groups a user belongs to.
 </summary>
	<param name="userId">ID of user to retrieve community groups for.</param>
	<param name="pagingInfo">Paging information for list retrieval.</param>
	<returns>An array of CommunityGroupData objects.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetPendingCommunityGroups(System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Gets a list of community groups for which the user's membership is pending the group administrator's approval.
 </summary>
	<param name="userId">ID of user to retrieve pending groups for.</param>
	<param name="pagingInfo">Paging information for retrieval.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.ApprovePendingGroupUser(System.Int64,System.Int64)">
	<summary>
 Approves the user's pending group request.
 </summary>
	<param name="userId">ID of user to approve.</param>
	<param name="groupId">ID of the community group that the user is being approved to join.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.DeletePendingGroupUser(System.Int64,System.Int64)">
	<summary>
 Delete or reject a user's pending community group request. 
 </summary>
	<param name="userId">ID of user whose request you are deleting .</param>
	<param name="groupId">ID of community group from which the request is being deleted.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetAllCommunityGroupsInDirectory(Ektron.Cms.DirectoryRequest@)">
	<summary>
 Retrieves a list of community groups in a Directory.
 </summary>
	<param name="request">Request criteria for community group retrieval.</param>
	<returns>An array of CommunityGroupData objects.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetCommunityGroupUsers(System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Returns a list of users in a community group.
 </summary>
	<param name="communityGroupId">The ID of the community group.</param>
	<param name="pagingInfo">Paging information for the user list.</param>
	<returns>An array of DirectoryUserData objects.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetPendingCommunityGroupUsers(System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Returns a list of users whose community group membership is pending approval.
 </summary>
	<param name="communityGroupId">The ID of the community group.</param>
	<param name="pagingInfo">Paging information for the user list.</param>
	<returns>An array of DirectoryUserData objects.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetAllUnassignedCommunityGroupUsers(Ektron.Cms.CommunityGroupObjectRequest@)">
	<summary>
 Returns a list of users who are not currently in a community group.
 </summary>
	<param name="request">Request criteria for user list.</param>
	<returns>An array of DirectoryUserData objects.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetCommunityGroupBlogIds(System.Int64)">
	<summary>
 Gets a list of Blog IDs that belong to a community group.
 </summary>
	<param name="communityGroupId">ID of community Group.</param>
	<returns>An array of blog IDs (Long).</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetCommunityGroupDiscussionBoardIds(System.Int64)">
	<summary>
 Gets a list of discussion board IDs that belong to a community group.
 </summary>
	<param name="communityGroupId">The ID of the community group.</param>
	<returns>An array of Discussion Board IDs (Long).</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetCommunityGroupUserIDs(System.Int64)">
	<summary>
 Gets a list of User IDs that belong to a community group.
 </summary>
	<param name="communityGroupId">The ID of the community group.</param>
	<returns>An array of Discussion Board IDs (Long).</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetCommunityGroupUsers(System.Int64)">
	<summary>
 Retrieves a list of users in a community group.
 </summary>
	<param name="communityGroupId">The ID of the community group.</param>
	<returns>An array of DirectoryUserData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetFolderIdForCommunityGroup(System.Int64)">
	<summary>
 Gets the Folder ID used by the community group in the CMS content tree.
 </summary>
	<param name="CommunityGroupID">ID of the community group.</param>
	<returns>A numeric value representing the folder ID.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.InviteUsers(Ektron.Cms.Common.InvitationSendRequestData,System.Int64)">
	<summary>
 Invites the users to the community group.
 </summary>
	<param name="invitationData">InvitationSendRequestData containing information about the GroupInvitation to send.</param>
	<param name="groupId">ID of the group to invite people to.</param>
	<returns>A collection of Invitations that were sent out.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetInvitedCommunityGroups(System.Int64,Ektron.Cms.PagingInfo)">
	<summary>
 Returns a list of community groups that a user has been invited to join. 
 </summary>
	<param name="userId">ID of the user who was invited.</param>
	<param name="pagingInfo">Object to supply paging parameters.</param>
	<returns>An array of CommunityGroupData.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetCommunityGroupBlog(System.Int64)">
	<summary>
 Returns the blog folder ID associated with a community group.
 </summary>
	<param name="groupId">The community group ID.</param>
	<returns>A Blog's folder ID.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Community.CommunityGroup.GetList(Ektron.Cms.Common.Criteria{Ektron.Cms.CommunityGroupProperty})">
	<summary>
 Returns a list of data for a given criteria. 
 </summary>
	<param name="criteria"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.API.Community.CommunityGroup">
	<summary>
 The CommunityGroup class allows you to work with community groups in CMS400.NET. 
 For example, you can add a community group (AddCommunityGroup), get a list a list 
 of community groups (GetAllCommunityGroups) or add a user to a community 
 group (AddUserToCommunityGroup).
 </summary>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.AppeWebPath">
	<summary>
 Returns the current eWebPath.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.AppImgPath">
	<summary>
 Returns the AppImgPath.
 </summary>
	<value></value>
	<returns>String</returns>
	<example>
 An example of using this property can be found in the 
 Workarea source file <c>CMS400Demo\\Workarea\\historylist.aspx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.ApplicationPath">
	<summary>
 Returns the application path.
 </summary>
	<value></value>
	<returns>String</returns>
	<example>
 An example of using this property can be found in the 
 Workarea source file <c>CMS400Demo\\Workarea\\assetconfig.aspx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.AppName">
	<summary>
 Returns the application name.
 </summary>
	<value></value>
	<returns>String</returns>
	<example>
 An example of using this property can be found in the 
 Workarea source file <c>CMS400Demo\\Workarea\\editareanavigation.aspx.vb</c>.<p/>
 A code snippet from that page appears below.
 <code>
 Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    StyleSheetJS.Text = m_refStyle.GetClientScript
    title.InnerHtml = (New SiteAPI).AppName
 End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.AppPath">
	<summary>
 Returns the application path.
 </summary>
	<value></value>
	<returns>Sting</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.AppXSLTPath">
	<summary>
 Returns the application XSLT path.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.AuthProtocol">
	<summary>
 Returns the protocol.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.DefaultContentLanguage">
	<summary>
 Default content language.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.DisplayTransText">
	<summary>
 Displays the translated text.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkAdUserRef">
	<summary>
 Returns the reference to the EkAdUser class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.User.EkADUser</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkContentRef">
	<summary>
 Returns a reference to the EkContent class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.EkContent</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkDTSelectorRef">
	<summary>
 Returns a reference to the EkDtSelector class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.EkDTSelector</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkFontRef">
	<summary>
 Returns a reference to the EkFont class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Font.EkFont</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkLibraryRef">
	<summary>
 Returns a reference to the EkLibrary class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Library.EkLibrary</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkMailRef">
	<summary>
 Returns a reference to the EkMailService class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Common.EkMailService</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkModuleRef">
	<summary>
 Returns a reference to the EkModule class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Modules.EkModule</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkMsgRef">
	<summary>
 Returns a reference to the EkMessageHelper class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Common.EkMessageHelper</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkSiteRef">
	<summary>
 Returns a reference to the EkSite class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Site.EkSite</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkTaskhistoryRef">
	<summary>
 Returns a reference to the EkTaskHistory class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.EkTaskHistory</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkTaskRef">
	<summary>
 Returns a reference to the EkTask class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.EkTask</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkTaskTypeRef">
	<summary>
 Returns a reference to the EkTaskType class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.EkTaskType</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkToolbarRef">
	<summary>
 Returns a reference to the EkToolBar class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.ToolBar.EkWebMenu</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkUrlRewriteRef">
	<summary>
 Returns a reference to the EkUrlRewrite class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.ektUrlRewrite</returns>
	<example>
 An example of using this property can be found in the
 Workarea source file <c>CMS400Demo\\Workarea\\urlAlias.aspx</c>.
 </example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkUserRef">
	<summary>
 Returns a reference to the EkUser class.
 </summary>
	<value></value>
	<returns>Ektron.Cms.User.EkUser</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EkXmlIndexingRef">
	<summary>
 Returns a reference to EkXmlIndexing.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Content.EkXmlIndexing</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EnableMultilingual">
	<summary>
 Returns True if Multilingual is enabled,  otherwise returns False.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.ImageEk1">
	<summary>
 Returns the image 1 from the web.config.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.ImageEk2">
	<summary>
 Returns the image 2 from the web.config.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.ImageEk3">
	<summary>
 returns the image 3 from web.config.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.OriginalLanguageId">
	<summary>
 Returns the original language ID.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.RemoteHost">
	<summary>
 Returns the address of a remote host.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.RequestInformationRef">
	<summary>
 Returns a reference to RequestInformation, which basically carries all the values of the web.config settings.
 </summary>
	<value></value>
	<returns>Ektron.Cms.Common.EkRequestInformation</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.SslPort">
	<summary>
 Returns the SSL port value.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.TreeModel">
	<summary>
 Returns 1 if the AJAX tree is enabled, otherwise returns 0.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<example>
 An example of using this function can be found in the
 Workarea source file <c>CMS400Demo\\Workarea\\workareanavigationtree.aspx.vb</c>.
 <code>
 Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    Response.CacheControl = "no-cache"
    Response.AddHeader("Pragma", "no-cache")
    Response.Expires = -1
    Dim m_refApi As New CommonApi
    If (m_refApi.TreeModel = 1) Then
        m_bAjaxTree = True
    End If
    m_refApi = Nothing
 End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.UniqueId">
	<summary>
 Returns a dynamically generated unique ID.
 </summary>
	<value></value>
	<returns>Long</returns>
	<example></example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.UserLanguage">
	<summary>
 Returns a user's language (used for locale).
 </summary>
	<value></value>
	<returns>Integer</returns>
	<example>
		<para>
 An example of using this property can be found in the 
 Workarea source file <c>CMS400Demo\\Workarea\\login.aspx.vb</c>.
 </para>
 Here is a code snippet from that page.
 <code>
     Private Sub LogoutUser()
        If (Not (IsPostBack())) Then
           Dim language_data As LanguageData
           Dim m_refSiteApi As New SiteAPI
           language_data = m_refSiteApi.GetLanguageById(m_refSiteApi.UserLanguage)
           logoutmsg.InnerHtml = m_refMsg.GetMessage("Logout message")
           LogoutBtn.Src = language_data.ImagePath &amp; LogoutBtn.Src
           LogoutPanel.Visible = True
        Else
           Dim strCloser As New System.Text.StringBuilder
           ' Render script to close the Workarea:
           strCloser.Append("<SCRIPT language="javascript">" &amp; vbCrLf)
           strCloser.Append("PopUpWindow('close.aspx?logout=true','Admin400',0,0,0,0);</SCRIPT>" &amp; vbCrLf)
           strCloser.Append("&lt;/SCRIPT&gt;" &amp; vbCrLf)
           WorkareaCloserJS.Text = strCloser.ToString()
       End If
    End Sub
 </code>
	</example>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.UserMenuType">
	<summary>
 Site preference of menu type. 
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.UseSsl">
	<summary>
 Returns whether SSL is forced or not.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.Version">
	<summary>
 Returns the version of the product.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.XmlPath">
	<summary>
 Returns the XML path.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.SiteId">
	<summary>
 Returns the site ID.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.RedirectorManExt">
	<summary>
 Returns the redirector extension for manual URL aliasing.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.RedirectorOn">
	<summary>
 Returns whether the redirector is on or not.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.WindowHeight">
	<summary>
 Returns the Workarea window height.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.WindowWidth">
	<summary>
 Returns the Workarea window width.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.WorkareaSearchResultMode">
	<summary>
 Returns mode for Workarea search.
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.LoginScreenWidth">
	<summary>
 Returns the login screen width.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.MemberType">
	<summary>
 Returns the member type.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.EnableReplication">
	<summary>
 Returns whether the dynamic replication is on or not.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Common.Debug_ShowHelpAlias">
	<summary>
 Returns a flag indicating the if debug messages are enabled 
 for Help-Alias strings (undocumented web.config option).
 </summary>
	<value>Boolean</value>
	<returns>Boolean</returns>
	<remarks>True to enable (will attempt to send messages to
 a pop-up window, otherwise will use javascript alerts.</remarks>
</member><member name="P:Ektron.Cms.API.Common.FilterByLanguage">
	<summary>
 Use to filter the language based on the result.
 </summary>
	<value>Integer</value>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.CmsApi.CmsPreview">
TODO:Deprecate?????
 <summary>
 Returns the value of preview mode.
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.CmsApi.SitePreview">
	<summary>
 Returns 0 if the site preview is set to false, otherwise returns 1.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.CmsApi.ContentLanguage">
	<summary>
 Returns the content language.
 </summary>
	<value></value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.CmsApi.UserId">
	<summary>
 Returns the currently logged in user ID.
 </summary>
	<value></value>
	<returns>Long</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.CmsApi.SitePath">
	<summary>
 Returns the site path.
 </summary>
	<value></value>
	<returns>String</returns>
	<example>
 An example of using this property can be found in the 
 Workarea source file <c>CMS400Demo\\Workarea\\isearch.aspx.vb</c>.
 </example>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.CmsApi.CopyProperties(Ektron.Cms.CommonApiBase)">
	<summary>
 Copies all the publicly settable property values on to the supplied CommonApi object.
 </summary>
	<param name="commonApiBase"></param>
	<remarks>This is neccesary because all the public properties modify the CommonAPIInstance.  
 In order for each API instance to get the edited properties this method needs to be called.</remarks>
</member><member name="T:Ektron.Cms.API.CmsApi">
	<summary>
 Common base class for all developer Api classes.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.BusinessRule.GetBusinessRules(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int64)">
	<summary>
 Method to get the results from a business rule by ID.
 Accepts environmental parameters such as HTTPHost, URLString, Cookies, forms, etc.
 Returns a string representing the output of the evaluated ruleset.
 </summary>
	<param name="httpHost">The HTTP host the request is made on.</param>
	<param name="urlRest">not used</param>
	<param name="cookies">Cookie Value Collection</param>
	<param name="formValues">Form Value Collection</param>
	<param name="queryValues">Querystring Value Collection</param>
	<param name="serverValues">Server Variables Collection</param>
	<param name="paramValues">Custom Value Collection</param>
	<param name="iRuleID">Numeric value representing the ID of the Ruleset</param>
	<returns>A string representing the output of the evaluated ruleset.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.BusinessRule.GetBusinessRules(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Method to get the results from a business rule by identifier.
 Accepts environmental parameters such as HTTPHost, URLString, Cookies, forms, etc.
 Returns a string representing the output of the evaluated ruleset.
 Identifier is a combination of the path/page/uniqueID of the business rules control.
 </summary>
	<param name="httpHost">The HTTP host the request is made on.</param>
	<param name="urlRest">not used</param>
	<param name="cookies">Cookie Value Collection</param>
	<param name="formValues">Form Value Collection</param>
	<param name="queryValues">Querystring Value Collection</param>
	<param name="serverValues">Server Variables Collection</param>
	<param name="paramValues">Custom Value Collection</param>
	<param name="sRuleID">String representing the identifier of the Ruleset. The identifier is a combination of the path/page/uniqueID of the business rules control.</param>
	<returns>A string representing the output of the evaluated ruleset.</returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Analytics.Analytics.AnalyticsEnabled">
	<summary>
 Indicates if Analytics has been enabled through a setting in the web.config file. If disabled, no analytics tracking will
 be done. If this property is set to true, tracking on the control level can still be disabled through the "EnableAnalytics" property in the AnalyticsTracker
 server control.
 </summary>
	<value>True indicates that analytics data is being tracked. False indicates that no analytics data is being tracked.</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Analytics.Analytics.RecordsBeforeWrite">
	<summary>
 Indicates the number of records to hold in the static memory buffer before writing to the database.
 This is used mainly to smooth out the number of writes to the database. This value and the 'TimeBeforeWrite'
 property are evaluated and, if any value has been exceeded, the buffered data will be written to the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Analytics.Analytics.TimeBeforeWrite">
	<summary>
 Indicates the number of seconds before writing the in-memory buffer of records to the database.
 This is used mainly to smooth out the number of writes to the database. This value and the 'RecordsBeforeWrite'
 property are evaluated and, if any value has been exceeded, the buffered data will be written to the database. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Analytics.Analytics.AppendToIISLog">
	<summary>
 Indicates whether or not the web.config has been set to append user_id and content_id information to the IIS log.
 </summary>
	<value>Boolean</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.API.Analytics.Analytics.InMemoryContentHitsData">
	<summary>
 The dataset that stores all the page/content view information in memory until it reaches its record or time threshold
 and writes back to the database. This is a strongly typed dataset of type 'ContentHitsData'. The underlying static member
 is initialized on demand.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Analytics.Analytics.HardDumpAnalyticsBuffer">
	<summary>
 Forces the analytics buffer to write to the database. This surpasses the checks to see if the time before write or number of records have passed.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Analytics.Analytics.SoftDumpAnalyticsBuffer">
	<summary>
 Conditionally writes the analytics buffer in memory to write to the database. If the time before write or number of records before write
 conditions have been met or exceeded, this function will force the write to the database.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Analytics.Analytics.TrackVisit(System.Web.UI.Page,System.Int64)">
	<summary>
 Tracks a visit to a page, and places it into the analytics buffer. This method calls SoftDumpAnalyticsBuffer.
 </summary>
	<param name="content_id">The ID of a content block that a visitor has viewed.</param>
	<param name="page">The System.Web.UI.Page object of a page visit. Will extract information from it such as visitor id, user id, session rank, and so forth.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Analytics.Analytics.TrackVisit(System.Int64,System.Int64,System.String,System.Int32,System.String,System.String)">
	<summary>
 Tracks a visit to a page, and places it into the analytics buffer. This method calls SoftDumpAnalyticsBuffer.
 </summary>
	<param name="content_id">The ID of a content block that a visitor has viewed.</param>
	<param name="user_id">The CMS user ID of either a CMS User or Member. Is zero for a visitor.</param>
	<param name="visitor_id">A unique ID used for tracking purposes.</param>
	<param name="session_rank">The rank of the session of a particular visitor. A session rank of 0 is the first page a new user has visited. A session rank of 1 is the first page
 a returning user has visited. A session rank of 2 is any other page.</param>
	<param name="referring_url">An external URL a user has arrived from.</param>
	<param name="url">The URL the user is visiting.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Analytics.Analytics.GetSessionRank(System.Web.UI.Page)">
	<summary>
 Gets the Session rank of the visiting user. A session rank of 0 is the first page a new user has visited. A session rank of 1 is the first page
 a returning user has visited. A session rank of 2 is any other page.
 </summary>
	<param name="page"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Analytics.Analytics.QueryAnalytics(System.String)">
	<summary>
 Provides a simple way of querying the database for analytics data. Returns the result as a weakly typed DataSet.
 Note that the connection is to the Analytics database and not to the standard CMS database.
 </summary>
	<param name="selectCommand">A query in the form of a string.</param>
	<returns>A weakly typed dataset with the result of the query.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.API.Analytics.Analytics.QueryAnalytics(System.String[])">
	<summary>
 Provides a simple way of querying the database for analytics data. Returns the result as a weakly typed DataSet.
 Note that the connection is to the Analytics database and not to the standard CMS database.
 </summary>
	<param name="selectCommands">An array of SQL queries in string format.</param>
	<returns>A weakly typed dataset with the result of the query.</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.API.Analytics.Analytics">
	<summary>
 A class for managing and querying CMS400.NET site activity information 
 </summary>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.AnalyticsAPI.AnalyticsEnabled">
	<summary>
 Indicates if Analytics has been enabled through a setting in the web.config file. If disabled, no analytics tracking will
 be done. If this property is set to true, tracking on the control level can still be disabled through the "EnableAnalytics" property in the AnalyticsTracker
 server control. 
 </summary>
	<value>True indicates that analytics data is being tracked. False indicates that no analytics data is being tracked.</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.AnalyticsAPI.RecordsBeforeWrite">
	<summary>
 Indicates the number of records to hold in the static memory buffer before writing to the database.
 This is used mainly to smooth out the number of writes to the database. This value and the 'TimeBeforeWrite'
 property are evaluated and, if any value has been exceeded, the buffered data will be written to the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.AnalyticsAPI.TimeBeforeWrite">
	<summary>
 Indicates the number of seconds before writing the in-memory buffer of records to the database.
 This is used mainly to smooth out the number of writes to the database. This value and the 'RecordsBeforeWrite'
 property are evaluated and, if any value has been exceeded, the buffered data will be written to the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.AnalyticsAPI.AppendToIISLog">
	<summary>
 Indicates whether or not the web.config has been set to append user_id and content_id information to the IIS log.
 </summary>
	<value>Boolean</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.AnalyticsAPI.InMemoryContentHitsData">
	<summary>
 The dataset that stores all the page/content view information in memory until it reaches its record or time threshold
 and writes back to the database. This is a strongly typed dataset of type 'ContentHitsData'. The underlying static member
 is initialized on demand.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.AnalyticsAPI.LastWriteTime">
	<summary>
 The date and time of the last write. This is used to determine if the 'TimeBeforeWrite' condition is
 met and the data in 'InMemoryContentHitsData' should be written to the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.AnalyticsAPI.HardDumpAnalyticsBuffer">
	<summary>
 Forces the analytics buffer to write to the database. This surpasses the checks to see if the time before write or number of records have passed.
 </summary>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.AnalyticsAPI.SoftDumpAnalyticsBuffer">
	<summary>
 Conditionally writes the analytics buffer in memory to write to the database. If the time before write or number of records before write
 conditions have been met or exceeded, this function will force the write to the database.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.AnalyticsAPI.TrackVisit(System.Web.UI.Page,System.Int64)">
	<summary>
 Tracks a visit to a page, and places it into the analytics buffer. This method calls SoftDumpAnalyticsBuffer.
 </summary>
	<param name="content_id">The ID of a content block that a visitor has viewed.</param>
	<param name="page">The System.Web.UI.Page object of a page visit. Will extract information from it such as visitor id, user id, session rank, and so forth.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.AnalyticsAPI.TrackVisit(System.Int64,System.Int64,System.String,System.Int32,System.String,System.String)">
	<summary>
 Tracks a visit to a page, and places it into the analytics buffer. This method calls SoftDumpAnalyticsBuffer.
 </summary>
	<param name="content_id">The ID of a content block that a visitor has viewed.</param>
	<param name="user_id">The CMS user ID of either a CMS User or Member. Is zero for a visitor.</param>
	<param name="visitor_id">A unique ID used for tracking purposes.</param>
	<param name="session_rank">The rank of the session of a particular visitor. A session rank of 0 is the first page a new user has visited. A session rank of 1 is the first page
 a returning user has visited. A session rank of 2 is any other page.</param>
	<param name="referring_url">An external URL a user has arrived from.</param>
	<param name="url">The URL the user is visiting.</param>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.AnalyticsAPI.GetSessionRank(System.Web.UI.Page)">
	<summary>
 Gets the Session rank of the visiting user. A session rank of 0 is the first page a new user has visited. A session rank of 1 is the first page
 a returning user has visited. A session rank of 2 is any other page.
 </summary>
	<param name="page"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.AnalyticsAPI.QueryAnalytics(System.String)">
	<summary>
 Provides a simple way of querying the database for analytics data. Returns the result as a weakly typed DataSet.
 Note that the connection is to the Analytics database and not to the standard CMS database.
 </summary>
	<param name="selectCommand">A query in the form of a string.</param>
	<returns>A weakly typed dataset with the result of the query.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.AnalyticsAPI.QueryGetAnalyticsInfo(System.String,System.String)">
	<summary>
 Provides a simple way of querying the database for analytics data. Returns the result as a weakly typed DataSet.
 Note that the connection is to the Analytics database and not to the standard CMS database.
 </summary>
	<param name="dateClause">The date clause to be used..</param>
	<param name="pageID">The page to with the analytics are to be retrieved</param>
	<returns>A weakly typed dataset with the result of the query.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.AnalyticsAPI.QueryGetAnalyticsInfoForLanguage(System.String,System.String,System.String)">
	<summary>
 Provides a simple way of querying the database for analytics data. Returns the result as a weakly typed DataSet.
 Note that the connection is to the Analytics database and not to the standard CMS database.
 </summary>
	<param name="dateclause">The date clause to be used.</param>
	<param name="pageID">The page to with the analytics are to be retrieved</param>
	<param name="langID">The language in which to get the analytics info</param>
	<returns>A weakly typed dataset with the result of the query.</returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.AnalyticsAPI.QueryAnalytics(System.String[])">
	<summary>
 Provides a simple way of querying the database for analytics data. Returns the result as a weakly typed DataSet.
 Note that the connection is to the Analytics database and not to the standard CMS database.
 </summary>
	<param name="selectCommands">An array of SQL queries in string format.</param>
	<returns>A weakly typed dataset with the result of the query.</returns>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.AnalyticsAPI">
	<summary>
 A static class (e.g. no instances of it can be created) that provides a gateway to the analytics tracking abilities of CMS400.
 This class provides both the ability to track users and easily query results in the specified database.
 </summary>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.AnalyticsBase.StartDateTime">
	<summary>
 The start of the range being 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.AnalyticsBase.EndDateTime">
	<summary>
 TODO: Document
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.AnalyticsBase.CurrentView">
	<summary>
 TODO: Document
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.AnalyticsBase.Description">
	<summary>
 TODO: Document
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Ektron.Cms.AnalyticsBase.DateClause">
	<summary>
 TODO: Document
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ektron.Cms.AnalyticsBase.Initialize">
	<summary>
 TODO: Document
 </summary>
	<remarks></remarks>
</member><member name="T:Ektron.Cms.AnalyticsPageSummary">
	<summary>
 TODO: Get rid of this and just make it a function call.
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>